<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JUC</title>
      <link href="2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/"/>
      <url>2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 秃头系列之 JUC</p></blockquote><span id="more"></span><h2 id="JUC-是什么-😦"><a href="#JUC-是什么-😦" class="headerlink" title="JUC 是什么 😦"></a>JUC 是什么 😦</h2><blockquote><p><code>java.util.concurrent</code>在并发编程中使用的<strong>工具类</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image004.jpg" alt="graphic"></p><h3 id="进程-线程回顾-😅"><a href="#进程-线程回顾-😅" class="headerlink" title="进程/线程回顾 😅"></a>进程/线程回顾 😅</h3><h4 id="进程-线程是什么？-❓"><a href="#进程-线程是什么？-❓" class="headerlink" title="进程/线程是什么？ ❓"></a>进程/线程是什么？ ❓</h4><p>进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p><p>线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</p><h4 id="举个栗子-🌰"><a href="#举个栗子-🌰" class="headerlink" title="举个栗子 🌰"></a>举个栗子 🌰</h4><ul><li><strong>例子一：</strong> 使用 QQ，查看进程一定有一个 QQ.exe 的进程，我可以用 qq 和 A 文字聊天，和 B 视频聊天，给 C 传文件，给 D 发一段语言，QQ 支持录入信息的搜索。</li><li><strong>例子二：</strong> 大四的时候写论文，用 word 写论文，同时用 QQ 音乐放音乐，同时用 QQ 聊天，多个进程。</li><li><strong>例子三：</strong> word 如没有保存，停电关机，再通电后打开 word 可以恢复之前未保存的文档，word 也会检查你的拼写，两个线程：容灾备份，语法检查</li></ul><h4 id="线程的状态-😴"><a href="#线程的状态-😴" class="headerlink" title="线程的状态 😴"></a>线程的状态 😴</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png" alt="Java 线程状态变迁 "></p><p>在 Java 中我们只能得到线程以下的线程状态：</p><ul><li>new</li><li>runnable</li><li>blocked</li><li>waiting</li><li>time_waiting</li><li>terminated</li></ul><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态，所以 Java 系统一般将这两个状态统称为 <strong>RUNNABLE（运行中）</strong> 状态 。</p></blockquote><h4 id="wait-sleep-的区别-😦"><a href="#wait-sleep-的区别-😦" class="headerlink" title="wait/sleep 的区别 😦"></a>wait/sleep 的区别 😦</h4><ul><li>wait：进入等待状态，并<strong>释放锁</strong>（放开手去睡，放开手里的锁）</li><li>sleep：进入等待状态，<strong>不释放锁</strong>（握紧手去睡，醒了手里还有锁）</li></ul><h4 id="什么是并发？什么是并行？🤔"><a href="#什么是并发？什么是并行？🤔" class="headerlink" title="什么是并发？什么是并行？🤔"></a>什么是并发？什么是并行？🤔</h4><ul><li>并发：同一时刻多个线程在访问同一个资源，多个线程对一个点（CPU 在多个线程之间反复横跳）</li><li>并行：多项工作一起执行，之后再汇总（多个 CPU 同时运行多个线程，一个 CPU 运行一个线程）</li></ul><h2 id="Lock-接口-🔒"><a href="#Lock-接口-🔒" class="headerlink" title="Lock 接口 🔒"></a>Lock 接口 🔒</h2><h3 id="复习-Synchronized😳"><a href="#复习-Synchronized😳" class="headerlink" title="复习 Synchronized😳"></a>复习 Synchronized😳</h3><p><strong>买票代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ticket = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">assert</span> ticket &gt; <span class="number">0</span> : name + <span class="string">&quot;买票失败，没有票啦&quot;</span>;</span><br><span class="line">        ticket--;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;售出一张票，还剩：&quot;</span> + ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Tickets x = <span class="keyword">new</span> Tickets();</span><br><span class="line">    <span class="comment">// 创建五个线程去买票</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 每个线程买10次票</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                x.sell();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 休息一下，CPU核数太多了，不休息看不出来票被抢夺</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;窗口&quot;</span> + j).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是什么？❓"><a href="#是什么？❓" class="headerlink" title="是什么？❓"></a>是什么？❓</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618277453136.jpg" alt="graphic"></p><blockquote><p>Lock implementations provide more extensive locking operations than can be obtained using synchronized methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated Condition objects.</p><p>翻译：锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对象。</p></blockquote><h3 id="怎么用-🔧"><a href="#怎么用-🔧" class="headerlink" title="怎么用 🔧"></a>怎么用 🔧</h3><blockquote><p>Lock 接口有多个实现类，我们以 ReentrantLock 为例</p></blockquote><h4 id="Lock-接口的实现-ReentrantLock-可重入锁"><a href="#Lock-接口的实现-ReentrantLock-可重入锁" class="headerlink" title="Lock 接口的实现 ReentrantLock 可重入锁"></a>Lock 接口的实现 ReentrantLock 可重入锁</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618277530938.jpg" alt="graphic"></p><p>看看官网文档的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     lock.lock();  <span class="comment">// block until condition holds</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// ... method body</span></span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用<code>ReentrantLock</code>实现买票程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ticket = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卖票方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">assert</span> ticket &gt; <span class="number">0</span> : name + <span class="string">&quot;买票失败，没有票啦&quot;</span>;</span><br><span class="line">            ticket--;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;售出一张票，还剩：&quot;</span> + ticket);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tickets x = <span class="keyword">new</span> Tickets();</span><br><span class="line">        <span class="comment">// 创建五个线程去买票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 每个线程买10次票</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    x.sell();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 休息一下，CPU核数太多了，不休息看不出来票被抢夺</span></span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;窗口&quot;</span> + j).start();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="synchronized-与-Lock-的区别-😦"><a href="#synchronized-与-Lock-的区别-😦" class="headerlink" title="synchronized 与 Lock 的区别 😦"></a>synchronized 与 Lock 的区别 😦</h3><p><strong>两者区别：</strong></p><ol><li>首先<code>synchronized</code>是<strong>java 内置关键字</strong>，在 jvm 层面，<strong>Lock 是个 java 类</strong>；</li><li><code>synchronized</code><strong>无法</strong>判断是否获取锁的状态，<code>Lock</code><strong>可以</strong>判断是否获取到锁；</li><li><code>synchronized</code>会<strong>自动释放锁</strong>(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，<code>Lock</code>需在 finally 中<strong>手工释放锁</strong>（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用<code>synchronized</code>关键字的两个线程 1 和线程 2，如果当前线程 1 获得锁，线程 2 线程等待。<strong>如果线程 1 阻塞，线程 2 则会一直等待下去</strong>，而 Lock 锁就不一定会等待下去，<strong>如果尝试获取不到锁，线程可以不用一直等待就结束了</strong>；</li><li><code>synchronized</code>的锁可重入、不可中断、非公平，而<code>Lock</code>锁可重入、可判断、可公平（两者皆可）</li><li><code>Lock</code>锁适合大量同步的代码的同步问题，<code>synchronized</code>锁适合代码少量的同步问题。</li></ol><h2 id="线程间通信-📞"><a href="#线程间通信-📞" class="headerlink" title="线程间通信 📞"></a>线程间通信 📞</h2><h3 id="面试题：两个线程打印-📝"><a href="#面试题：两个线程打印-📝" class="headerlink" title="面试题：两个线程打印 📝"></a>面试题：两个线程打印 📝</h3><p>✍ 两个线程，一个线程打印数字 1-52，另一个打印字母 A-Z 打印顺序为 12A34B…5152Z</p><p>实现步骤：</p><ul><li>生产者+消费者</li><li>通知等待唤醒机制</li></ul><p>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadCommunication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// false：打印数字，true：打印字母</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 记录数字</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 记录字母</span></span><br><span class="line">    <span class="keyword">int</span> letter = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printNumber</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 为true先休眠，让字母先打印</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果到了52就退出并唤醒字母线程</span></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">52</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + num + <span class="string">&quot;, &quot;</span> + (++num));</span><br><span class="line">        num++;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印字母</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printLetter</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 为false先休眠，让数字先打印</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果到了Z就退出并唤醒数字线程</span></span><br><span class="line">        <span class="keyword">if</span> (letter &gt; <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + ((<span class="keyword">char</span>) letter++));</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    ThreadCommunication threadCommunication = <span class="keyword">new</span> ThreadCommunication();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        where(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threadCommunication.printNumber();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;数字线程&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        where(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threadCommunication.printLetter();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;字母线程&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加到-4-个线程-🆙"><a href="#增加到-4-个线程-🆙" class="headerlink" title="增加到 4 个线程 🆙"></a>增加到 4 个线程 🆙</h3><ul><li><p><strong>出现问题：</strong> 换成 4 个线程会导致错误，虚假唤醒</p></li><li><p><strong>原因：</strong> 在 java 多线程判断时，不能用 if，程序出事出在了判断上面，突然有一添加的线程进到 if 了，突然中断了交出控制权，没有进行验证，而是直接走下去了，加了两次，甚至多次</p></li><li><p><strong>解决方法：</strong></p><ul><li><p>解决虚假唤醒：查看 API，java.lang.Object</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618284313147.jpg" alt="graphic"></p><p>中断和虚假唤醒是可能产生的，所以要用<strong>loop 循环</strong>，if 只判断一次，<strong>while 是只要唤醒就要拉回来再判断一次</strong>。if 换成 while</p></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">this</span>.wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if改为while👇</span></span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">this</span>.wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="java8-新版实现-🆕"><a href="#java8-新版实现-🆕" class="headerlink" title="java8 新版实现 🆕"></a>java8 新版实现 🆕</h3><p><code>lock</code>对标<code>synchronization</code>实现</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413114243997.png" alt="image-20210413114243997"></p><h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p><code>lock</code> 的 <code>await</code> 和 <code>signal </code>方法需要靠 <code>Condition </code>接口实现</p><p>查看 API，java.util.concurrent</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618286075328.jpg" alt="graphic"></p><p>代码举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">final</span> Condition notFull  = lock.newCondition();</span><br><span class="line">    <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> putptr, takeptr, count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            items[putptr] = x;</span><br><span class="line">            <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;</span><br><span class="line">            ++count;</span><br><span class="line">            notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程间定制化调用通信-💱"><a href="#线程间定制化调用通信-💱" class="headerlink" title="线程间定制化调用通信 💱"></a>线程间定制化调用通信 💱</h2><h3 id="一个问题：多个线程依次打印-📝"><a href="#一个问题：多个线程依次打印-📝" class="headerlink" title="一个问题：多个线程依次打印 📝"></a>一个问题：多个线程依次打印 📝</h3><p>✍ 有三个线程，A 线程打印字符 AA，B 线程打印字符 BB，C 线程打印字符 CC，需要依次打印出 abc，打印十轮，每轮 AA 要打印五次，BB 要打印 10 次，CC 要打印 15 次</p><p><strong>实现步骤：</strong></p><ul><li>有顺序通知，需要有标识位</li><li>有一个锁 Lock，3 把钥匙 Condition</li><li>判断标志位</li><li>输出线程名+第几次+第几轮</li><li>修改标志位，通知下一个</li></ul><p><strong>实现代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareResource</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1:A 2:B 3:C</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition c1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition c2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition c3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print5</span><span class="params">(<span class="keyword">int</span> totalLoopNumber)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 判断</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//A 就要停止</span></span><br><span class="line">                c1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + i + <span class="string">&quot;\t totalLoopNumber: &quot;</span> + totalLoopNumber);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3 通知</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            c2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print10</span><span class="params">(<span class="keyword">int</span> totalLoopNumber)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 判断</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//A 就要停止</span></span><br><span class="line">                c2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + i + <span class="string">&quot;\t totalLoopNumber: &quot;</span> + totalLoopNumber);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3 通知</span></span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            c3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print15</span><span class="params">(<span class="keyword">int</span> totalLoopNumber)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 判断</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">//A 就要停止</span></span><br><span class="line">                c3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + i + <span class="string">&quot;\t totalLoopNumber: &quot;</span> + totalLoopNumber);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3 通知</span></span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            c1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ShareResource sr = <span class="keyword">new</span> ShareResource();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sr.print5(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sr.print10(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sr.print15(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;CC&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronization-锁问题-❓"><a href="#Synchronization-锁问题-❓" class="headerlink" title="Synchronization 锁问题 ❓"></a>Synchronization 锁问题 ❓</h2><h3 id="八个问题-📝"><a href="#八个问题-📝" class="headerlink" title="八个问题 📝"></a>八个问题 📝</h3><ol><li><p>标准访问，先打印短信还是邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------getHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">   Phone phone2 = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">   Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>停 4 秒在短信方法内，先打印短信还是邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        这里使用sleep停止<span class="number">4</span>秒</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------getHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">   Phone phone2 = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">   Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>普通的 hello 方法，是先打短信还是 hello</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------getHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">   Phone phone2 = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">   Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// phone.sendEmail();</span></span><br><span class="line">     phone.getHello();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, <span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>现在有两部手机，先打印短信还是邮件</p></li><li><p>两个静态同步方法，1 部手机，先打印短信还是邮件</p></li><li><p>两个静态同步方法，2 部手机，先打印短信还是邮件</p></li><li><p>1 个静态同步方法，1 个普通同步方法，1 部手机，先打印短信还是邮件</p></li><li><p>1 个静态同步方法，1 个普通同步方法，2 部手机，先打印短信还是邮件</p></li></ol><h3 id="问题答案-🤫"><a href="#问题答案-🤫" class="headerlink" title="问题答案 🤫"></a>问题答案 🤫</h3><ol><li>短信</li><li>短信</li><li>Hello</li><li>邮件</li><li>短信</li><li>短信</li><li>邮件</li><li>邮件</li></ol><h3 id="问题分析-🧐"><a href="#问题分析-🧐" class="headerlink" title="问题分析 🧐"></a>问题分析 🧐</h3><ul><li><code>synchronization</code>关键字锁的是对象，且当对象被锁时，需要等待锁被释放后其他线程才能获得锁</li><li>当<code>synchronization</code>修饰普通方法时，锁的是实例对象</li><li>当<code>synchronization</code>修饰的是静态方法时，锁的是类对象</li></ul><h2 id="不安全集合-🚨"><a href="#不安全集合-🚨" class="headerlink" title="不安全集合 🚨"></a>不安全集合 🚨</h2><blockquote><p>总所周知<code>HashMap</code>、<code>ArrayList</code>、<code>HashSet</code>都是线程不安全的，那么我们应该怎么去在多线程情况下去保证集合的线程安全呢？</p></blockquote><h3 id="证明线程不安全-🤯"><a href="#证明线程不安全-🤯" class="headerlink" title="证明线程不安全 🤯"></a>证明线程不安全 🤯</h3><p><strong>运行以下代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> i = j;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        String key = UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>) + Thread.currentThread().getName() + i;</span><br><span class="line">        arr.add(key);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    &#125;, <span class="string">&quot;线程&quot;</span> + j + <span class="string">&quot;：&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413143558545.png" alt="image-20210413143558545"></p><p>可以看到，运行上面的代码后出现了<code>java.util.ConcurrentModificationException</code>（并发修改异常）异常，ArrayList 在迭代的时候如果对其进行修改就会抛出这个异常</p><ul><li><p><strong>解决方案：</strong></p><ul><li><p><strong>方案一：</strong> Vector</p><ul><li><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413143920131.png" alt="image-20210413143920131"></li><li>我们可以选择使用<code>Vector</code>这个线程安全的集合</li><li>下面这个是<code>Vector</code>添加元素的源码，可以看到该方法上面添加了<code>synchronization</code>关键字，保证了线程安全</li><li><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413144051872.png" alt="image-20210413144051872"></li></ul></li><li><p><strong>方案二：</strong> Collections</p><ul><li>使用<code>Collections#synchronizedList</code>方法将<code>ArrayList</code>转换成线程安全的</li><li><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413144654816.png" alt="image-20210413144654816"></li><li>可以看到实际上也是使用了<code>synchronization</code>关键字来保证的线程安全</li></ul></li><li><p><strong>方案三：</strong> 写时复制</p><ul><li><p>虽然不加锁性能好但是会出错误，加锁又会导致性能下降</p></li><li><p>我们可以折中一下使用<code>CopyOnWriteArrayList</code></p></li><li><blockquote><p>A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.</p><p>CopyOnWriteArrayList 是 arraylist 的一种线程安全变体，其中所有可变操作（add、set 等）都是通过生成底层数组的新副本来实现的。</p></blockquote></li><li><p><code>CopyOnWrite</code>容器即<strong>写时复制的容器</strong>。往一个容器<strong>添加元素</strong>的时候，不直接往当前容器<code>Object[]</code>添加，而是<strong>先将当前容器<code>Object[]</code>进行 Copy</strong>，复制出一个新的容器<code>Object[] newElements</code>，然后向新的容器<code>Object[] newElements</code>里添加元素。添加元素后，<strong>再将原容器的引用指向新的容器<code>setArray(newElements)</code><strong>。这样做的好处是可以对<code>CopyOnWrite</code>容器进行</strong>并发的读</strong>，而不需要加锁，因为当前容器不会添加任何元素。所以<code>CopyOnWrite</code>容器也是一种<strong>读写分离的思想</strong>，读和写不同的容器。</p><ol><li>先复制</li><li>往复制的数组中添加元素</li><li>将原容器的引用指向复制的数组</li></ol></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413151325401.png" alt="image-20210413151325401"></p></li></ul></li></ul></li></ul><h2 id="Callable-接口-↩️"><a href="#Callable-接口-↩️" class="headerlink" title="Callable 接口 ↩️"></a>Callable 接口 ↩️</h2><h3 id="是什么-❓"><a href="#是什么-❓" class="headerlink" title="是什么 ❓"></a>是什么 ❓</h3><h4 id="面试题：获得多线程的方法几种？"><a href="#面试题：获得多线程的方法几种？" class="headerlink" title="面试题：获得多线程的方法几种？"></a>面试题：获得多线程的方法几种？</h4><p><strong>不完整答案：</strong> 继承<code>Thread</code>类 和 实现<code>Runnable</code>接口</p><p>==<strong>如果只回答这两个你连被问到 juc 的机会都没有</strong>==</p><p><strong>正确答案如下：</strong></p><p><strong>传统的是</strong>继承<code>Thread</code>类 和 实现<code>Runnable</code>接口，<br><strong>java5 以后</strong>又有实现<code>Callable</code>接口 和 java 的线程池 获得</p><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413153235849.png" alt="image-20210413153235849"></p><p>这是一个函数式接口，因此可以用作 lambda 表达式或方法引用的赋值对象</p><h3 id="与-Runnable-接口的对比-😦"><a href="#与-Runnable-接口的对比-😦" class="headerlink" title="与 Runnable 接口的对比 😦"></a>与 Runnable 接口的对比 😦</h3><p><strong>编码方面的区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新类MyThread实现runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新类MyThread2实现callable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题：callable 接口与 runnable 接口的区别？</strong></p><ul><li>Callable 接口有返回值，Runnable 接口没有</li><li>Callable 接口可以抛出异常，Runnable 接口不行</li><li>落地方法不一样，一个是 run，一个是 call</li></ul><h3 id="怎么用-🔧-1"><a href="#怎么用-🔧-1" class="headerlink" title="怎么用 🔧"></a>怎么用 🔧</h3><h4 id="直接替换-runnable-是否可行？"><a href="#直接替换-runnable-是否可行？" class="headerlink" title="直接替换 runnable 是否可行？"></a>直接替换 runnable 是否可行？</h4><p>我们来尝试一下能不能直接替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里会报错</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2(), <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413154606831.png" alt="image-20210413154606831"></p><h4 id="曲线救国"><a href="#曲线救国" class="headerlink" title="曲线救国"></a>曲线救国</h4><p>可以看到不能直接把<code>runnable</code>接口的实现直接换成<code>callable</code>接口的实现，那么我们可以采用曲线救国的方式来修改</p><p>我们知道接口可以多继承，那么我们找一个实现了<code>runnable</code>和<code>callable</code>接口的类不就好了嘛 🤣</p><p>那么热烈欢迎我们的<code>FutureTask</code>同学登场</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413154959592.png" alt="image-20210413154959592"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> MyThread());</span><br><span class="line">    <span class="keyword">new</span> Thread(ft, <span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413155210045.png" alt="image-20210413155210045"></p><p>当当当，这样就没有报错啦。但是我们发现好像并没有把我们的 200 给输出欸，那么我们怎么获得返回值呢？</p><p>使用：<code>ft.get();</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413155428880.png" alt="image-20210413155428880"></p><p>这个方法会阻塞主线程，直到任务线程运行结束</p><h3 id="FutureTask😲"><a href="#FutureTask😲" class="headerlink" title="FutureTask😲"></a>FutureTask😲</h3><blockquote><p>我们现在来正式介绍一下<code>FutureTask</code>类</p></blockquote><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>未来的任务，用它就干一件事，<strong>异步调用</strong></p><p>你可以使用它来创建一个任务并再创建一个线程来执行这个任务，线程开启后它会默默执行，你使用<code>ft.get();</code>就可以得到该任务的返回值</p><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><p>老师上着课，口渴了，去买水不合适，讲课线程继续，我可以单起个线程找班长帮忙买水，水买回来了放桌上，我需要的时候再去 get。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>在主线程中需要执行<strong>比较耗时</strong>的操作时，但又<strong>不想阻塞主线程</strong>时，可以把这些作业交给 Future 对象在后台完成，当主线程将来需要时，就可以通过 Future 对象获得后台作业的计算结果或者执行状态。</li><li>一般 FutureTask 多用于<strong>耗时的计算</strong>，主线程可以在完成自己的任务后，再去获取结果。</li><li>仅在计算完成时才能检索结果；<ul><li>如果计算尚未完成，则阻塞 get 方法。</li><li>一旦计算完成，就不能再重新开始或取消计算。</li><li>get 方法而获取结果只有在计算完成时获取，否则会一直阻塞直到任务转入完成状态，然后会返回结果或者抛出异常。</li><li>只计算一次</li></ul></li></ul><h2 id="JUC-强大的辅助类讲解-🧰"><a href="#JUC-强大的辅助类讲解-🧰" class="headerlink" title="JUC 强大的辅助类讲解 🧰"></a>JUC 强大的辅助类讲解 🧰</h2><h3 id="CountDownLatch-减少计数-➖"><a href="#CountDownLatch-减少计数-➖" class="headerlink" title="CountDownLatch 减少计数 ➖"></a>CountDownLatch 减少计数 ➖</h3><ul><li>CountDownLatch 主要有两个方法，当一个或多个线程调用 await 方法时，这些线程会阻塞。</li><li>其它线程调用 countDown 方法会将计数器减 1(调用 countDown 方法的线程不会阻塞)，</li><li>当计数器的值变为 0 时，因 await 方法阻塞的线程会被唤醒，继续执行。</li></ul><h4 id="应用场景举例"><a href="#应用场景举例" class="headerlink" title="应用场景举例"></a>应用场景举例</h4><p>6 个同学陆续离开教室后值班同学才可以关门。</p><h4 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++) <span class="comment">//6个上自习的同学，各自离开教室的时间不一致</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 号同学离开教室&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t****** 班长关门走人，main线程是班长&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CyclicBarrier-循环栅栏-🚧"><a href="#CyclicBarrier-循环栅栏-🚧" class="headerlink" title="CyclicBarrier 循环栅栏 🚧"></a>CyclicBarrier 循环栅栏 🚧</h3><ul><li>CyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过 CyclicBarrier 的 await()方法。</li></ul><h4 id="应用场景举例-1"><a href="#应用场景举例-1" class="headerlink" title="应用场景举例"></a>应用场景举例</h4><p>老师需要等所有学生（7 个）到了才上课</p><h4 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(NUMBER, ()-&gt;System.out.println(<span class="string">&quot;*****老师开始上课*****&quot;</span>)) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;到教室了&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)+<span class="string">&quot;同学&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Semaphore-信号灯-🚦"><a href="#Semaphore-信号灯-🚦" class="headerlink" title="Semaphore 信号灯 🚦"></a>Semaphore 信号灯 🚦</h3><ul><li>在信号量上我们定义两种操作：<ul><li>acquire（获取） 当一个线程调用 acquire 操作时，它要么通过成功获取信号量（信号量减 1），要么一直等下去，直到有线程释放信号量，或超时。</li><li>release（释放）实际上会将信号量的值加 1，然后唤醒等待的线程。</li></ul></li><li>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</li></ul><h4 id="应用场景举例-2"><a href="#应用场景举例-2" class="headerlink" title="应用场景举例"></a>应用场景举例</h4><p>六辆车抢三个车位，需要等停车位上面的车离开后，外面的车才能进来</p><h4 id="代码举例-2"><a href="#代码举例-2" class="headerlink" title="代码举例"></a>代码举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);<span class="comment">//模拟3个停车位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++) <span class="comment">//模拟6部汽车</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 抢到了车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5</span>));</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t------- 离开&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrantReadWriteLock-读写锁-🔐"><a href="#ReentrantReadWriteLock-读写锁-🔐" class="headerlink" title="ReentrantReadWriteLock 读写锁 🔐"></a>ReentrantReadWriteLock 读写锁 🔐</h2><h3 id="是什么-❓-1"><a href="#是什么-❓-1" class="headerlink" title="是什么 ❓"></a>是什么 ❓</h3><p>读写锁定义其实很简单，就是：</p><ul><li>读的时候别人不能写</li><li>写的时候别人不能读</li><li>写的时候别人不能写</li><li>读的时候别人可以读</li></ul><p>再简单点说就是：读写不能同时进行，读读可以</p><h3 id="问题举例-🌰"><a href="#问题举例-🌰" class="headerlink" title="问题举例 🌰"></a>问题举例 🌰</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在写&quot;</span> + key);</span><br><span class="line">        <span class="comment">//暂停一会儿线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写完了&quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在读&quot;</span> + key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        result = map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读完了&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache myCache = <span class="keyword">new</span> MyCache();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> num = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.put(num + <span class="string">&quot;&quot;</span>, num + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> num = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.get(num + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1 正在写1</span><br><span class="line">2 正在写2</span><br><span class="line">5 正在写5</span><br><span class="line">1 正在读1</span><br><span class="line">4 正在读4</span><br><span class="line">5 正在读5</span><br><span class="line">3 正在写3</span><br><span class="line">4 正在写4</span><br><span class="line">2 正在读2</span><br><span class="line">3 正在读3</span><br><span class="line">1 读完了null</span><br><span class="line">2 写完了2</span><br><span class="line">4 读完了null</span><br><span class="line">5 读完了null</span><br><span class="line">3 读完了null</span><br><span class="line">2 读完了2</span><br><span class="line">4 写完了4</span><br><span class="line">3 写完了3</span><br><span class="line">1 写完了1</span><br><span class="line">5 写完了5</span><br></pre></td></tr></table></figure><p>可以看到我们还没写完就开始读了，还没读完就开始写了，这样就会导致线程安全的问题，不能保证操作的原子性</p><h3 id="使用读写锁的代码-👩‍💻"><a href="#使用读写锁的代码-👩‍💻" class="headerlink" title="使用读写锁的代码 👩‍💻"></a>使用读写锁的代码 👩‍💻</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock rwLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在写&quot;</span> + key);</span><br><span class="line">            <span class="comment">//暂停一会儿线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写完了&quot;</span> + key);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在读&quot;</span> + key);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            result = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读完了&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache myCache = <span class="keyword">new</span> MyCache();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> num = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.put(num + <span class="string">&quot;&quot;</span>, num + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> num = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.get(num + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1 正在写1</span><br><span class="line">1 写完了1</span><br><span class="line"></span><br><span class="line">3 正在写3</span><br><span class="line">3 写完了3</span><br><span class="line"></span><br><span class="line">4 正在写4</span><br><span class="line">4 写完了4</span><br><span class="line"></span><br><span class="line">2 正在写2</span><br><span class="line">2 写完了2</span><br><span class="line"></span><br><span class="line">5 正在写5</span><br><span class="line">5 写完了5</span><br><span class="line"></span><br><span class="line">1 正在读1</span><br><span class="line">2 正在读2</span><br><span class="line">3 正在读3</span><br><span class="line">4 正在读4</span><br><span class="line">5 正在读5</span><br><span class="line">4 读完了4</span><br><span class="line">2 读完了2</span><br><span class="line">1 读完了1</span><br><span class="line">5 读完了5</span><br><span class="line">3 读完了3</span><br></pre></td></tr></table></figure><p>可以看到使用了读写锁后，在写的时候没有被打断了，但是读和读之间可以随意打断</p><h2 id="BlockingQueue-阻塞队列-⏳"><a href="#BlockingQueue-阻塞队列-⏳" class="headerlink" title="BlockingQueue 阻塞队列 ⏳"></a>BlockingQueue 阻塞队列 ⏳</h2><h3 id="是什么-❓-2"><a href="#是什么-❓-2" class="headerlink" title="是什么 ❓"></a>是什么 ❓</h3><p>虽然说程序运行中阻塞不好，但是有些时候我们必须使用阻塞来完成某些事情</p><p><strong>阻塞：必须要阻塞/不得不阻塞</strong></p><p>阻塞队列是一个队列，在数据结构中起的作用如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413170339956.png" alt="image-20210413170339956"></p><ul><li>当队列是空的，从队列中获取元素的操作将会被阻塞</li><li>当队列是满的，从队列中添加元素的操作将会被阻塞</li><li>试图从空的队列中获取元素的线程将会被阻塞，直到其他线程往空的队列插入新的元素</li><li>试图向已满的队列中添加新元素的线程将会被阻塞，直到其他线程从队列中移除一个或多个元素或者完全清空，使队列变得空闲起来并后续新增</li></ul><h3 id="阻塞队列的用处-🤔"><a href="#阻塞队列的用处-🤔" class="headerlink" title="阻塞队列的用处 🤔"></a>阻塞队列的用处 🤔</h3><ul><li>在多线程领域：<ul><li>所谓阻塞，在某些情况下会<strong>挂起线程</strong>（即阻塞），一旦条件满足，被挂起的线程又会<strong>自动被唤起</strong></li></ul></li><li>为什么需要 BlockingQueue：<ul><li>好处是我们<strong>不需要关心什么时候需要阻塞线程</strong>，<strong>什么时候需要唤醒线程</strong>，因为这一切 BlockingQueue 都给你一手包办</li><li>在 concurrent 包发布以前，在多线程环境下，我们<strong>每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全</strong>，而这会给我们的程序带来不小的复杂度。</li></ul></li></ul><h3 id="架构梳理、种类分析-📚"><a href="#架构梳理、种类分析-📚" class="headerlink" title="架构梳理、种类分析 📚"></a>架构梳理、种类分析 📚</h3><ul><li><p>架构介绍</p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413192734518.png" alt="image-20210413192734518" style="zoom:200%;"></li><li><p>种类分析</p><ul><li>ArrayBlockingQueue：由数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue：由链表结构组成的有界（但大小默认值为 integer.MAX_VALUE）阻塞队列。</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列。</li><li>SynchronousQueue：不存储元素的阻塞队列，也即单个元素的队列。</li><li>LinkedTransferQueue：由链表组成的无界阻塞队列。</li><li>LinkedBlockingDeque：由链表组成的双向阻塞队列。</li></ul></li></ul><h3 id="BlockingQueue-核心方法-💠"><a href="#BlockingQueue-核心方法-💠" class="headerlink" title="BlockingQueue 核心方法 💠"></a>BlockingQueue 核心方法 💠</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413192944228.png" alt="image-20210413192944228"></p><table><thead><tr><th>方法类型</th><th align="center">解释</th></tr></thead><tbody><tr><td>抛出异常</td><td align="center">当阻塞队列满时，再往队列里 add 插入元素会抛 IllegalStateException:Queue full 当阻塞队列空时，再往队列里 remove 移除元素会抛 NoSuchElementException</td></tr><tr><td>特殊值</td><td align="center">插入方法，成功 ture 失败 false 移除方法，成功返回出队列的元素，队列里没有就返回 null</td></tr><tr><td>一直阻塞</td><td align="center">当阻塞队列满时，生产者线程继续往队列里 put 元素，队列会一直阻塞生产者线程直到 put 数据 or 响应中断退出 当阻塞队列空时，消费者线程试图从队列里 take 元素，队列会一直阻塞消费者线程直到队列可用</td></tr><tr><td>超时退出</td><td align="center">当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        List list = new ArrayList();</span></span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//第一组</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.add(&quot;a&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.add(&quot;b&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.add(&quot;c&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.element());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(blockingQueue.add(&quot;x&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.remove());</span></span><br><span class="line">        <span class="comment">//    第二组</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.offer(&quot;a&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.offer(&quot;b&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.offer(&quot;c&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.offer(&quot;x&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.poll());</span></span><br><span class="line">        <span class="comment">//    第三组</span></span><br><span class="line">        <span class="comment">//         blockingQueue.put(&quot;a&quot;);</span></span><br><span class="line">        <span class="comment">//         blockingQueue.put(&quot;b&quot;);</span></span><br><span class="line">        <span class="comment">//         blockingQueue.put(&quot;c&quot;);</span></span><br><span class="line">        <span class="comment">//         //blockingQueue.put(&quot;x&quot;);</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line">        <span class="comment">//        System.out.println(blockingQueue.take());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    第四组</span></span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>,<span class="number">3L</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadPool-线程池-🌊"><a href="#ThreadPool-线程池-🌊" class="headerlink" title="ThreadPool 线程池 🌊"></a>ThreadPool 线程池 🌊</h2><h3 id="为什么用线程池-❓"><a href="#为什么用线程池-❓" class="headerlink" title="为什么用线程池 ❓"></a>为什么用线程池 ❓</h3><h4 id="举个栗子-🌰-1"><a href="#举个栗子-🌰-1" class="headerlink" title="举个栗子 🌰"></a>举个栗子 🌰</h4><ul><li>10 年前单核 CPU 电脑，假的多线程，像马戏团小丑玩多个球，CPU 需要来回切换。</li><li>现在是多核电脑，多个线程各自跑在独立的 CPU 上，不用切换效率高。</li></ul><h4 id="线程池的优势-👍"><a href="#线程池的优势-👍" class="headerlink" title="线程池的优势 👍"></a>线程池的优势 👍</h4><blockquote><p>线程池做的工作只要是控制运行的线程数量，<strong>处理过程中将任务放入队列</strong>，然后在线程创建后启动这些任务，<strong>如果线程数量超过了最大数量，超出数量的线程排队等候</strong>，等其他线程执行完毕，再从队列中取出任务来执行。</p></blockquote><p><strong>它的主要特点为：</strong></p><blockquote><ol><li><strong>线程复用</strong></li><li><strong>控制最大并发数</strong></li><li><strong>管理线程</strong></li></ol></blockquote><ul><li><strong>降低资源消耗：</strong>通过重复利用已创建的线程降低线程创建和销毁造成的销耗。</li><li><strong>提高响应速度：</strong>当任务到达时，任务可以不需要等待线程创建就能立即执行。</li><li><strong>提高线程的可管理性：</strong>线程是稀缺资源，如果无限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="怎么用-🦾"><a href="#怎么用-🦾" class="headerlink" title="怎么用 🦾"></a>怎么用 🦾</h3><h4 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h4><blockquote><p>Java 中的线程池是通过<code>Executor</code>框架实现的，该框架中用到了<code>Executor</code>，<code>Executors</code>，<code>ExecutorService</code>，<code>ThreadPoolExecutor</code>这几个类</p></blockquote><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618314213310.jpg" alt="graphic" style="zoom:200%;"><h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><ul><li><p><strong>FixedThreadPool</strong></p><p>固定线程数的线程池</p><p><code>Executors.newFixedThreadPool(int)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newFixedThreadPool</code>创建的线程池<code>corePoolSize</code>和<code>maximumPoolSize</code>值是相等的，它使用的是<code>LinkedBlockingQueue</code></p><p>执行长期任务性能好，创建一个线程池， 一池有 N 个固定的线程，有固定线程数的线程</p></li><li><p><strong>SingleThreadExecutor</strong></p><p>只有一个线程的线程池，一个任务一个任务的执行，一池一线程</p><p><code>Executors.newSingleThreadExecutor()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newSingleThreadExecutor </code>创建的线程池<code>corePoolSize</code>和<code>maximumPoolSize</code>值都是 1，它使用的是<code>LinkedBlockingQueue</code></p></li><li><p><strong>CachedThreadPool</strong></p><p>可以动态修改线程数量的线程池</p><p><code>Executors.newCachedThreadPool()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newCachedThreadPool</code>创建的线程池将<code>corePoolSize</code>设置为 0，将<code>maximumPoolSize</code>设置为<code>Integer.MAX_VALUE</code>，它使用的是<code>SynchronousQueue</code>，也就是说来了任务就创建线程运行，当线程空闲超过 60 秒，就销毁线程。</p><p>执行很多短期异步任务，线程池根据需要创建新线程， 但在先前构建的线程可用时将重用它们。可扩容，遇强则强</p></li><li><p><strong>举例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> * Arrays</span></span><br><span class="line"><span class="comment"> * Collections</span></span><br><span class="line"><span class="comment"> * Executors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//List list = new ArrayList();</span></span><br><span class="line">        <span class="comment">//List list = Arrays.asList(&quot;a&quot;,&quot;b&quot;);</span></span><br><span class="line">        <span class="comment">//固定数的线程池，一池五线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//       ExecutorService threadPool =  Executors.newFixedThreadPool(5); //一个银行网点，5个受理业务的窗口</span></span><br><span class="line">        <span class="comment">//       ExecutorService threadPool =  Executors.newSingleThreadExecutor(); //一个银行网点，1个受理业务的窗口</span></span><br><span class="line">        ExecutorService threadPool =  Executors.newCachedThreadPool(); <span class="comment">//一个银行网点，可扩展受理业务的窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//10个顾客请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 办理业务&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用Executors工具类创建线程池的详解"><a href="#使用Executors工具类创建线程池的详解" class="headerlink" title="使用Executors工具类创建线程池的详解"></a>使用<code>Executors</code>工具类创建线程池的详解</h4><blockquote><p>其实使用<code>Executors</code>工具类创建的线程池，实际上都是操作的<code>ThreadPoolExecutor</code>类来创建的线程池</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413195750394.png" alt="image-20210413195750394"></p><h3 id="线程池几个重要参数-💨"><a href="#线程池几个重要参数-💨" class="headerlink" title="线程池几个重要参数 💨"></a>线程池几个重要参数 💨</h3><blockquote><p>就是创建<code>ThreadPoolExecutor</code>类所需的 7 个属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPoolExecutor类的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>corePoolSize：</strong>线程池中的常驻核心线程数</li><li><strong>maximumPoolSize</strong>：线程池中能够容纳同时 执行的最大线程数，此值必须大于等于 1</li><li><strong>keepAliveTime</strong>：多余的空闲线程的存活时间 当前池中线程数量超过 corePoolSize 时，当空闲时间 达到 keepAliveTime 时，多余线程会被销毁直到 只剩下 corePoolSize 个线程为止</li><li><strong>unit</strong>：keepAliveTime 的单位</li><li><strong>workQueue</strong>：任务队列，被提交但尚未被执行的任务</li><li><strong>threadFactory</strong>：表示生成线程池中工作线程的线程工厂， 用于创建线程，一般默认的即可</li><li><strong>handler</strong>：拒绝策略，表示当队列满了，并且工作线程大于 等于线程池的最大线程数（maximumPoolSize）时如何来拒绝 请求执行的 runnable 的策略</li></ol><h3 id="线程池底层工作原理-🔍"><a href="#线程池底层工作原理-🔍" class="headerlink" title="线程池底层工作原理 🔍"></a>线程池底层工作原理 🔍</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image001.jpg" alt="graphic"><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image003.jpg" alt="graphic"></p><p>==<strong>以下重要 ❗ 以下重要 ❗ 以下重要 ❗ 以下重要 ❗ 以下重要 ❗ 以下重要 ❗</strong>==</p><ol><li>在创建了线程池后，开始<strong>等待请求</strong>。</li><li>当调用**<code>execute()</code><strong>方法添加一个请求任务时，线程池会做出</strong>如下判断**：<ol><li>如果正在运行的<strong>线程数量小于 <code>corePoolSize</code><strong>，那么</strong>马上创建线程运行这个任务</strong>；</li><li>如果正在运行的<strong>线程数量大于或等于<code>corePoolSize</code><strong>，那么将这个任务</strong>放入队列</strong>；</li><li>如果这个时候<strong>队列满了且正在运行的线程数量还小于<code>maximumPoolSize</code><strong>，那么还是要</strong>创建非核心线程立刻运行这个任务</strong>；</li><li>如果<strong>队列满了且正在运行的线程数量大于或等于<code>maximumPoolSize</code><strong>，那么线程池会启动</strong>饱和拒绝策略来执行</strong>。</li></ol></li><li>当一个线程完成任务时，它会<strong>从队列中取下一个任务来执行</strong>。</li><li>当一个线程<strong>无事可做</strong>超过一定的时间（**<code>keepAliveTime</code>**）时，线程会判断：<ol><li>如果当前<strong>运行的线程数大于<code>corePoolSize</code><strong>，那么这个线程就被</strong>停掉</strong>。</li><li>所以线程池的所有任务完成后，它最终会收缩到**<code>corePoolSize</code>**的大小。</li></ol></li></ol><h3 id="线程池的拒绝策略-⏸"><a href="#线程池的拒绝策略-⏸" class="headerlink" title="线程池的拒绝策略 ⏸"></a>线程池的拒绝策略 ⏸</h3><h4 id="是什么-❓-3"><a href="#是什么-❓-3" class="headerlink" title="是什么 ❓"></a>是什么 ❓</h4><blockquote><p><strong>等待队列已经排满了，再也塞不下新任务了</strong>。同时，<strong>线程池中的 max 线程也达到了，无法继续为新任务服务</strong>。这个是时候我们就需要拒绝策略机制合理的处理这个问题。</p></blockquote><ul><li>JDK 内置的拒绝策略<ul><li><strong>AbortPolicy(默认)：</strong>直接抛出 RejectedExecutionException 异常阻止系统正常运行</li><li><strong>CallerRunsPolicy：</strong>“调用者运行”一种调节机制，该策略既不会抛弃任务，也不 会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</li><li><strong>DiscardOldestPolicy：</strong>抛弃队列中等待最久的任务，然后把当前任务加人队列中 尝试再次提交当前任务。</li><li><strong>DiscardPolicy：</strong>该策略默默地丢弃无法处理的任务，不予任何处理也不抛出异常。 如果允许任务丢失，这是最好的一种策略。</li></ul></li><li>以上内置拒绝策略均实现了 <code>RejectedExecutionHandle</code>接口</li></ul><h3 id="线程池的一些问题-❓"><a href="#线程池的一些问题-❓" class="headerlink" title="线程池的一些问题 ❓"></a>线程池的一些问题 ❓</h3><h4 id="在工作中单一的-固定数的-可变的三种创建线程池的方法哪个用的多？超级大坑"><a href="#在工作中单一的-固定数的-可变的三种创建线程池的方法哪个用的多？超级大坑" class="headerlink" title="在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多？超级大坑"></a>在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多？超级大坑</h4><p>==<strong>答案是一个都不用，我们工作中只能使用自定义的</strong>==</p><p>Executors 中 JDK 已经给你提供了，为什么不用？</p><p>阿里巴巴 Java 开发手册中规定</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413202451128.png" alt="image-20210413202451128"></p><h4 id="在工作中如何使用线程池，是否自定义过线程池"><a href="#在工作中如何使用线程池，是否自定义过线程池" class="headerlink" title="在工作中如何使用线程池，是否自定义过线程池"></a>在工作中如何使用线程池，是否自定义过线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> * Arrays</span></span><br><span class="line"><span class="comment"> * Collections</span></span><br><span class="line"><span class="comment"> * Executors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">2L</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">3</span>),</span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="comment">//new ThreadPoolExecutor.AbortPolicy()</span></span><br><span class="line">            <span class="comment">//new ThreadPoolExecutor.CallerRunsPolicy()</span></span><br><span class="line">            <span class="comment">//new ThreadPoolExecutor.DiscardOldestPolicy()</span></span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy()</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//10个顾客请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">threadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//List list = new ArrayList();</span></span><br><span class="line">        <span class="comment">//List list = Arrays.asList(&quot;a&quot;,&quot;b&quot;);</span></span><br><span class="line">        <span class="comment">//固定数的线程池，一池五线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//       ExecutorService threadPool =  Executors.newFixedThreadPool(5); //一个银行网点，5个受理业务的窗口</span></span><br><span class="line">        <span class="comment">//       ExecutorService threadPool =  Executors.newSingleThreadExecutor(); //一个银行网点，1个受理业务的窗口</span></span><br><span class="line">        ExecutorService threadPool = Executors.newCachedThreadPool(); <span class="comment">//一个银行网点，可扩展受理业务的窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//10个顾客请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支合并框架-🔱"><a href="#分支合并框架-🔱" class="headerlink" title="分支合并框架 🔱"></a>分支合并框架 🔱</h2><h3 id="是什么-❓-4"><a href="#是什么-❓-4" class="headerlink" title="是什么 ❓"></a>是什么 ❓</h3><blockquote><p>可以将任务进行分发并启用一个线程去执行，可以理解成多线程版的递归,因为在执行模型上还挺像的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413203059515.png" alt="image-20210413203059515"></p><p><strong>主要的两个方法：</strong></p><ul><li>Fork：把一个复杂任务进行分拆，大事化小</li><li>Join：把分拆任务的结果进行合并</li></ul><h3 id="相关类-🙄"><a href="#相关类-🙄" class="headerlink" title="相关类 🙄"></a>相关类 🙄</h3><h4 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image001-1618317139087.jpg" alt="graphic"></p><p>分支合并池 类比=&gt; 线程池</p><h4 id="ForkJoinTask"><a href="#ForkJoinTask" class="headerlink" title="ForkJoinTask"></a>ForkJoinTask</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image002-1618317139089.jpg" alt="graphic"></p><p>ForkJoinTask 类比=&gt; FutureTask</p><h4 id="RecursiveTask"><a href="#RecursiveTask" class="headerlink" title="RecursiveTask"></a>RecursiveTask</h4><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/clip_image003-1618317139089.jpg" alt="graphic"></p><p>递归任务：继承后可以实现递归(自己调自己)调用的任务</p><h3 id="代码举例-👩‍💻"><a href="#代码举例-👩‍💻" class="headerlink" title="代码举例 👩‍💻"></a>代码举例 👩‍💻</h3><h4 id="实现斐波那契数列"><a href="#实现斐波那契数列" class="headerlink" title="实现斐波那契数列"></a>实现斐波那契数列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> n;</span><br><span class="line">    Fibonacci(<span class="keyword">int</span> n) &#123; <span class="keyword">this</span>.n = n; &#125;</span><br><span class="line">    <span class="function">Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        Fibonacci f1 = <span class="keyword">new</span> Fibonacci(n - <span class="number">1</span>);</span><br><span class="line">        f1.fork();</span><br><span class="line">        Fibonacci f2 = <span class="keyword">new</span> Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> f2.compute() + f1.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现一加到一百"><a href="#实现一加到一百" class="headerlink" title="实现一加到一百"></a>实现一加到一百</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ADJUST_VALUE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((end - begin)&lt;=ADJUST_VALUE)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =begin;i &lt;= end;i++)&#123;</span><br><span class="line">                result = result + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (begin + end)/<span class="number">2</span>;</span><br><span class="line">            MyTask task01 = <span class="keyword">new</span> MyTask(begin,middle);</span><br><span class="line">            MyTask task02 = <span class="keyword">new</span> MyTask(middle+<span class="number">1</span>,end);</span><br><span class="line">            task01.fork();</span><br><span class="line">            task02.fork();</span><br><span class="line">            result =  task01.join() + task02.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分支合并例子</span></span><br><span class="line"><span class="comment"> * ForkJoinPool</span></span><br><span class="line"><span class="comment"> * ForkJoinTask</span></span><br><span class="line"><span class="comment"> * RecursiveTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyTask myTask = <span class="keyword">new</span> MyTask(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; forkJoinTask = forkJoinPool.submit(myTask);</span><br><span class="line"></span><br><span class="line">        System.out.println(forkJoinTask.get());</span><br><span class="line"></span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步回调-🔁"><a href="#异步回调-🔁" class="headerlink" title="异步回调 🔁"></a>异步回调 🔁</h2><blockquote><p>这个很简单啦,就是创建一个线程去异步的调用你所写的方法,只不过对执行途中的各个环节有提供回调,可以灵活的处理,比如出现异常会调用<code>exceptionally</code>函数中传入的回调函数</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/Java/Java%E9%AB%98%E7%BA%A7/JUC/JUC/image-20210413204257768.png" alt="image-20210413204257768"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletableFutureDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//同步，异步，异步回调</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="comment">//        CompletableFuture&lt;Void&gt; completableFuture1 = CompletableFuture.runAsync(()-&gt;&#123;</span></span><br><span class="line">        <span class="comment">//            System.out.println(Thread.currentThread().getName()+&quot;\t completableFuture1&quot;);</span></span><br><span class="line">        <span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">//        completableFuture1.get();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步回调</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t completableFuture2&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        completableFuture2.whenComplete((t,u)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-------t=&quot;</span>+t);</span><br><span class="line">            System.out.println(<span class="string">&quot;-------u=&quot;</span>+u);</span><br><span class="line">        &#125;).exceptionally(f-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----exception:&quot;</span>+f.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">        &#125;).get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> JUC </category>
          
          <category> 高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JUC </tag>
            
            <tag> 高并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 学习笔记</title>
      <link href="2020/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-xmind/"/>
      <url>2020/11/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-xmind/</url>
      
        <content type="html"><![CDATA[<p>思维导图转markdown 待整理</p><span id="more"></span><h1 id="大话数据结构"><a href="#大话数据结构" class="headerlink" title="大话数据结构"></a>大话数据结构</h1><h2 id="第一章-数据结构绪论（P1）"><a href="#第一章-数据结构绪论（P1）" class="headerlink" title="第一章 数据结构绪论（P1）"></a>第一章 数据结构绪论（P1）</h2><h3 id="数据结构概念：数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。"><a href="#数据结构概念：数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。" class="headerlink" title="数据结构概念：数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。"></a>数据结构概念：数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。</h3><ul><li>非数值计算：早期人们认为计算机是用来计算的，所以计算机解决问题，应该是先从具体问题中抽象出一个适当的数据模型，设计出一个解决此数据模型的算法，然后再编写程序。但是现实中我们更多的不是解决数值计算的问题，而是需要一些更科学有效的手段(比如表、树和图等数据结构)的帮助，才能更好地处理问题</li></ul><h3 id="基本概念和术语-程序设计-数据结构-算法"><a href="#基本概念和术语-程序设计-数据结构-算法" class="headerlink" title="基本概念和术语 程序设计=数据结构+算法"></a>基本概念和术语 程序设计=数据结构+算法</h3><ul><li><p>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</p><ul><li><p>比如MP3是声音数据，图片是图像数据。数据就是符号，这些符号必须具备两个前提</p><ul><li>可以输入到计算机中</li><li>能被计算机程序处理</li></ul></li><li><p>对于字符型数据类型就要进行非数值的处理。而声音、图片、视频等可以通过编码手段变成字符数据来处理</p></li></ul></li><li><p>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录</p><p>比如在人类中人就是数据元素。人类就是数据，而人就是数据元素<br>牛、马、羊、鸡、猪、狗等动物当然就是禽类的数据元素<br>数据是一个抽象的表示<br>数据元素是数据所拥有的“标签”</p></li><li><p>数据项：一个数据元素可以由若干个数据项组成</p><p>比如人这个数据元素，可以有眼、耳、口、鼻这些数据项，也可以有姓名、年龄、性别这些数据项，具体有哪些数据项是根据你做的系统来决定的。</p><ul><li>数据项是数据不可分割的最小单位</li></ul></li><li><p>数据对象：是性质相同的数据元素的集合，是数据的子集</p><p>什么叫性质相同呢？是指数据元素具有相同数量和类型的数据项，比如人 这个例子，都有姓名、生日、性别等相同的数据项。<br>既然数据对象是数据的子集，在实际应用中，处理的数据元素通常具有相同性质，在不产生混淆的情况下，我们将数据对象简称为数据。</p></li><li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合</p><p>结构，简单的理解就是关系，比如分子结构，就是组成分子的原子之间的排列方式。严格带你说，结构是指各个组成部分相互搭配的排列的方式。在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系成为 结构。</p></li></ul><h3 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h3><ul><li><p>数据结构分为逻辑结构和物理结构</p></li><li><p>逻辑结构</p><p>是指数据对象中数据元素之间的相互关系</p><ul><li>集合结构：集合结构中的数据元素除了同属与一个集合外，它们之间没有任何其他关系</li><li>线性结构：线性结构中的数据元素之间是一对一的关系</li><li>树形结构：树形结构中的数据元素之间存在一种一对多的层次关系</li><li>图形结构：图形结构的数据元素是多对多的关系</li></ul></li><li><p>物理结构</p><p>物理结构是指数据的逻辑结构在计算机中的存储形式</p><ul><li><p>顺序储存结构：是把数据元素存放在地址连续的储存单元里，其数据间的逻辑关系和物理关系是一致的</p><ul><li>好处：查找时性能损耗低</li><li>坏处：插入时如果是末尾插入还行，但是一旦牵扯到在某个元素前后进行插入会比较麻烦</li></ul></li><li><p>链式存储结构：是把数据元素存放到任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的</p><ul><li>好处：链式存储无需顺序排列只需要指定一个指针指向下一个数据元素即可，也就是说这种数据结构对插入和删除非常友好，插入和删除时只需要修改相邻数据元素的指针即可，并且也不需要事先指定好数据长度</li><li>坏处：查找时性能不如顺序储存结构；当其中一个元素的指针出现了异常这个链式结构也就断裂了</li></ul></li></ul></li></ul><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><ul><li><p>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称</p><ul><li><p>理解成java的数据类型</p><p>java的数据类型可分为：<br>基础数据类型：是不可再分解的基础数据类型，如char、int<br>引用数据类型：是由若干个基础数据类型组成的，是可再分解的数据类型，如字符数组、整形数组</p></li></ul></li><li><p>抽象数据类型（Abstract Data Type,ADT）：是指一个数学模型及定义在该模型上的一组操作</p><ul><li><p>“抽象”的意义在于数据类型的数学抽象特性</p><p>各个计算机，不管是大型机、小型机、PC、平板甚至手机都有“整数”类型，也需要整数间的运算，那么整数其实就是一个抽象数据类型，尽管在上面提到的那些计算机中的实现方法不太一样，但由于其数学特性相同，因此在编程者看来它们都是相同的</p></li><li><p>抽象数据类型体现了程序设计中问题的分解、抽象和信息隐藏的特性</p><p>抽象数据类型把实际生活中的问题分解成多个模块小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而是具体实现过程隐藏起来</p></li><li><p>描述抽象数据类型的标准格式</p><p>ADT 抽象数据类型名称<br>Data</p><pre><code>数据元素之间逻辑关系的定义</code></pre><p>Operation</p><pre><code>操作1    初始条件    操作结果描述操作2    ...操作n    ...</code></pre><p>endADT</p></li></ul></li></ul><h2 id="第二章-算法（P17）"><a href="#第二章-算法（P17）" class="headerlink" title="第二章 算法（P17）"></a>第二章 算法（P17）</h2><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作</p><h3 id="数据结构与算法关系"><a href="#数据结构与算法关系" class="headerlink" title="数据结构与算法关系"></a>数据结构与算法关系</h3><ul><li>数据结构和算法是相辅相成的关系，我们学习数据结构需要通过算法来加深印象，需要通过算法来理解数据结构</li></ul><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ul><li><p>输入输出：算法具有零个或多个输入，算法至少有一个或多个输出</p><ul><li>算法是一定需要输出的，不需要输出要你用这个算法干嘛？</li><li>输出可以是打印输出或返回一个或多个值</li></ul></li><li><p>有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间完成</p><ul><li><p>这里的有穷性不是数学意义上的，而是实际应用中合理的、可以接受的“有边界”。</p><p>总不肯说你写一个算法计算机要算上20年，一定会结束，在数学意义上是有穷的，可是20年也太久了吧，那么这个算法的意义也就不大了</p></li></ul></li><li><p>确定性：算法的每一个步骤都具有确定的含义，不会出现二义性</p><p>算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义</p></li><li><p>可行性：算法每一步都必须是可行的，也就是说，每一步都能通过执行有限次数完成。</p><p>可行性意味着算法可以转换为程序上机运行，并得到正确的结果</p></li></ul><h3 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h3><ul><li><p>正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正常反映问题的需求、能够得到问题的正确答案。</p><ul><li><p>算法的正确性大体分为四个层次</p><ul><li>1、算法程序没有语法错误</li><li>2、算法程序对于合法的输入能够产生满足要求的输出结果</li><li>3、算法程序能对非法的输入能够得出满足规格说明的输出结果</li><li>4、算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</li></ul></li></ul></li><li><p>可读性：算法设计的另一目的是为了便于阅读、理解和交流</p><ul><li>我们在写代码的80%时间都花在阅读和理解代码上，所以可读性是非常重要的</li></ul></li><li><p>健壮性：当输入数据不合法时，算法也能做出相关的处理，而不是产生异常或莫名奇妙的结果。</p><ul><li>所以做好输入校验也是必要的</li></ul></li><li><p>时间效率高和储存量低</p><ul><li>时间效率指的是算法从开始到结束所消耗的最大执行时间</li><li>储存量指的是算法在执行过程中需要的最大储存空间</li></ul></li></ul><h3 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h3><ul><li><p>事后统计方法</p><ul><li><p>这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间比较，从而确定算法效率高低</p></li><li><p>缺陷</p><ul><li>必须依据算法事先编制好程序，这通常需要花费大量的时间和精力</li><li>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身优劣</li><li>算法的测试数据设计困难，而且程序的运行时间往往还与测试数据的规模有很大的关系，效率高的算法程序在小的测试数据面前往往得不到体现。</li></ul></li></ul></li><li><p>事前分析估算方法</p><ul><li><p>在计算机程序编制前，依据统计方法对算法进行估算</p></li><li><p>高级程序语言编写的程序在计算机上运行所消耗的时间取决于下列因素</p><ul><li><p>1、算法采用的策略、方法</p><ul><li>算法好坏的根本</li></ul></li><li><p>2、编译产生的代码质量</p><ul><li>要由软件(编译器)来支持</li></ul></li><li><p>3、问题输入的规模</p><ul><li>问题的输入量的多少</li></ul></li><li><p>4、机器执行指令的速度</p><ul><li>要看硬件的性能</li></ul></li></ul></li></ul></li></ul><h3 id="函数的渐近增长"><a href="#函数的渐近增长" class="headerlink" title="函数的渐近增长"></a>函数的渐近增长</h3><ul><li>给定两个函数 f(n) 和 g(n) ，如果存在一个整数N，使得对于所有 n &gt; N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快与 g(n)</li></ul><h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><ul><li><p>在进行算法分析时，语句的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n) = O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模n的某个函数。</p><ul><li>这样用大写 O() 来体现算法的时间复杂度的记法，我们称之为大O记法。</li><li>一般情况下，随着n的增大，T(n)的增长最慢的算法为最优算法</li></ul></li><li><p>推导大O阶方法</p><ul><li>1、用常数1取代运行时间中所有加法常数</li><li>2、在修改后的运行次数函数中，只保留最高阶</li><li>3、如果最高阶存在且不是1，则去除与这个项相乘的常数</li></ul></li><li><p>常见的时间复杂度</p><ul><li><p>常数阶：O(1)</p></li><li><p>线性阶：O(n)</p></li><li><p>平方阶：O(n^2)</p></li><li><p>对数阶：O(long n)</p></li><li><p>nlogn阶：O(nlog n)</p></li><li><p>立方阶：O(n^3)</p></li><li><p>指数阶：O(2^n)</p></li><li><p>常见的时间复杂度所耗费时间从小到大依次是</p><ul><li>常数阶 &lt; 对数阶 &lt; 线性阶 &lt; nlogn阶 &lt; 平方阶 &lt; 立方阶 &lt; 指数阶</li></ul></li></ul></li><li><p>最坏情况与平均情况</p><ul><li><p>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。在应用中，这是一种重要的需求。</p></li><li><p>平均运行时间是所有情况中最有意义的，因为它是期望的运行时间</p><ul><li>在现实中，平均时间很难通过分析得到，一般都是通过运行一定数量的实验数据后估算出来的</li></ul></li><li><p>一般在没有特殊说明的情况下，我们提到的运行时间都是最坏情况的运行时间</p></li></ul></li></ul><h3 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h3><ul><li><p>时间复杂度的计算公式记作：S(n) = O(f(n)) ，其中n为问题的规模，f (n) 为语句关于n所占存储空间的函数</p></li><li><p>常见的空间复杂度</p><p>如果随着输入值 n 的增大，程序申请的临时空间成线性增长，则程序的空间复杂度用 O(n) 表示;<br>如果随着输入值 n 的增大，程序申请的临时空间成 n2 关系增长，则程序的空间复杂度用 O(n2) 表示；<br>如果随着输入值 n 的增大，程序申请的临时空间成 n3 关系增长，则程序的空间复杂度用 O(n3) 表示；</p><ul><li><p>O(1)</p><p>如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)<br>举例：<br>int i = 1;<br>int j = 2;<br>++i;<br>j++;<br>int m = i + j;</p></li><li><p>O(n)</p><p>int[] m = new int[n]<br>for(i=1; i&lt;=n; ++i)<br>{<br>   j = i;<br>   j++;<br>}<br>这段代码中，第一行new了一个数组出来，这个数据占用的大小为n，这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)</p></li><li><p>O(n^2)</p></li></ul></li></ul><h2 id="第三章-线性表（P41）"><a href="#第三章-线性表（P41）" class="headerlink" title="第三章 线性表（P41）"></a>第三章 线性表（P41）</h2><h3 id="3-2-线性表的定义（P42）"><a href="#3-2-线性表的定义（P42）" class="headerlink" title="3.2 线性表的定义（P42）"></a>3.2 线性表的定义（P42）</h3><ul><li><p>线性表：零个或多个数据元素的有限序列</p></li><li><p>线性表元素之间是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个前躯和后继。</p></li><li><p>线性表元素的个数n（n &gt;= 0）定义为线性表的长度，当n=0时，称为空表。</p></li><li><p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。</p><p>比如一个班级的点名表，它是有顺序且有限的序列，但是它里面的没一个数据元素是由多个数据项组成的</p><p>|    学号    |    姓名    |    性别    |    出生年月    |<br>|    1            |    张三    |    男        |    1994.4        |<br>|    2            |    李四    |    女        |    1994.7        |<br>|    3            |    王五    |    男        |    1994.12        |</p></li><li><p>组成线性表的数据类型需要相同</p><p>比如排队买演唱会门票，如果你前面有个人拿着三个书包用来占位，那么你不乐意，书包怎么能算排队的人嘞，如果这都算的话，那么我全身上下的衣服裤子岂不是也算在排队吗。这里使用线性表的定义来说，就是组成线性表的数据类型需要相同</p></li></ul><h3 id="3-3-线性表的抽象数据类型（P45）"><a href="#3-3-线性表的抽象数据类型（P45）" class="headerlink" title="3.3 线性表的抽象数据类型（P45）"></a>3.3 线性表的抽象数据类型（P45）</h3><p>DAT 线性表 (List)<br>Data<br>    线性表的数据对象集合为{a1, a2, ….., an}，每个元素的类型均为        DataType。其中，除第一个元素 a1 外，每一个元素有且只有一个直接前躯元素，除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。<br>Operation<br>    L InitList()：    初始化操作，建立一个空的线性表L。<br>    boolean ListEmpty(L)：                    若线性表为空，返回true，否则返回false。<br>    ClearList(L)：                                        将线性表清空。<br>    e GetElem(L, i)：                                将线性表L中的第i个位置的元素返回给e。<br>    int LocateElem(L, e)：                    在线性表L中查找与给定值 e 相等的元素，如果查找成功，返回该元素在表中的序号；否则，返回0表示失败<br>    ListInsert(L, i, e)：                            在线性表L中的第i个位置插入新元素e<br>    e ListDelete(L, i)：                            删除线性表L中第i个位置的元素，并返回其值。<br>    ListLength(L)：                                    返回线性表L的元素个数</p><h3 id="3-4-线性表的顺序存储结构（P47）"><a href="#3-4-线性表的顺序存储结构（P47）" class="headerlink" title="3.4 线性表的顺序存储结构（P47）"></a>3.4 线性表的顺序存储结构（P47）</h3><ul><li><p>3.4.1 顺序存储定义</p><ul><li><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元一次存储线性表的数据元素。</p><p>物理存储结构是顺序存储结构<br>逻辑结构是线性结构</p></li></ul></li><li><p>3.4.2 顺序存储方式</p><ul><li>使用java一维数组</li><li>把线性表第一个数据元素存放到数组下标0的位置，其他的元素依次存储到数组中</li></ul></li><li><p>3.4.3 数组长度和线性表长度区别</p><ul><li>数组长度是存放线性表的储存空间长度，数组长度定义好之后一般是不变的。</li><li>线性表长度是线性表中数据元素的个数，随着线性表的增加和删除这个长度是会变动的</li><li>线性表长度不可能超过数组长度</li></ul></li><li><p>顺序存储方式实现</p><p>/**<br> * 线性表数据结构-顺序存储结构实现<br> * 线性表长度从1开始<br> *<br> * @author llqwq<br> <em>/<br>public class SqList {<br>  /*</em><br>   * 线性表最大长度<br>   <em>/<br>  private final int maxSize = 20;<br>  /*</em><br>   * 使用数组来实现线性表的顺序存储<br>   */<br>  private int[] data = new int[maxSize];</p><p>  /**<br>   * 线性表长度<br>   */<br>  private int length;</p><p>  /**<br>   * 若线性表为空则返回false，否则返回true<br>   *<br>   * @return 线性表是否为空<br>   */<br>  public boolean listEmpty() {<br>    return length &lt;= 0;<br>  }</p><p>  /**<br>   * 清空线性表<br>   */<br>  public void cleanList() {<br>    length = 0;<br>  }</p><p>  public int[] getData() {<br>    return data;<br>  }</p><p>  /**<br>   * 查询线性表中的第i个元素<br>   *<br>   * @param i 从线性表中查询的元素下标<br>   * @return 线性表中第i个位置的元素<br>   */<br>  public int getElem(int i) {<br>    // 查询的元素下标 i 要在 大于 1 小于 最大长度，且线性表中要有元素<br>    if (length &lt;= 0 || i &lt; 1 || i &gt; length) {<br>      throw new RuntimeException(“下标溢出”);<br>    }<br>    return data[i - 1];<br>  }</p><p>  /**<br>   * 在线性表中查找和 el 相等的元素<br>   *<br>   * @param el 要查找的元素<br>   * @return 查找成功返回元素在线性表中的下表，查找失败返回0<br>   */<br>  public int locateElem(int el) {<br>    for (int i = 0; i &lt; data.length; i++) {<br>      if (data[i] == el) {<br>        return i + 1;<br>      }<br>    }<br>    return 0;<br>  }</p><p>  /**<br>   * 在线性表中第 index 个位置插入元素 el<br>   *<br>   * @param index 元素在线性表中插入的位置<br>   * @param el  要插入的元素<br>   */<br>  public void listInsert(int index, int el) {<br>    // 当线性表满了或index不再线性表的范围内抛出异常<br>    assert !(length &gt;= maxSize || (index &lt; 1 || index &gt; length + 1)) : “下标溢出”;</p><p>    // 不再线性表尾部插入元素<br>    if (index &lt;= length) {<br>      // 将从index开始的元素全都向后移动一位<br>      for (int i = length; i &gt;= index; i–) {<br>        data[i] = data[i - 1];<br>      }<br>    }</p><p>    data[index - 1] = el;<br>    length++;<br>  }</p><p>  /**<br>   * 删除线性表中第i个位置的元素并返回该元素<br>   *<br>   * @param i<br>   * @return<br>   */<br>  public int listDelete(int i) {<br>    assert !(i &lt; 1 || i &gt; length) : “下标溢出”;</p><p>    int el = data[i - 1];<br>    data[i - 1] = 0;<br>    // 删除的元素不在线性表末尾<br>    if (i &lt; length) {<br>      // 将从index开始的元素全都向前移动一位<br>      for (; i &lt;= length; i++) {<br>        data[i - 1] = data[i];<br>      }<br>    }<br>    length–;<br>    return el;<br>  }</p><p>  public int listLength() {<br>    return length;<br>  }</p><p>}</p></li></ul><h3 id="3-5-顺序存储结构的插入和删除（P50）"><a href="#3-5-顺序存储结构的插入和删除（P50）" class="headerlink" title="3.5 顺序存储结构的插入和删除（P50）"></a>3.5 顺序存储结构的插入和删除（P50）</h3><ul><li><p>3.5.1 获取元素操作</p><ul><li>线性表下标-1就是该数据对应在数组中的下表</li><li>时间复杂度：O(1)</li></ul></li><li><p>3.5.2 插入操作</p><ul><li><p>将需要插入新元素的位置空出来即可，也就是说将i之后的元素全部往后移动一位就好了</p><p>i：新元素要插入的下标</p><p>实现思路：<br>校验插入位置是否合理，不合理抛出异常<br>从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置<br>将要插入的元素填入位置i<br>表长加一</p></li><li><p>时间复杂度：O(n)</p></li><li></li></ul></li><li><p>3.5.3 删除操作</p><ul><li><p>删除元素然后将删除元素位置之后的元素全部向前移动一个位置即可</p><p>实现思路：<br>如果删除位置不合理，抛出异常<br>取出元素<br>从删除位置开始遍历到最后一个元素，分别将它们都向前移动一个位置<br>表长减一</p></li><li><p>时间复杂度：O(n)</p></li><li></li></ul></li><li><p>3.5.4 线性表顺序存储结构的优缺点</p><ul><li><p>优点</p><ul><li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间</li><li>可以快速地存取表中任意位置的元素</li></ul></li><li><p>缺点</p><ul><li>插入和删除操作需要移动大量元素</li><li>当线性表长度变化较大时，难以确定存储空间的容量</li><li>造成存储空间的”碎片”</li></ul></li></ul></li></ul><h3 id="3-6-线性表的链式存储结构（P55）"><a href="#3-6-线性表的链式存储结构（P55）" class="headerlink" title="3.6 线性表的链式存储结构（P55）"></a>3.6 线性表的链式存储结构（P55）</h3><ul><li><p>3.6.1 顺序存储结构不足的解决办法</p><ul><li>在顺序存储结构中每个相邻的元素都是紧挨着一起的所以才导致修改元素时需要大量移动元素，那么怎么解决呢？</li><li>要解决这个问题只需要让元素不挨在一起就好了，只需要让每个元素知道它自己的下一个元素在哪就可以了</li></ul></li><li><p>3.6.2 线性表链式存储结构定义</p><ul><li><p>链式存储结构中的每个元素需要知道自己的下一个元素，所以每个元素中除了存储数据信息外，还需要存储一个指向下个元素的指针</p></li><li><p>每个元素都由数据信息和指针这两部分组成，我们将链式存储中的每个数据元素叫做结点(Node)</p><p>元素中存放数据信息的地方叫做数据域，存放指针的地方叫做指针域</p></li><li><p>因为此链表中的每个结点只存储一个指针，所以叫做单项链表</p></li><li><p>链表中的第一个节点一般只存储一些公共数据，我们也称它为头结点，头结点的指针指向第一个节点的指针</p></li><li><p>链表中最后一个结点叫做尾元素，其指针指向null</p></li><li><p>若链表为空则头结点的指针域为空</p></li></ul></li><li><p>3.6.3 头指针与头结点的异同</p><ul><li><p>头指针</p><p>在java中头指针就是链表中第一个结点的引用</p><ul><li>头指针是指链表指向第一个结点的指针，若有头结点则是指向头结点</li><li>头指针具有标识作用，常以头指针冠以链表的名字</li><li>无论链表是否为空，头指针均不为空</li><li>头指针是链表的必要元素</li></ul></li><li><p>头结点</p><ul><li>头结点是为了操作的统一和方便而设立的，放在第一元素结点之前，其数据域一般没什么特殊意义（也可以存放公共信息，链表长度之类的）</li><li>头结点不是链表的必须要素</li></ul></li></ul></li><li><p>线性表链式存储结构代码实现</p><p>/**</p><p> * 线性表链表存储结构实现</p><p> * 具有头结点</p><p> *</p><p> * @author llqwq</p><p> */</p><p>public class LinkList<T> {</T></p><p>  /**</p><p>   * 数据结点</p><p>   *</p><p>   * @author llqwq</p><p>   */</p><p>  @Data</p><p>  @AllArgsConstructor</p><p>  @NoArgsConstructor</p><p>  private class Node<R> {</R></p><p>    /**</p><p>     * 数据域</p><p>     */</p><p>    private R data;</p><p>    /**</p><p>     * 指针域</p><p>     */</p><p>    private Node<R> next;</R></p><p>  }</p><p>  /**</p><p>   * 头指针</p><p>   */</p><p>  private Node<T> head;</T></p><p>  /**</p><p>   * 尾指针</p><p>   */</p><p>  private Node<T> end;</T></p><p>  /**</p><p>   * 线性表总长度</p><p>   */</p><p>  private int length;</p><p>  /**</p><p>   * 是否是第一个结点</p><p>   */</p><p>  private boolean first = true;</p><p>  /**</p><p>   * 向线性表末尾增加值</p><p>   *</p><p>   * @param data 需要添加的值</p><p>   */</p><p>  public LinkList<T> addNode(T data) {</T></p><p>    Node<T> node = new Node&lt;&gt;();</T></p><p>    node.setData(data);</p><p>    // 如果是第一次增加结点就将首尾指针都指向该结点</p><p>    if (first) {</p><p>      head = end = node;</p><p>      first = false;</p><p>    } else {</p><p>      // 不是第一次增加结点就将该结点添加到末尾，并将尾指针指向该结点</p><p>      end.setNext(node);</p><p>      end = node;</p><p>    }</p><p>    length++;</p><p>    return this;</p><p>  }</p><p>  /**</p><p>   * 向线性表的第i个位置插入值</p><p>   *</p><p>   * @param i  需要插入值的位置</p><p>   * @param data 需要插入的值</p><p>   */</p><p>  public LinkList<T> listInsert(int i, T data) {</T></p><p>    // 1. 获得第i-1个位置元素的结点</p><p>    // 2. 将i-1的next指针赋值给node的next指针</p><p>    // 3. 将第i-1的next指针指向node</p><p>    // 校验插入位置是否合理, 1 &lt;= i &lt;= count+1</p><p>    assert i &gt;= 1 &amp;&amp; i &lt;= length + 1 : “插入位置不合法”;</p><p>    // 插入位置是首和尾</p><p>    if (i == 1) {</p><p>      head = new Node&lt;&gt;(data, head);</p><p>      length++;</p><p>      return this;</p><p>    }</p><p>    if (i == length + 1) {</p><p>      addNode(data);</p><p>      return this;</p><p>    }</p><p>    // 获取第i-1个元素</p><p>    Node<T> nodePrev = head;</T></p><p>    for (int j = 1; j &lt; i - 1; j++) {</p><p>      nodePrev = nodePrev.getNext();</p><p>    }</p><p>    Node<T> node = new Node&lt;&gt;(data, nodePrev.getNext());</T></p><p>    nodePrev.setNext(node);</p><p>    length++;</p><p>    return this;</p><p>  }</p><p>  /**</p><p>   * 删除线性表中第i个位置的元素并返回该元素</p><p>   *</p><p>   * @param i</p><p>   * @return</p><p>   */</p><p>  public T listDelete(int i) {</p><p>    // 1. 获得第i-1个元素位置的元素</p><p>    // 2. 将i-1的next指针指向i+1个位置的元素</p><p>    // 3. 将第i个元素删除</p><p>    // 校验删除位置是否合理，位置需要在1到最大长度之间</p><p>    assert i &gt;= 1 &amp;&amp; i &lt;= length : “删除位置不合法”;</p><p>    // 删除位置是首</p><p>    if (i == 1) {</p><p>      Node<T> tempNode = head;</T></p><p>      T temp = tempNode.getData();</p><p>      tempNode = null;</p><p>      head = head.getNext();</p><p>      length–;</p><p>      return temp;</p><p>    }</p><p>    // 获得第i-1个结点</p><p>    Node<T> nodePrev = head;</T></p><p>    for (int j = 2; j &lt; i; j++) {</p><p>      nodePrev = nodePrev.getNext();</p><p>    }</p><p>    // 获取i这个位置的元素</p><p>    Node<T> node = nodePrev.getNext();</T></p><p>    // 获取i+1个位置的结点</p><p>    Node<T> nodeNext = node.getNext();</T></p><p>    // 当i就是最后一个结点时</p><p>    if (nodeNext == null) {</p><p>      end = nodePrev;</p><p>    }</p><p>    // 将i-1的指针指向i+1的位置</p><p>    nodePrev.setNext(nodeNext);</p><p>    T temp = node.getData();</p><p>    // 将i设置为null,虽然在java中不写这一步也可以，因为有cg</p><p>    node = null;</p><p>    length–;</p><p>    return temp;</p><p>  }</p><p>  /**</p><p>   * 查询线性表所有数据</p><p>   *</p><p>   * @return 线性表中数据连接成的链表结构的字符串 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; null</p><p>   */</p><p>  public String listToString() {</p><p>    StringBuilder listStr = new StringBuilder();</p><p>    Node<T> node = head;</T></p><p>    if (head == null) {</p><p>      return “”;</p><p>    }</p><p>    do {</p><p>      listStr.append(node.getData().toString()).append(“ -&gt; “);</p><p>    } while ((node = node.getNext()) != null);</p><p>    return listStr.append(“null”).toString();</p><p>  }</p><p>  public int getLength() {</p><p>    return length;</p><p>  }</p><p>  public void setLength(int length) {</p><p>    this.length = length;</p><p>  }</p><p>}</p></li></ul><h3 id="3-7-单链表的读取（P60）"><a href="#3-7-单链表的读取（P60）" class="headerlink" title="3.7 单链表的读取（P60）"></a>3.7 单链表的读取（P60）</h3><ul><li><p>代码实现</p><p>/**<br>     * 获取第i个位置的数据元素的值<br>     *<br>     * @param i 数据元素的位置<br>     * @return 数据元素的值<br>     */<br>    public T getElem(int i) {</p><p>        assert i &gt;= 1 &amp;&amp; i &lt;= length : “该位置没有元素”;<br>        // 如果是查询最后一个元素<br>        if (i == length) {<br>            return end.getData();<br>        }</p><p>        Node<T> node = head;<br>        for (int j = 2; j &lt;= i &amp;&amp; node != null; j++) {<br>            node = node.getNext();<br>        }<br>        return node.getData();<br>    }</T></p></li><li><p>工作指针后移</p></li><li><p>时间复杂度：O(n)</p></li></ul><h3 id="3-8-单链表的插入和删除（P61）"><a href="#3-8-单链表的插入和删除（P61）" class="headerlink" title="3.8 单链表的插入和删除（P61）"></a>3.8 单链表的插入和删除（P61）</h3><ul><li><p>插入</p><ul><li><p>算法思路</p><ul><li>1、校验插入位置i是否合法，即 1 &lt;= i &lt;= 链表当前长度+1</li><li>2、遍历得到到i-1位置的结点</li><li>3、创建一个结点用于插入i的位置</li><li>3、将i-1的next指针赋值给i的next</li><li>4、将i-1的next指针指向i</li></ul></li><li><p>时间复杂度：O(n)</p></li></ul></li><li><p>删除</p><ul><li><p>算法思路</p><ul><li>1、校验删除位置i是否合法，1 &lt;= i &lt;= 链表当前长度</li><li>2、遍历链表得到i-1位置的结点</li><li>3、将i-1位置的结点的指针指向i+1位置的结点</li><li>4、释放i位置的结点元素</li></ul></li><li><p>时间复杂度：O(n)</p></li></ul></li></ul><h3 id="3-9-单链表的整表创建（P66）"><a href="#3-9-单链表的整表创建（P66）" class="headerlink" title="3.9 单链表的整表创建（P66）"></a>3.9 单链表的整表创建（P66）</h3><ul><li><p>头插法</p><ul><li>让插入的结点始终在链表的第一位</li></ul></li><li><p>尾插法</p><ul><li>让插入的结点始终在链表的末尾</li></ul></li></ul><h3 id="3-10-单链表的整表删除（P69）"><a href="#3-10-单链表的整表删除（P69）" class="headerlink" title="3.10 单链表的整表删除（P69）"></a>3.10 单链表的整表删除（P69）</h3><ul><li><p>在java中只需要将头指针为null即可，垃圾回收机制会自动去清理</p></li><li><p>手动回收</p><ul><li>遍历整个链表然后逐个设置结点为null</li></ul></li></ul><h3 id="3-11-单链表结构与顺序结构优缺点（P70）"><a href="#3-11-单链表结构与顺序结构优缺点（P70）" class="headerlink" title="3.11 单链表结构与顺序结构优缺点（P70）"></a>3.11 单链表结构与顺序结构优缺点（P70）</h3><ul><li><p>存储方式</p><ul><li>顺序存储结构是用一段连续的存储单元依次存储线性表的数据元素</li><li>链式存储结构是用一组任意的存储单元来存储数据元素</li></ul></li><li><p>时间性能</p><ul><li><p>查找</p><ul><li><p>顺序存储结构</p><ul><li>O(1)</li></ul></li><li><p>单链表</p><ul><li>O(1)</li></ul></li></ul></li><li><p>插入和删除</p><ul><li><p>顺序存储结构</p><ul><li>平均需要移动表长一半的元素，O(n)</li></ul></li><li><p>单链表</p><ul><li>在线出某位置的指针时，O(1)</li></ul></li></ul></li></ul></li><li><p>空间性能</p><ul><li><p>顺序存储结构</p><ul><li>需要预分配存储空间，分大了浪费，分小了容易溢出</li></ul></li><li><p>单链表</p><ul><li>不需要分配存储空间，元素个数不受限制</li></ul></li></ul></li></ul><h3 id="3-12-静态链表（P71）"><a href="#3-12-静态链表（P71）" class="headerlink" title="3.12 静态链表（P71）"></a>3.12 静态链表（P71）</h3><ul><li><p>用数组描述的链表叫静态链表</p><p>一些早期的高级编程语言并没有指针或对象引用的机制于是就有人想出用数组代替指针</p></li><li><p>数组中每个元素组成</p><ul><li><p>数据域：data</p><ul><li>存储数据，和单链表的数据域一致</li></ul></li><li><p>游标：cur</p><ul><li>相当于next指针</li></ul></li></ul></li><li><p>数组的第一个和最后一个元素</p><ul><li><p>作为特殊元素处理，不存储数据</p></li><li><p>未使用的数组元素称备用链表</p></li><li><p>第一个元素</p><ul><li>cur存放备用链表的第一个结点的下标，备用链表未空值为0</li></ul></li><li><p>最后一个元素</p><ul><li>cur存放第一个有值的结点下标，若为空链表值为0</li></ul></li></ul></li><li><p>创建和释放结点</p><ul><li><p>创建</p><ul><li><p>实现思路</p><ul><li>todo 插入图片</li></ul></li></ul></li><li><p>释放</p><ul><li>实现思路</li></ul></li></ul></li><li><p>静态链表的插入和删除</p><ul><li>插入</li><li>删除</li></ul></li><li><p>静态链表的优缺点</p><ul><li><p>优点</p><ul><li>插入和删除无需移动元素，改进了顺序存储结构修改时需要移动大量元素的缺陷</li></ul></li><li><p>缺点</p><ul><li>没有解决连续存储分配带来的表长无法确定的问题</li><li>失去了顺序存储结构的随时存取特性</li></ul></li></ul></li></ul><h3 id="3-13-循环链表（P78）"><a href="#3-13-循环链表（P78）" class="headerlink" title="3.13 循环链表（P78）"></a>3.13 循环链表（P78）</h3><ul><li><p>定义：</p><ul><li>将单链表中尾节点的指针由空改为指向头结点，使得单链表形成一个环，这种头尾相接的单链表称之为单循环链表，简称循环链表</li></ul></li><li><p>单链表的问题：在获得尾节点时需要进行全表扫描</p><ul><li>解决：使用循环链表，并将头指针改用尾指针</li></ul></li></ul><h3 id="3-14-双向链表（P81）"><a href="#3-14-双向链表（P81）" class="headerlink" title="3.14 双向链表（P81）"></a>3.14 双向链表（P81）</h3><ul><li><p>定义：</p><ul><li>双向链表是将单链表中的每一个结点再设置一个指向前驱结点的指针</li></ul></li><li><p>双向链表的删除和增加</p><ul><li>与单链表差不多，只是需要再操作一个指向前驱结点的指针</li></ul></li></ul><h2 id="第四章-栈与队列（P87）"><a href="#第四章-栈与队列（P87）" class="headerlink" title="第四章 栈与队列（P87）"></a>第四章 栈与队列（P87）</h2><h3 id="4-2-栈的定义（P89）"><a href="#4-2-栈的定义（P89）" class="headerlink" title="4.2 栈的定义（P89）"></a>4.2 栈的定义（P89）</h3><h3 id="4-3-栈的抽象数据类型（P91）"><a href="#4-3-栈的抽象数据类型（P91）" class="headerlink" title="4.3 栈的抽象数据类型（P91）"></a>4.3 栈的抽象数据类型（P91）</h3><h3 id="4-4-栈的顺序存储结构及实现（P92）"><a href="#4-4-栈的顺序存储结构及实现（P92）" class="headerlink" title="4.4 栈的顺序存储结构及实现（P92）"></a>4.4 栈的顺序存储结构及实现（P92）</h3><h3 id="4-5-两栈共享空间（P94）"><a href="#4-5-两栈共享空间（P94）" class="headerlink" title="4.5 两栈共享空间（P94）"></a>4.5 两栈共享空间（P94）</h3><h3 id="4-6-栈的链式存储结构及实现（P97）"><a href="#4-6-栈的链式存储结构及实现（P97）" class="headerlink" title="4.6 栈的链式存储结构及实现（P97）"></a>4.6 栈的链式存储结构及实现（P97）</h3><h3 id="4-7-栈的作用（P100）"><a href="#4-7-栈的作用（P100）" class="headerlink" title="4.7 栈的作用（P100）"></a>4.7 栈的作用（P100）</h3><h3 id="4-8-栈的应用——递归（P100）"><a href="#4-8-栈的应用——递归（P100）" class="headerlink" title="4.8 栈的应用——递归（P100）"></a>4.8 栈的应用——递归（P100）</h3><h3 id="4-9-栈的应用——四则运算表达式求值（P104）"><a href="#4-9-栈的应用——四则运算表达式求值（P104）" class="headerlink" title="4.9 栈的应用——四则运算表达式求值（P104）"></a>4.9 栈的应用——四则运算表达式求值（P104）</h3><h3 id="4-10-队列的定义（P111）"><a href="#4-10-队列的定义（P111）" class="headerlink" title="4.10 队列的定义（P111）"></a>4.10 队列的定义（P111）</h3><h3 id="4-11-队列的抽象数据类型（P112）"><a href="#4-11-队列的抽象数据类型（P112）" class="headerlink" title="4.11 队列的抽象数据类型（P112）"></a>4.11 队列的抽象数据类型（P112）</h3><h3 id="4-12-循环队列（P112）"><a href="#4-12-循环队列（P112）" class="headerlink" title="4.12 循环队列（P112）"></a>4.12 循环队列（P112）</h3><h3 id="4-13-队列的链式存储结构及实现（P117）"><a href="#4-13-队列的链式存储结构及实现（P117）" class="headerlink" title="4.13 队列的链式存储结构及实现（P117）"></a>4.13 队列的链式存储结构及实现（P117）</h3><h2 id="第五章-串（P123）"><a href="#第五章-串（P123）" class="headerlink" title="第五章 串（P123）"></a>第五章 串（P123）</h2><h3 id="5-2-串的定义（P124）"><a href="#5-2-串的定义（P124）" class="headerlink" title="5.2 串的定义（P124）"></a>5.2 串的定义（P124）</h3><h3 id="5-3-串的比较（P126）"><a href="#5-3-串的比较（P126）" class="headerlink" title="5.3 串的比较（P126）"></a>5.3 串的比较（P126）</h3><h3 id="5-4-串的抽象数据类型（127）"><a href="#5-4-串的抽象数据类型（127）" class="headerlink" title="5.4 串的抽象数据类型（127）"></a>5.4 串的抽象数据类型（127）</h3><h3 id="5-5-串的存储结构（P129）"><a href="#5-5-串的存储结构（P129）" class="headerlink" title="5.5 串的存储结构（P129）"></a>5.5 串的存储结构（P129）</h3><h3 id="5-6-朴素的模式匹配算法（P131）"><a href="#5-6-朴素的模式匹配算法（P131）" class="headerlink" title="5.6 朴素的模式匹配算法（P131）"></a>5.6 朴素的模式匹配算法（P131）</h3><h3 id="5-7-KMP-模式匹配算法（P135）"><a href="#5-7-KMP-模式匹配算法（P135）" class="headerlink" title="5.7 KMP 模式匹配算法（P135）"></a>5.7 KMP 模式匹配算法（P135）</h3><h2 id="第六章-树（P149）"><a href="#第六章-树（P149）" class="headerlink" title="第六章 树（P149）"></a>第六章 树（P149）</h2><h3 id="6-2-树的定义（P150）"><a href="#6-2-树的定义（P150）" class="headerlink" title="6.2 树的定义（P150）"></a>6.2 树的定义（P150）</h3><h3 id="6-3-树的抽象数据类型（P154）"><a href="#6-3-树的抽象数据类型（P154）" class="headerlink" title="6.3 树的抽象数据类型（P154）"></a>6.3 树的抽象数据类型（P154）</h3><h3 id="6-4-树的存储结构（P155）"><a href="#6-4-树的存储结构（P155）" class="headerlink" title="6.4 树的存储结构（P155）"></a>6.4 树的存储结构（P155）</h3><h3 id="6-5-二叉树的定义（P163）"><a href="#6-5-二叉树的定义（P163）" class="headerlink" title="6.5 二叉树的定义（P163）"></a>6.5 二叉树的定义（P163）</h3><h3 id="6-6-二叉树的性质（P169）"><a href="#6-6-二叉树的性质（P169）" class="headerlink" title="6.6 二叉树的性质（P169）"></a>6.6 二叉树的性质（P169）</h3><h3 id="6-7-二叉树的存储结构（P172）"><a href="#6-7-二叉树的存储结构（P172）" class="headerlink" title="6.7 二叉树的存储结构（P172）"></a>6.7 二叉树的存储结构（P172）</h3><h3 id="6-8-遍历二叉树（P174）"><a href="#6-8-遍历二叉树（P174）" class="headerlink" title="6.8 遍历二叉树（P174）"></a>6.8 遍历二叉树（P174）</h3><h3 id="6-9-二叉树的建立（P187）"><a href="#6-9-二叉树的建立（P187）" class="headerlink" title="6.9 二叉树的建立（P187）"></a>6.9 二叉树的建立（P187）</h3><h3 id="6-10-线索二叉树（P188）"><a href="#6-10-线索二叉树（P188）" class="headerlink" title="6.10 线索二叉树（P188）"></a>6.10 线索二叉树（P188）</h3><h3 id="6-11-树、森林、二叉树的转换（P195）"><a href="#6-11-树、森林、二叉树的转换（P195）" class="headerlink" title="6.11 树、森林、二叉树的转换（P195）"></a>6.11 树、森林、二叉树的转换（P195）</h3><h3 id="6-12-赫夫曼树及其应用（P200）"><a href="#6-12-赫夫曼树及其应用（P200）" class="headerlink" title="6.12 赫夫曼树及其应用（P200）"></a>6.12 赫夫曼树及其应用（P200）</h3><h2 id="第七章-图（P211）"><a href="#第七章-图（P211）" class="headerlink" title="第七章 图（P211）"></a>第七章 图（P211）</h2><h3 id="7-2-图的定义（P213）"><a href="#7-2-图的定义（P213）" class="headerlink" title="7.2 图的定义（P213）"></a>7.2 图的定义（P213）</h3><h3 id="7-3-图的抽象数据类型（P222）"><a href="#7-3-图的抽象数据类型（P222）" class="headerlink" title="7.3 图的抽象数据类型（P222）"></a>7.3 图的抽象数据类型（P222）</h3><h3 id="7-4-图的存储结构（P223）"><a href="#7-4-图的存储结构（P223）" class="headerlink" title="7.4 图的存储结构（P223）"></a>7.4 图的存储结构（P223）</h3><h3 id="7-5-图的遍历（P237）"><a href="#7-5-图的遍历（P237）" class="headerlink" title="7.5 图的遍历（P237）"></a>7.5 图的遍历（P237）</h3><h3 id="7-6-最小生成树（P245）"><a href="#7-6-最小生成树（P245）" class="headerlink" title="7.6 最小生成树（P245）"></a>7.6 最小生成树（P245）</h3><h3 id="7-7-最短路径（P257）"><a href="#7-7-最短路径（P257）" class="headerlink" title="7.7 最短路径（P257）"></a>7.7 最短路径（P257）</h3><h3 id="7-8-拓扑排序（270）"><a href="#7-8-拓扑排序（270）" class="headerlink" title="7.8 拓扑排序（270）"></a>7.8 拓扑排序（270）</h3><h3 id="7-9-关键路径（277）"><a href="#7-9-关键路径（277）" class="headerlink" title="7.9 关键路径（277）"></a>7.9 关键路径（277）</h3><h2 id="第八章-查找（P291）"><a href="#第八章-查找（P291）" class="headerlink" title="第八章 查找（P291）"></a>第八章 查找（P291）</h2><h3 id="8-2-查找概论（P293）"><a href="#8-2-查找概论（P293）" class="headerlink" title="8.2 查找概论（P293）"></a>8.2 查找概论（P293）</h3><h3 id="8-3-顺序表查找（P295）"><a href="#8-3-顺序表查找（P295）" class="headerlink" title="8.3 顺序表查找（P295）"></a>8.3 顺序表查找（P295）</h3><h3 id="8-4-有序表查找（P298）"><a href="#8-4-有序表查找（P298）" class="headerlink" title="8.4 有序表查找（P298）"></a>8.4 有序表查找（P298）</h3><h3 id="8-5-线性索引查找（P306）"><a href="#8-5-线性索引查找（P306）" class="headerlink" title="8.5 线性索引查找（P306）"></a>8.5 线性索引查找（P306）</h3><h3 id="8-6-二叉排序树（P313）"><a href="#8-6-二叉排序树（P313）" class="headerlink" title="8.6 二叉排序树（P313）"></a>8.6 二叉排序树（P313）</h3><h3 id="8-7-平衡二叉树（AVL树）（P328）"><a href="#8-7-平衡二叉树（AVL树）（P328）" class="headerlink" title="8.7 平衡二叉树（AVL树）（P328）"></a>8.7 平衡二叉树（AVL树）（P328）</h3><h3 id="8-8-多路查找树（B树）（P341）"><a href="#8-8-多路查找树（B树）（P341）" class="headerlink" title="8.8 多路查找树（B树）（P341）"></a>8.8 多路查找树（B树）（P341）</h3><h3 id="8-9-散列表查找（哈希表）概述（P353）"><a href="#8-9-散列表查找（哈希表）概述（P353）" class="headerlink" title="8.9 散列表查找（哈希表）概述（P353）"></a>8.9 散列表查找（哈希表）概述（P353）</h3><h3 id="8-10-散列函数的构造方法（P356）"><a href="#8-10-散列函数的构造方法（P356）" class="headerlink" title="8.10 散列函数的构造方法（P356）"></a>8.10 散列函数的构造方法（P356）</h3><h3 id="8-11-处理散列冲突的方法（P360）"><a href="#8-11-处理散列冲突的方法（P360）" class="headerlink" title="8.11 处理散列冲突的方法（P360）"></a>8.11 处理散列冲突的方法（P360）</h3><h3 id="8-12-散列列表查找实现（P365）"><a href="#8-12-散列列表查找实现（P365）" class="headerlink" title="8.12 散列列表查找实现（P365）"></a>8.12 散列列表查找实现（P365）</h3><h2 id="第九章-排序（P373）"><a href="#第九章-排序（P373）" class="headerlink" title="第九章 排序（P373）"></a>第九章 排序（P373）</h2><h3 id="9-2-排序的基本概念与分类（P375）"><a href="#9-2-排序的基本概念与分类（P375）" class="headerlink" title="9.2 排序的基本概念与分类（P375）"></a>9.2 排序的基本概念与分类（P375）</h3><h3 id="9-3-冒泡排序（P378）"><a href="#9-3-冒泡排序（P378）" class="headerlink" title="9.3 冒泡排序（P378）"></a>9.3 冒泡排序（P378）</h3><h3 id="9-4-简单选择排序（P384）"><a href="#9-4-简单选择排序（P384）" class="headerlink" title="9.4 简单选择排序（P384）"></a>9.4 简单选择排序（P384）</h3><h3 id="9-5-直接插入排序（P386）"><a href="#9-5-直接插入排序（P386）" class="headerlink" title="9.5 直接插入排序（P386）"></a>9.5 直接插入排序（P386）</h3><h3 id="9-6-希尔排序（P389）"><a href="#9-6-希尔排序（P389）" class="headerlink" title="9.6 希尔排序（P389）"></a>9.6 希尔排序（P389）</h3><h3 id="9-7-堆排序（P396）"><a href="#9-7-堆排序（P396）" class="headerlink" title="9.7 堆排序（P396）"></a>9.7 堆排序（P396）</h3><h3 id="9-8-归并排序（P406）"><a href="#9-8-归并排序（P406）" class="headerlink" title="9.8 归并排序（P406）"></a>9.8 归并排序（P406）</h3><h3 id="9-9-快速排序（P417）"><a href="#9-9-快速排序（P417）" class="headerlink" title="9.9 快速排序（P417）"></a>9.9 快速排序（P417）</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 待整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 待整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitMQ 学习笔记</title>
      <link href="2020/10/21/MQ/RabbitMQ/RabbitMQ/"/>
      <url>2020/10/21/MQ/RabbitMQ/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ-实战教程"><a href="#RabbitMQ-实战教程" class="headerlink" title="RabbitMQ 实战教程"></a>RabbitMQ 实战教程</h1><h2 id="1-MQ引言"><a href="#1-MQ引言" class="headerlink" title="1.MQ引言"></a>1.MQ引言</h2><h3 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h3><p><code>MQ</code>(Message Quene) :  翻译为 <code>消息队列</code>,通过典型的 <code>生产者</code>和<code>消费者</code>模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 <code>消息中间件</code>    通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</p><h3 id="1-2-MQ有哪些"><a href="#1-2-MQ有哪些" class="headerlink" title="1.2 MQ有哪些"></a>1.2 MQ有哪些</h3><p>当今市面上有很多主流的消息中间件，如老牌的<code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的<code>Kafka</code>，阿里巴巴自主开发<code>RocketMQ</code>等。</p><h3 id="1-3-不同MQ特点"><a href="#1-3-不同MQ特点" class="headerlink" title="1.3 不同MQ特点"></a>1.3 不同MQ特点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.ActiveMQ</span></span><br><span class="line"><span class="code">ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.Kafka</span></span><br><span class="line"><span class="code">Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，</span></span><br><span class="line"><span class="code">追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，</span></span><br><span class="line"><span class="code">适合产生大量数据的互联网服务的数据收集业务。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.RocketMQ</span></span><br><span class="line"><span class="code">RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起</span></span><br><span class="line"><span class="code">源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消</span></span><br><span class="line"><span class="code">息推送、日志流式处理、binglog分发等场景。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.RabbitMQ</span></span><br><span class="line"><span class="code">RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和</span></span><br><span class="line"><span class="code">发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在</span></span><br><span class="line"><span class="code">其次。</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><blockquote><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。</p></blockquote><hr><h2 id="2-RabbitMQ-的引言"><a href="#2-RabbitMQ-的引言" class="headerlink" title="2.RabbitMQ 的引言"></a>2.RabbitMQ 的引言</h2><h3 id="2-1-RabbitMQ"><a href="#2-1-RabbitMQ" class="headerlink" title="2.1 RabbitMQ"></a>2.1 RabbitMQ</h3><blockquote><p>基于<code>AMQP</code>协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925215603036-9419777.png" alt="image-20190925215603036"></p><p><code>官网</code>: <a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p><code>官方教程</code>: <a href="https://www.rabbitmq.com/#getstarted">https://www.rabbitmq.com/#getstarted</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># AMQP 协议</span></span><br><span class="line"><span class="code">AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200311182438041.png" alt="image-20200311182438041"></p><h3 id="2-2-RabbitMQ-的安装"><a href="#2-2-RabbitMQ-的安装" class="headerlink" title="2.2 RabbitMQ 的安装"></a>2.2 RabbitMQ 的安装</h3><h4 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1 下载"></a>2.2.1 下载</h4><p><code>官网下载地址</code>: <a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a><br><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925220115235.png" alt="image-20190925220115235"></p><blockquote><p><code>最新版本</code>: 3.7.18</p></blockquote><h4 id="2-2-2-下载的安装包"><a href="#2-2-2-下载的安装包" class="headerlink" title="2.2.2 下载的安装包"></a>2.2.2 下载的安装包<img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925220343521.png" alt="image-20190925220343521"></h4><blockquote><p><code>注意</code>:这里的安装包是centos7安装的包</p></blockquote><h4 id="2-2-3-安装步骤"><a href="#2-2-3-安装步骤" class="headerlink" title="2.2.3 安装步骤"></a>2.2.3 安装步骤</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.将rabbitmq安装包上传到linux系统中</span></span><br><span class="line"><span class="code">erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code">rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.安装Erlang依赖包</span></span><br><span class="line"><span class="code">rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.安装RabbitMQ安装包(需要联网)</span></span><br><span class="line"><span class="code">yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code">注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要</span></span><br><span class="line"><span class="code">将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config</span></span><br><span class="line"><span class="code"># 4.复制配置文件</span></span><br><span class="line"><span class="code">cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.查看配置文件位置</span></span><br><span class="line"><span class="code">ls /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.修改配置文件(参见下图:)</span></span><br><span class="line"><span class="code">vim /etc/rabbitmq/rabbitmq.config </span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925222230260-3836271.png" alt="image-20190925222230260"></p><p>将上图中配置文件中红色部分去掉<code>%%</code>,以及最后的<code>,</code>逗号 修改为下图:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925222329200-3836312.png" alt="image-20190925222329200"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 7.执行如下命令,启动rabbitmq中的插件管理</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">出现如下说明:</span></span><br><span class="line"><span class="code">Enabling plugins on node rabbit@localhost:</span></span><br><span class="line"><span class="code">    rabbitmq_management</span></span><br><span class="line"><span class="code">    The following plugins have been configured:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code">    Applying plugin configuration to rabbit@localhost...</span></span><br><span class="line"><span class="code">    The following plugins have been enabled:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    set 3 plugins.</span></span><br><span class="line"><span class="code">    Offline change; changes will take effect at broker restart.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.启动RabbitMQ的服务</span></span><br><span class="line"><span class="code">systemctl start rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl restart rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl stop rabbitmq-server</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.查看服务状态(见下图:)</span></span><br><span class="line"><span class="code">systemctl status rabbitmq-server</span></span><br><span class="line"><span class="code">  ● rabbitmq-server.service - RabbitMQ broker</span></span><br><span class="line"><span class="code">     Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)</span></span><br><span class="line"><span class="code">     Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago</span></span><br><span class="line"><span class="code">   Main PID: 2904 (beam.smp)</span></span><br><span class="line"><span class="code">     Status: &quot;Initialized&quot;</span></span><br><span class="line"><span class="code">     CGroup: /system.slice/rabbitmq-server.service</span></span><br><span class="line"><span class="code">             ├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -</span></span><br><span class="line"><span class="code">             MBlmbcs...</span></span><br><span class="line"><span class="code">             ├─3220 erl_child_setup 32768</span></span><br><span class="line"><span class="code">             ├─3243 inet_gethost 4</span></span><br><span class="line"><span class="code">             └─3244 inet_gethost 4</span></span><br><span class="line"><span class="code">      .........</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190925222743776-3836511.png" alt="image-20190925222743776"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 10.关闭防火墙服务</span></span><br><span class="line"><span class="code">systemctl disable firewalld</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span></span><br><span class="line"><span class="code">systemctl stop firewalld   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.访问web管理界面</span></span><br><span class="line"><span class="code">http://10.15.0.8:15672/</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190926194738708-3836601.png" alt="image-20190926194738708"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 12.登录管理界面</span></span><br><span class="line"><span class="code">username:  guest</span></span><br><span class="line"><span class="code">password:  guest</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20190926194954822-3836665.png" alt="image-20190926194954822"></p><hr><h2 id="3-RabitMQ-配置"><a href="#3-RabitMQ-配置" class="headerlink" title="3. RabitMQ 配置"></a>3. RabitMQ 配置</h2><h3 id="3-1RabbitMQ-管理命令行"><a href="#3-1RabbitMQ-管理命令行" class="headerlink" title="3.1RabbitMQ 管理命令行"></a>3.1RabbitMQ 管理命令行</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.服务启动相关</span></span><br><span class="line"><span class="code">systemctl start|restart|stop|status rabbitmq-server</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQ</span></span><br><span class="line"><span class="code">rabbitmqctl  help  可以查看更多命令</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.插件管理命令行</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable|list|disable </span></span><br></pre></td></tr></table></figure><h3 id="3-2-web管理界面介绍"><a href="#3-2-web管理界面介绍" class="headerlink" title="3.2 web管理界面介绍"></a>3.2 web管理界面介绍</h3><h4 id="3-2-1-overview概览"><a href="#3-2-1-overview概览" class="headerlink" title="3.2.1 overview概览"></a>3.2.1 overview概览</h4><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126162026720.png" alt="image-20191126162026720" style="zoom:200%;"><ul><li><p><code>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</code></p></li><li><p><code>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</code></p></li><li><p><code>Exchanges：交换机，用来实现消息的路由</code></p></li><li><p><code>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</code></p></li></ul><h4 id="3-2-2-Admin用户和虚拟主机管理"><a href="#3-2-2-Admin用户和虚拟主机管理" class="headerlink" title="3.2.2 Admin用户和虚拟主机管理"></a>3.2.2 Admin用户和虚拟主机管理</h4><h5 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1. 添加用户"></a>1. 添加用户</h5><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126162617280.png" alt="image-20191126162617280"></p><p>上面的Tags选项，其实是指定用户的角色，可选的有以下几个：</p><ul><li><p><code>超级管理员(administrator)</code></p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><code>监控者(monitoring)</code></p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><code>策略制定者(policymaker)</code></p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p><code>普通管理者(management)</code></p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p><code>其他</code></p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h5 id="2-创建虚拟主机"><a href="#2-创建虚拟主机" class="headerlink" title="2. 创建虚拟主机"></a>2. 创建虚拟主机</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 虚拟主机</span></span><br><span class="line"><span class="code">为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126163023153.png" alt="image-20191126163023153"></p><h5 id="3-绑定虚拟主机和用户"><a href="#3-绑定虚拟主机和用户" class="headerlink" title="3. 绑定虚拟主机和用户"></a>3. 绑定虚拟主机和用户</h5><p>创建好虚拟主机，我们还要给用户添加访问权限：</p><p>点击添加好的虚拟主机：</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126163506795.png" alt="image-20191126163506795"></p><p>进入虚拟机设置界面:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126163631889.png" alt="image-20191126163631889"></p><hr><h2 id="4-RabbitMQ-的第一个程序"><a href="#4-RabbitMQ-的第一个程序" class="headerlink" title="4.RabbitMQ 的第一个程序"></a>4.RabbitMQ 的第一个程序</h2><h3 id="4-0-AMQP协议的回顾"><a href="#4-0-AMQP协议的回顾" class="headerlink" title="4.0 AMQP协议的回顾"></a>4.0 AMQP协议的回顾</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200312140114784.png" alt="image-20200312140114784"></p><h3 id="4-1-RabbitMQ支持的消息模型"><a href="#4-1-RabbitMQ支持的消息模型" class="headerlink" title="4.1 RabbitMQ支持的消息模型"></a>4.1 RabbitMQ支持的消息模型</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126165434784.png" alt="image-20191126165434784"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126165459282.png" alt="image-20191126165459282"></p><h3 id="4-2-引入依赖"><a href="#4-2-引入依赖" class="headerlink" title="4.2 引入依赖"></a>4.2 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-第一种模型-直连"><a href="#4-3-第一种模型-直连" class="headerlink" title="4.3 第一种模型(直连)"></a>4.3 第一种模型(直连)</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126165840602.png" alt="image-20191126165840602"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h5 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line"><span class="comment">//创建通道</span></span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line"><span class="comment">//参数1: 是否持久化  参数2:是否独占队列 参数3:是否自动删除  参数4:其他属性</span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 参数1：交换机名称，没有可以不写</span></span><br><span class="line"><span class="comment">// 参数2：队列名称</span></span><br><span class="line"><span class="comment">// 参数4：发送消息时的一些额外参数</span></span><br><span class="line"><span class="comment">// 参数3：消息内容</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>,<span class="string">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class="line">channel.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h5 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2. 开发消费者"></a>2. 开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">Connection connection = connectionFactory.newConnection();</span><br><span class="line">Channel channel = connection.createChannel();</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3. 参数的说明"></a>3. 参数的说明</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="string">&#x27;参数1&#x27;</span>:用来声明通道对应的队列</span><br><span class="line"> <span class="string">&#x27;参数2&#x27;</span>:用来指定是否持久化队列</span><br><span class="line"> <span class="string">&#x27;参数3&#x27;</span>:用来指定是否独占队列</span><br><span class="line"> <span class="string">&#x27;参数4&#x27;</span>:用来指定是否自动删除队列</span><br><span class="line"> <span class="string">&#x27;参数5&#x27;</span>:对队列的额外配置</span><br></pre></td></tr></table></figure><hr><h3 id="4-4-第二种模型-work-quene"><a href="#4-4-第二种模型-work-quene" class="headerlink" title="4.4 第二种模型(work quene)"></a>4.4 第二种模型(work quene)</h3><p><code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200314221002008.png" alt="image-20200314221002008"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者-1，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者-2：领取任务并完成任务，假设完成速度快</li></ul><h5 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>, (i+<span class="string">&quot;====&gt;:我是消息&quot;</span>).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);   <span class="comment">//处理消息比较慢 一秒处理一个消息</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h5><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200314223242058.png" alt="image-20200314223242058"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200314223302207.png" alt="image-20200314223302207"></p><blockquote><p><code>总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</code></p></blockquote><h5 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5.消息自动确认机制"></a>5.消息自动确认机制</h5><blockquote><p>Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion. In this case, if you kill a worker we will lose the message it was just processing. We’ll also lose all the messages that were dispatched to this particular worker but were not yet handled.</p><p>But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);<span class="comment">//一次只接受一条未确认的消息</span></span><br><span class="line"><span class="comment">//参数2:关闭自动确认消息</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">    channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);<span class="comment">//手动确认消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>设置通道一次只能消费一个消息</p></li><li><p>关闭消息的自动确认,开启手动确认消息</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200314230412178.png" alt="image-20200314230412178"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200314230423280.png" alt="image-20200314230423280"></p></li></ul><hr><h3 id="4-5-第三种模型-fanout"><a href="#4-5-第三种模型-fanout" class="headerlink" title="4.5 第三种模型(fanout)"></a>4.5 第三种模型(fanout)</h3><p><code>fanout 扇出 也称为广播</code></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126213115873.png" alt="image-20191126213115873"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li> 可以有多个消费者</li><li> 每个<strong>消费者有自己的queue</strong>（队列）</li><li> 每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li> 交换机把消息发送给绑定过的所有队列</li><li> 队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h5 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);<span class="comment">//广播 一条消息多个消费者同时消费</span></span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;hello&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><h5 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2. 开发消费者-1"></a>2. 开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3. 开发消费者-2"></a>3. 开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4.开发消费者-3"></a>4.开发消费者-3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//将临时队列绑定exchange</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者3: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5. 测试结果"></a>5. 测试结果</h5><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200315180653207.png" alt="image-20200315180653207"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200315180708489.png" alt="image-20200315180708489"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200315180728035.png" alt="image-20200315180728035"></p><hr><h3 id="4-6-第四种模型-Routing"><a href="#4-6-第四种模型-Routing" class="headerlink" title="4.6 第四种模型(Routing)"></a>4.6 第四种模型(Routing)</h3><h4 id="4-6-1-Routing-之订阅模型-Direct-直连"><a href="#4-6-1-Routing-之订阅模型-Direct-直连" class="headerlink" title="4.6.1 Routing 之订阅模型-Direct(直连)"></a>4.6.1 Routing 之订阅模型-Direct(直连)</h4><p><code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>流程:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191126220145375.png" alt="image-20191126220145375"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h5 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机  参数1:交换机名称 参数2:交换机类型 基于指令的Routing key转发</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;logs_direct&quot;</span>,key,<span class="keyword">null</span>,(<span class="string">&quot;指定的route key&quot;</span>+key+<span class="string">&quot;的消息&quot;</span>).getBytes());</span><br></pre></td></tr></table></figure><h5 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列和交换机</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;warn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列和交换机</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;logs_direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-测试生产者发送Route-key为error的消息时"><a href="#4-测试生产者发送Route-key为error的消息时" class="headerlink" title="4.测试生产者发送Route key为error的消息时"></a>4.测试生产者发送Route key为error的消息时</h5><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316102613933.png" alt="image-20200316102613933"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316102627912.png" alt="image-20200316102627912"></p><h5 id="5-测试生产者发送Route-key为info的消息时"><a href="#5-测试生产者发送Route-key为info的消息时" class="headerlink" title="5.测试生产者发送Route key为info的消息时"></a>5.测试生产者发送Route key为info的消息时</h5><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316102925740.png" alt="image-20200316102925740"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316102947326.png" alt="image-20200316102947326"></p><hr><h4 id="4-6-2-Routing-之订阅模型-Topic"><a href="#4-6-2-Routing-之订阅模型-Topic" class="headerlink" title="4.6.2 Routing 之订阅模型-Topic"></a>4.6.2 Routing 之订阅模型-Topic</h4><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！这种模型<code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20191127121900255.png" alt="image-20191127121900255"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 统配符</span></span><br><span class="line"><span class="bullet">*</span> (star) can substitute for exactly one word.    匹配不多不少恰好1个词</span><br><span class="line"><span class="code"># (hash) can substitute for zero or more words.  匹配一个或多个词</span></span><br><span class="line"><span class="code"># 如:</span></span><br><span class="line"><span class="code">audit.#    匹配audit.irs.corporate或者 audit.irs 等</span></span><br><span class="line"><span class="code">    audit.*   只能匹配 audit.irs</span></span><br></pre></td></tr></table></figure><h5 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生命交换机和交换机类型 topic 使用动态路由(通配符方式)</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">String routekey = <span class="string">&quot;user.save&quot;</span>;<span class="comment">//动态路由key</span></span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;topics&quot;</span>,routekey,<span class="keyword">null</span>,(<span class="string">&quot;这是路由中的动态订阅模型,route key: [&quot;</span>+routekey+<span class="string">&quot;]&quot;</span>).getBytes());</span><br></pre></td></tr></table></figure><h5 id="2-开发消费者-1-3"><a href="#2-开发消费者-1-3" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><p><code>Routing Key中使用*通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列与交换机并设置获取交换机中动态路由</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><p><code>Routing Key中使用#通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明交换机</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"><span class="comment">//创建临时队列</span></span><br><span class="line">String queue = channel.queueDeclare().getQueue();</span><br><span class="line"><span class="comment">//绑定队列与交换机并设置获取交换机中动态路由</span></span><br><span class="line">channel.queueBind(queue,<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">channel.basicConsume(queue,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2: &quot;</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4.测试结果"></a>4.测试结果</h5><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316113935785.png" alt="image-20200316113935785"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200316114000459.png" alt="image-20200316114000459"></p><h2 id="5-SpringBoot中使用RabbitMQ"><a href="#5-SpringBoot中使用RabbitMQ" class="headerlink" title="5. SpringBoot中使用RabbitMQ"></a>5. SpringBoot中使用RabbitMQ</h2><h3 id="5-0-搭建初始环境"><a href="#5-0-搭建初始环境" class="headerlink" title="5.0 搭建初始环境"></a>5.0 搭建初始环境</h3><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2. 配置配置文件"></a>2. 配置配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot_rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">10.15</span><span class="number">.0</span><span class="number">.9</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/ems</span></span><br></pre></td></tr></table></figure><p><code>RabbitTemplate</code>  用来简化操作     使用时候直接在项目中注入即可使用</p><h3 id="5-1-第一种hello-world模型使用"><a href="#5-1-第一种hello-world模型使用" class="headerlink" title="5.1 第一种hello world模型使用"></a>5.1 第一种hello world模型使用</h3><ol><li><h5 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-第二种work模型使用"><a href="#5-2-第二种work模型使用" class="headerlink" title="5.2 第二种work模型使用"></a>5.2 第二种work模型使用</h3><ol><li><h5 id="开发生产者-1"><a href="#开发生产者-1" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;work&quot;</span>,<span class="string">&quot;hello work!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="开发消费者-1"><a href="#开发消费者-1" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkCustomer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;work message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;work message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要额外配置</code></p></blockquote></li></ol><h3 id="5-3-Fanout-广播模型"><a href="#5-3-Fanout-广播模型" class="headerlink" title="5.3 Fanout 广播模型"></a>5.3 Fanout 广播模型</h3><ol><li><h5 id="开发生产者-2"><a href="#开发生产者-2" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFanout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;logs&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;这是日志广播&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="开发消费者-2"><a href="#开发消费者-2" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue, //创建临时队列</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)  //绑定交换机类型</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-4-Route-路由模型"><a href="#5-4-Route-路由模型" class="headerlink" title="5.4 Route 路由模型"></a>5.4 Route 路由模型</h3><ol><li><h5 id="开发生产者-3"><a href="#开发生产者-3" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;directs&quot;</span>,<span class="string">&quot;error&quot;</span>,<span class="string">&quot;error 的日志信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="开发消费者-3"><a href="#开发消费者-3" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings =&#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(),</span></span><br><span class="line"><span class="meta">                    key=&#123;&quot;info&quot;,&quot;error&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span></span><br><span class="line"><span class="meta">            )&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings =&#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(),</span></span><br><span class="line"><span class="meta">                    key=&#123;&quot;error&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span></span><br><span class="line"><span class="meta">            )&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-5-Topic-订阅模型-动态路由模型"><a href="#5-5-Topic-订阅模型-动态路由模型" class="headerlink" title="5.5 Topic 订阅模型(动态路由模型)"></a>5.5 Topic 订阅模型(动态路由模型)</h3><ol><li><h5 id="开发生产者-4"><a href="#开发生产者-4" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//topic</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopic</span><span class="params">()</span></span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;topics&quot;</span>,<span class="string">&quot;user.save.findAll&quot;</span>,<span class="string">&quot;user.save.findAll 的消息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="开发消费者-4"><a href="#开发消费者-4" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopCustomer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.*&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.#&quot;&#125;,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li></ol><h2 id="6-MQ的应用场景"><a href="#6-MQ的应用场景" class="headerlink" title="6. MQ的应用场景"></a>6. MQ的应用场景</h2><h3 id="6-1-异步处理"><a href="#6-1-异步处理" class="headerlink" title="6.1 异步处理"></a>6.1 异步处理</h3><p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</code></p><ul><li><code>串行方式:</code> 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西. </li></ul><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/SouthEast-4860248.png" alt="这里写图片描述"></p><ul><li><code>并行方式: </code>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 </li></ul><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/SouthEast-20191127211112660.png" alt="这里写图片描述"></p><ul><li><p><code>消息队列:</code>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.  <code>消息队列</code>: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 </p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/592892-20190520220249900-1679743651.jpg" alt="img"></p></li></ul><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p><h3 id="6-2-应用解耦"><a href="#6-2-应用解耦" class="headerlink" title="6.2 应用解耦"></a>6.2 应用解耦</h3><p><code>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. </code></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/SouthEast-20191127211247287.png" alt="这里写图片描述"></p><p>这种做法有一个缺点:</p><p>当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.  引入消息队列 </p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/SouthEast-20191127211304085.png" alt="这里写图片描述"></p><ul><li><p><code>订单系统:</code>用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</p></li><li><p><code>库存系统:</code>订阅下单的消息,获取下单消息,进行库操作。  就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</p></li></ul><h3 id="6-3-流量削峰"><a href="#6-3-流量削峰" class="headerlink" title="6.3 流量削峰"></a>6.3 流量削峰</h3><p> <code>场景:</code> 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。  </p><p>  <code>作用:</code> </p><p>​            1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^) </p><p>​            2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) </p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/SouthEast-20191127211341601.png" alt="这里写图片描述"></p><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.  </p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p><hr><h2 id="7-RabbitMQ的集群"><a href="#7-RabbitMQ的集群" class="headerlink" title="7. RabbitMQ的集群"></a>7. RabbitMQ的集群</h2><h3 id="7-1-集群架构"><a href="#7-1-集群架构" class="headerlink" title="7.1 集群架构"></a>7.1 集群架构</h3><h4 id="7-1-1-普通集群-副本集群"><a href="#7-1-1-普通集群-副本集群" class="headerlink" title="7.1.1 普通集群(副本集群)"></a>7.1.1 普通集群(副本集群)</h4><blockquote><p>All data/state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   –摘自官网</p></blockquote><p><code>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</code></p><ol><li><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320094147471.png" alt="image-20200320094147471"></p><p>​    核心解决问题:  <code>当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</code></p><ol start="2"><li><h5 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 0.集群规划</span></span><br><span class="line"><span class="code">node1: 10.15.0.3  mq1  master 主节点</span></span><br><span class="line"><span class="code">node2: 10.15.0.4  mq2  repl1  副本节点</span></span><br><span class="line"><span class="code">node3: 10.15.0.5  mq3  repl2  副本节点</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 1.克隆三台机器主机名和ip映射</span></span><br><span class="line"><span class="code">vim /etc/hosts加入:</span></span><br><span class="line"><span class="code"> 10.15.0.3 mq1</span></span><br><span class="line"><span class="code">    10.15.0.4 mq2</span></span><br><span class="line"><span class="code">    10.15.0.5 mq3</span></span><br><span class="line"><span class="code">node1: vim /etc/hostname 加入:  mq1</span></span><br><span class="line"><span class="code">node2: vim /etc/hostname 加入:  mq2</span></span><br><span class="line"><span class="code">node3: vim /etc/hostname 加入:  mq3</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span></span><br><span class="line"><span class="code">scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span></span><br><span class="line"><span class="code">scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.查看cookie是否一致:</span></span><br><span class="line"><span class="code">node1: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code">node2: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code">node3: cat /var/lib/rabbitmq/.erlang.cookie </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span></span><br><span class="line"><span class="code">rabbitmq-server -detached </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.在node2和node3执行加入集群命令:</span></span><br><span class="line"><span class="code">1.关闭       rabbitmqctl stop_app</span></span><br><span class="line"><span class="code">2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span></span><br><span class="line"><span class="code">3.启动服务    rabbitmqctl start_app</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.查看集群状态,任意节点执行:</span></span><br><span class="line"><span class="code">rabbitmqctl cluster_status</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.如果出现如下显示,集群搭建成功:</span></span><br><span class="line"><span class="code">Cluster status of node rabbit@mq3 ...</span></span><br><span class="line"><span class="code">[&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,</span></span><br><span class="line"><span class="code">&#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,</span></span><br><span class="line"><span class="code">&#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,</span></span><br><span class="line"><span class="code">&#123;partitions,[]&#125;,</span></span><br><span class="line"><span class="code">&#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.登录管理界面,展示如下状态:</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320095613586.png" alt="image-20200320095613586"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 9.测试集群在node1上,创建队列</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320095743935.png" alt="image-20200320095743935"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 10.查看node2和node3节点:</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320095827688.png" alt="image-20200320095827688"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320095843370.png" alt="image-20200320095843370"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 11.关闭node1节点,执行如下命令,查看node2和node3:</span></span><br><span class="line"><span class="code">rabbitmqctl stop_app</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320100000347.png" alt="image-20200320100000347"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320100010968.png" alt="image-20200320100010968"></p><hr></li></ol><h4 id="7-1-2-镜像集群"><a href="#7-1-2-镜像集群" class="headerlink" title="7.1.2 镜像集群"></a>7.1.2 镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes. –摘自官网</p></blockquote><p><code>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</code></p><ol><li><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src= "/img/loading.gif" data-lazy-src="/2020/10/21/MQ/RabbitMQ/RabbitMQ/image-20200320113423235.png" alt="image-20200320113423235"></p></li><li><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 0.策略说明</span></span><br><span class="line"><span class="code">rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;</span></span><br><span class="line"><span class="code">-p Vhost： 可选参数，针对指定vhost下的queue进行设置</span></span><br><span class="line"><span class="code">Name:     policy的名称</span></span><br><span class="line"><span class="code">Pattern: queue的匹配模式(正则表达式)</span></span><br><span class="line"><span class="code">Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span></span><br><span class="line"><span class="code">           ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span></span><br><span class="line"><span class="code">                        all：表示在集群中所有的节点上进行镜像</span></span><br><span class="line"><span class="code">                        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span></span><br><span class="line"><span class="code">                        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span></span><br><span class="line"><span class="code">             ha-params：ha-mode模式需要用到的参数</span></span><br><span class="line"><span class="code">                ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span></span><br><span class="line"><span class="code">                priority：可选参数，policy的优先级</span></span><br><span class="line"><span class="code">                </span></span><br><span class="line"><span class="code">                 </span></span><br><span class="line"><span class="code"># 1.查看当前策略</span></span><br><span class="line"><span class="code">rabbitmqctl list_policies</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.添加策略</span></span><br><span class="line"><span class="code">rabbitmqctl set_policy ha-all &#x27;^hello&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; </span></span><br><span class="line"><span class="code">说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.删除策略</span></span><br><span class="line"><span class="code">rabbitmqctl clear_policy ha-all</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.测试集群</span></span><br></pre></td></tr></table></figure><hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> rabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitMQ 错误记录</title>
      <link href="2020/10/21/MQ/RabbitMQ/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>2020/10/21/MQ/RabbitMQ/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Error-when-reading-var-lib-rabbitmq-erlang-cookie-eacces"><a href="#Error-when-reading-var-lib-rabbitmq-erlang-cookie-eacces" class="headerlink" title="Error when reading /var/lib/rabbitmq/.erlang.cookie: eacces"></a>Error when reading /var/lib/rabbitmq/.erlang.cookie: eacces</h1><p>修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown rabbitmq:rabbitmq .erlang.cookie</span><br><span class="line">chmod 400 .erlang.cookie</span><br></pre></td></tr></table></figure><h1 id="Error-unable-to-connect-to-node-rabbit-localhost-nodedown"><a href="#Error-unable-to-connect-to-node-rabbit-localhost-nodedown" class="headerlink" title="Error: unable to connect to node rabbit@localhost: nodedown"></a>Error: unable to connect to node rabbit@localhost: nodedown</h1><p>杀进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp | grep 25672</span><br><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure><h1 id="Node-rabbit-vmcluster110-thinks-it-39-s-clustered-with-node-rabbit-vmcluster114-but-rabbit-vmcluster114-disagrees"><a href="#Node-rabbit-vmcluster110-thinks-it-39-s-clustered-with-node-rabbit-vmcluster114-but-rabbit-vmcluster114-disagrees" class="headerlink" title="Node rabbit@vmcluster110 thinks it&#39;s clustered with node rabbit@vmcluster114, but rabbit@vmcluster114 disagrees"></a>Node rabbit@vmcluster110 thinks it&#39;s clustered with node rabbit@vmcluster114, but rabbit@vmcluster114 disagrees</h1><p>修改主机名和hosts映射，主机名末尾不能是0。例：vmcluster110 改为vmcluster11</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> rabbitMQ </category>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误记录 </tag>
            
            <tag> MQ </tag>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper 学习笔记</title>
      <link href="2020/08/14/zookeeper/zookeeper/"/>
      <url>2020/08/14/zookeeper/zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="一、zookeeper安装"><a href="#一、zookeeper安装" class="headerlink" title="一、zookeeper安装"></a>一、zookeeper安装</h1><h2 id="本地模式安装部署"><a href="#本地模式安装部署" class="headerlink" title="本地模式安装部署"></a>本地模式安装部署</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote><p>官网地址： <a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a> </p><p>如果上面访问界面和下面的不同，尝试访问👉<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p></blockquote><p>下载没什么好说的，注意==要==下载到.bin的(下载打叉的)</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200519194026801.png" alt="image-20200519194026801"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将安装包上传到linux服务器上</p><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.6.1.tar.gz </span><br></pre></td></tr></table></figure><p>将解压出来的文件夹移动到其他位置，例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ./apache-zookeeper-3.6.1 /myzoopeeker/3.6.1</span><br></pre></td></tr></table></figure><p>进入到conf目录下将zoo_sample.cfg改名为zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>进入zoo.cfg，修改dataDir属性。将dataDir修改为<code>当前zookeeper安装目录/zkData</code>，例：<code>dataDir=/myzookeeper/3.6.1/zkData</code> (zkData可以写成其他的文件夹名称)</p><p>注意：如果没有这个文件夹需要创建，刚解压出来的并不会自带，需要手动创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zkData</span><br></pre></td></tr></table></figure><h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="检测是否启动成功"><a href="#检测是否启动成功" class="headerlink" title="检测是否启动成功"></a>检测是否启动成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkCli.sh # 用zookeeper客户端连接下服务端</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkCli.sh</span><br></pre></td></tr></table></figure><h3 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h3 id="停止zookeeper"><a href="#停止zookeeper" class="headerlink" title="停止zookeeper"></a>停止zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><h2 id="配置参数解读"><a href="#配置参数解读" class="headerlink" title="配置参数解读"></a>配置参数解读</h2><table><thead><tr><th><strong>参数名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>clientPort</strong></td><td>客户端连接server的端口，即对外服务端口，一般设置为2181吧。</td></tr><tr><td><strong>dataDir</strong></td><td>存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。</td></tr><tr><td><strong>tickTime</strong></td><td>ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。</td></tr><tr><td><strong>dataLogDir</strong></td><td>事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。  （No <a href="http://lib.csdn.net/base/17">Java</a> system property）</td></tr><tr><td><strong>globalOutstandingLimit</strong></td><td>最大请求堆积数。默认是1000。ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。  (Java system property:<strong>zookeeper.globalOutstandingLimit.</strong> )</td></tr><tr><td><strong>preAllocSize</strong></td><td>预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。(Java system property:<strong>zookeeper.preAllocSize</strong> )</td></tr><tr><td><strong>snapCount</strong></td><td>每进行snapCount次事务日志输出后，触发一次快照(snapshot), 此时，ZK会生成一个snapshot.*文件，同时创建一个新的事务日志文件log.*。默认是100000.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）(Java system property:<strong>zookeeper.snapCount</strong> )</td></tr><tr><td><strong>traceFile</strong></td><td>用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。(Java system property:? <strong>requestTraceFile</strong> )</td></tr><tr><td><strong>maxClientCnxns</strong></td><td>单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：<a href="http://rdc.taobao.com/team/jm/archives/1334%EF%BC%88No">http://rdc.taobao.com/team/jm/archives/1334（No</a> Java system property）</td></tr><tr><td><strong>clientPortAddress</strong></td><td>对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听 <strong>clientPort</strong> 指定的端口。 <strong>New in 3.3.0</strong></td></tr><tr><td><strong>minSessionTimeoutmaxSessionTimeout</strong></td><td>Session超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的Session超时时间是在2 * <strong>tickTime ~ 20 * tickTime 这个范围 New in 3.3.0</strong></td></tr><tr><td><strong>fsync.warningthresholdms</strong></td><td>事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。(Java system property: <strong>fsync.warningthresholdms</strong> )<strong>New in 3.3.4</strong></td></tr><tr><td><strong>autopurge.purgeInterval</strong></td><td>在上文中已经提到，3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。(No Java system property) <strong>New in 3.4.0</strong></td></tr><tr><td><strong>autopurge.snapRetainCount</strong></td><td>这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。(No Java system property) <strong>New in 3.4.0</strong></td></tr><tr><td><strong>electionAlg</strong></td><td>在之前的版本中， 这个参数配置是允许我们选择leader选举<a href="http://lib.csdn.net/base/31">算法</a>，但是由于在以后的版本中，只会留下一种“TCP-based version of fast leader election”算法，所以这个参数目前看来没有用了，这里也不详细展开说了。(No Java system property)</td></tr><tr><td><strong>initLimit</strong></td><td>Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在 <strong>initLimit</strong> 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No Java system property)</td></tr><tr><td><strong>syncLimit</strong></td><td>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No Java system property)</td></tr><tr><td><strong>leaderServes</strong></td><td>默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。(Java system property: zookeeper. <strong>leaderServes</strong> )。</td></tr><tr><td><strong>server.x=[hostname]:nnnnn[:nnnnn]</strong></td><td>这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。  (No Java system property)</td></tr><tr><td><strong>group.x=nnnnn[:nnnnn]weight.x=nnnnn</strong></td><td>对机器分组和权重设置，可以 <a href="http://zookeeper.apache.org/doc/r3.4.3/zookeeperHierarchicalQuorums.html">参见这里</a>(No Java system property)</td></tr><tr><td><strong>cnxTimeout</strong></td><td>Leader选举过程中，打开一次连接的超时时间，默认是5s。(Java system property: zookeeper. <strong>cnxTimeout</strong> )</td></tr><tr><td><strong>zookeeper.DigestAuthenticationProvider .superDigest</strong></td><td>ZK权限设置相关，具体参见 <a href="http://nileader.blog.51cto.com/1381108/930635">《 <strong>使用super</strong> <strong>身份对有权限的节点进行操作</strong> 》 </a> 和 <a href="http://nileader.blog.51cto.com/1381108/795525">《 <strong>ZooKeeper</strong>  <strong>权限控制</strong> 》</a></td></tr><tr><td><strong>skipACL</strong></td><td>对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。(Java system property: <strong>zookeeper.skipACL</strong> )</td></tr><tr><td><strong>forceSync</strong></td><td>这个参数确定了是否需要在事务日志提交的时候调用 [FileChannel ](<a href="http://rdc.taobao.com/team///java//jdk1.6.0_22//jre//lib//rt.jar.force%E6%9D%A5%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%AE%8C%E5%85%A8%E5%90%8C%E6%AD%A5%E5%88%B0%E7%A3%81%E7%9B%98%E3%80%82">http://rdc.taobao.com/team/\/java\/jdk1.6.0_22\/jre\/lib\/rt.jar.force来保证数据完全同步到磁盘。</a>(Java system property: **zookeeper.forceSync** )</td></tr><tr><td><strong>jute.maxbuffer</strong></td><td>每个节点最<a href="http://lib.csdn.net/base/20">大数据</a>量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。(Java system property: <strong>jute.maxbuffer</strong> )</td></tr></tbody></table><h1 id="二、Zookeeper实战"><a href="#二、Zookeeper实战" class="headerlink" title="二、Zookeeper实战"></a>二、Zookeeper实战</h1><h2 id="分布式安装部署"><a href="#分布式安装部署" class="headerlink" title="分布式安装部署"></a>分布式安装部署</h2><p>安装好zookeeper之后再进行这一步</p><p>在zkData目录下创建一个myid文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure><p>编辑myid，在文件里面添加一个编号1/2/3…都可以，例：1</p><p>将配置好的zookeeper同步到其他服务器上去</p><p>将其他服务器上同步的myid文件中的内容更改，只需要改成和其他服务器不重合的数字就好了，例：服务器1：1, 服务器2：2, 服务器3：3</p><p><strong>==一定要更改，不能相同！！！！！！！！！！！！！！！！！==</strong></p><p><strong>修改zoo.cfg文件</strong></p><p>向里面添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.1</span>=<span class="string">vmcluster111:3888:2888</span></span><br><span class="line"><span class="meta">server.2</span>=<span class="string">vmcluster112:3888:2888</span></span><br><span class="line"><span class="meta">server.3</span>=<span class="string">vmcluster113:3888:2888</span></span><br></pre></td></tr></table></figure><p>同步修改到其他服务器</p><p><strong>配置参数解读</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.A</span>=<span class="string">B:C:D</span></span><br></pre></td></tr></table></figure><p>A 是一个数字，这表示这是几号服务器，集群模式下配置的myid里面的值就是A的值</p><p>B 是这个服务器的ip，因为在hosts文件里面配置了ip映射，所以这里写的并不是具体的ip</p><p>C 是这个服务器与集群的master服务器交换信息的端口</p><p>D 是万一集群中的master服务器挂了，需要一个端口来重新选举，选出一个新的master，而这个端口就是用来指向选举时服务器相互通讯的端口</p><h2 id="zookeeper客户端命令行操作"><a href="#zookeeper客户端命令行操作" class="headerlink" title="zookeeper客户端命令行操作"></a>zookeeper客户端命令行操作</h2><h3 id="启动客户端-1"><a href="#启动客户端-1" class="headerlink" title="启动客户端:"></a>启动客户端:</h3><p>bin/zkCli.sh</p><h3 id="显示所有操作命令"><a href="#显示所有操作命令" class="headerlink" title="显示所有操作命令:"></a>显示所有操作命令:</h3><p>help</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/70.png" alt="img"></p><h3 id="查看当前节点中所包含的内容"><a href="#查看当前节点中所包含的内容" class="headerlink" title="查看当前节点中所包含的内容:"></a>查看当前节点中所包含的内容:</h3><p>ls /</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102134914.png" alt="image-20200521102134914"></p><h3 id="查看当前节点内容和详细信息"><a href="#查看当前节点内容和详细信息" class="headerlink" title="查看当前节点内容和详细信息:"></a>查看当前节点内容和详细信息:</h3><p>ls -s /</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102251080.png" alt="image-20200521102251080"></p><h3 id="获取节点的值"><a href="#获取节点的值" class="headerlink" title="获取节点的值:"></a>获取节点的值:</h3><p>get /节点名</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102620968.png" alt="image-20200521102620968"></p><h3 id="创建普通节点"><a href="#创建普通节点" class="headerlink" title="创建普通节点:"></a>创建普通节点:</h3><p>create  /节点名   值</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102537012.png" alt="image-20200521102537012"></p><h3 id="创建短暂节点"><a href="#创建短暂节点" class="headerlink" title="创建短暂节点:"></a>创建短暂节点:</h3><p>create -e /ys ysjh0014.cn</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102716819.png" alt="image-20200521102716819"></p><p>使用quit退出客户端后该节点就会被删除</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102740469.png" alt="image-20200521102740469"></p><h3 id="创建带序号的节点"><a href="#创建带序号的节点" class="headerlink" title="创建带序号的节点:"></a>创建带序号的节点:</h3><p>先创建一个普通的根节点   create /qwq  qwq</p><p>然后创建带序号的节点      create -s /qwq/sub “qwq”</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521102925211.png" alt="image-20200521102925211"></p><h3 id="修改节点数据"><a href="#修改节点数据" class="headerlink" title="修改节点数据:"></a>修改节点数据:</h3><p>set /qwq qaq</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521103101017.png" alt="image-20200521103101017"></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点:"></a>删除节点:</h3><p>delete /qwq</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521103336031.png" alt="image-20200521103336031"></p><p>如果有子节点则会删除失败</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521103215784.png" alt="image-20200521103215784"></p><h3 id="递归删除节点-递归删除所有的节点，包括子节点"><a href="#递归删除节点-递归删除所有的节点，包括子节点" class="headerlink" title="递归删除节点:(递归删除所有的节点，包括子节点)"></a>递归删除节点:(递归删除所有的节点，包括子节点)</h3><p>deleteall /qwq</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521103438341.png" alt="image-20200521103438341"></p><h3 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态:"></a>查看节点状态:</h3><p>stat  /csdn</p><p>和 ls -s 命令一样</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/14/zookeeper/zookeeper/image-20200521103603062.png" alt="image-20200521103603062"></p><h3 id="监听节点值的变化"><a href="#监听节点值的变化" class="headerlink" title="监听节点值的变化:"></a>监听节点值的变化:</h3><p>get  /ys/jh  watch             </p><p>这里只要这个节点值变化，就会得到相应，但是只能有一次响应，即节点值改变一次之后就不会再监听</p><h3 id="监听节点的子节点变化-路径变化"><a href="#监听节点的子节点变化-路径变化" class="headerlink" title="监听节点的子节点变化(路径变化)"></a>监听节点的子节点变化(路径变化)</h3><p>ls /path watch             </p><p>只要路径变化就会相应，同样的只会响应一次</p><h2 id="stat结构体"><a href="#stat结构体" class="headerlink" title="stat结构体"></a>stat结构体</h2><ul><li><p>cZxid</p><ul><li>创建节点的事务zxid每次修改zookeeper状态都会收到一个zxid形式的时间戳,也就是zookeeper事务ID。事务ID是zookeeper中所有修改总的次序。每个修改都有唯一的zxid,如果zxid1小于zxid,那么zxid在zxid2之前发生。</li></ul></li><li><p>ctime</p><ul><li>znode被创建的毫秒数(从1970年开始)</li></ul></li><li><p>mZxid</p><ul><li>znode最后更新的事务zxid</li></ul></li><li><p>mtime</p><ul><li>znode最后修改的毫秒数(从1970年开始)</li></ul></li><li><p>pZxid</p><ul><li>最后更新的子节点zxid</li></ul></li><li><p>cversion</p><ul><li>znode子节点变化号,znode子节点修改次数</li></ul></li><li><p>dataversion</p><ul><li>znode数据变化号</li></ul></li><li><p>aclVersion</p><ul><li>znode访问控制列表的变化号</li></ul></li><li><p>ephemeralOwner</p><ul><li>如果是临时节点,这个是znode拥有session id。如果不是临时节点则是0。</li></ul></li><li><p>dataLength</p><ul><li>znode的数据长度</li></ul></li><li><p>numChildren</p><ul><li>znode子节点数量</li></ul></li></ul><h2 id="API应用"><a href="#API应用" class="headerlink" title="API应用"></a>API应用</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;type&gt;pom&lt;/type&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不配log4j也可以，就是没有日志输出了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String connectString = <span class="string">&quot;192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    zooKeeper = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout,</span><br><span class="line">                              (watchedEvent)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                              &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createsub</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// ZooDefs.Ids.OPEN_ACL_UNSAFE 该节点不需要权限</span></span><br><span class="line">    <span class="comment">// CreateMode.PERSISTENT 创建一个普通的持久的节点</span></span><br><span class="line">    String s = zooKeeper.create(<span class="string">&quot;/qaq&quot;</span>, <span class="string">&quot;qaq&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取并监听节点的变化"><a href="#获取并监听节点的变化" class="headerlink" title="获取并监听节点的变化"></a>获取并监听节点的变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String connectString = <span class="string">&quot;192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line">    ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        zooKeeper = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout,</span><br><span class="line">                (watchedEvent)-&gt;&#123;</span><br><span class="line">                    List&lt;String&gt; s = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        s = zooKeeper.getChildren(<span class="string">&quot;/&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">                        System.out.println(s);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNodeAndWatch</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException, IOException </span>&#123;</span><br><span class="line">        zooKeeper.getChildren(<span class="string">&quot;/&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看节点是否存在"><a href="#查看节点是否存在" class="headerlink" title="查看节点是否存在"></a>查看节点是否存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exist</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    Stat exists = zooKeeper.exists(<span class="string">&quot;/qwq2&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ 学习笔记</title>
      <link href="2020/08/12/MQ/ActiveMQ/activeMQ/"/>
      <url>2020/08/12/MQ/ActiveMQ/activeMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装步骤"><a href="#一、安装步骤" class="headerlink" title="一、安装步骤"></a>一、安装步骤</h1><ol><li><p>官网<a href="http://activemq.apache.org/components/classic/download/">http://activemq.apache.org/components/classic/download/</a></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/12/MQ/ActiveMQ/activeMQ/image-20200518092419727.png" alt="image-20200518092419727"></p></li><li><p>上传到linux的/opt目录下</p></li><li><p>解压activemq； <code>tar -zxvf apache-activemq-5.15.12-bin.tar.gz</code></p></li><li><p>在根目录新建activemq文件夹，并将解压好的activemq移动到里面；<code>cp -r apache-activemq-5.15.12 /myactivemq</code></p></li><li><p>启动activemq；在activemq的bin目录里面启动；<code>./activemq start</code></p></li><li><p>查看是否启动成功；<code>ps -ef|grep activemq|grep -v grep</code>/ <code>netstat -anp|grep 61616</code> / <code>lsof -i:61616</code></p></li><li><p>关闭activemq；<code>./activemq stop</code></p></li><li><p>带日志的启动；<code>./activemq start &gt; /myactivemq/myrunmq.log</code></p></li><li><p>在前台使用activemq；前台网页访问ip:8161</p></li></ol><h1 id="二、消息生产者-amp-消费者"><a href="#二、消息生产者-amp-消费者" class="headerlink" title="二、消息生产者&amp;消费者"></a>二、消息生产者&amp;消费者</h1><h2 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h2><h3 id="生产者："><a href="#生产者：" class="headerlink" title="生产者："></a>生产者：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;queue01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建mq连接工厂</span></span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 开启连接</span></span><br><span class="line">        connection.start();</span><br><span class="line"><span class="comment">// 创建session</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 创建消息队列</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line">        <span class="comment">// 创建生产者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">// 循环发送消息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">&quot;msg--&quot;</span>+i);</span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者："><a href="#消费者：" class="headerlink" title="消费者："></a>消费者：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;queue01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始接收。。。。。&quot;</span>);</span><br><span class="line">        <span class="comment">/*while (true)&#123;</span></span><br><span class="line"><span class="comment">            TextMessage receive = (TextMessage) consumer.receive();</span></span><br><span class="line"><span class="comment">            if (receive != null)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;收到消息：&quot;+receive.getText());</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">// 创建监听器</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                System.out.println(<span class="string">&quot;接受消息 = &quot;</span> + textMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果使用监听器则不需要在这里关闭连接，这样会导致连接断开接收不到消息</span></span><br><span class="line">        <span class="comment">// 或者写上</span></span><br><span class="line">        System.in.read(); <span class="comment">// 写上这一行可以保证程序不会被关闭</span></span><br><span class="line">        <span class="comment">// consumer.close();</span></span><br><span class="line">        <span class="comment">// session.close();</span></span><br><span class="line">        <span class="comment">// connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主题（topic）"><a href="#主题（topic）" class="headerlink" title="主题（topic）"></a>主题（topic）</h2><p>主题和队列的编写几乎一致，只需要将发送位置改为队列即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Topic topic = session.createTopic(TOPIC_NAME);</span><br></pre></td></tr></table></figure><h2 id="队列和主题的区别"><a href="#队列和主题的区别" class="headerlink" title="队列和主题的区别"></a>队列和主题的区别</h2><table><thead><tr><th>比较项目</th><th>主题（topic）</th><th>队列（queue）</th></tr></thead><tbody><tr><td>工作模式</td><td>“订阅-发送”模式，只有在有消费者订阅之后产生的消息才能被消费者接收到，如果没有消费者那么该消息为废消息</td><td>“负载均衡”模式，如果当前没有消费者消息也不会被丢弃，并且一条消息只会发送给其中一个消费者，并且要求消费者ack消息</td></tr><tr><td>有无状态</td><td>无状态</td><td>queue数据默认会被保存在mq服务器上，以文件形式保存，一般保存在@AMQ_HOME\data\kr-store\data下面。也可以配置DB存储</td></tr><tr><td>传递完整性</td><td>如果没有订阅者消息会被丢弃</td><td>消息不会丢弃</td></tr><tr><td>处理效率</td><td>由于消息要按照消费者数量进行复制，所以性能会随着消费者数量的增加而有所降低</td><td>由于一条消息只会发送给其中一个消费者，所以就算消费者再多降低也不会有明显的性能</td></tr></tbody></table><h1 id="三、JSM-message"><a href="#三、JSM-message" class="headerlink" title="三、JSM message"></a>三、JSM message</h1><h2 id="消息头："><a href="#消息头：" class="headerlink" title="消息头："></a>消息头：</h2><ul><li><p>JMSDestination</p><ul><li>jms消息头；所有消息的消息头都具体相同的字段，用于 JMS Client 以及 JMS Provider 对它们进行区别以及进行消息路由</li></ul></li><li><p>JMSDeliveryMode</p><ul><li><p>指明消息的传输模式，有两种：</p><p>DeliveryMode.PERSISTENT ：保证消息仅传一次， JMS Provider 服务停止后消息不会丢失；</p><p>DeliveryMode.NON_PERSISTENT ：消息最多传一次，消息会因 JMS Provider 停止后丢失；</p></li></ul></li><li><p>JMSExpiration</p><ul><li>消息的过期时间，其值为当前时间加上存活时间（毫秒）；当存活时间设置为 0 时，该字段的值也被设置为 0 ，表示永不过期；</li></ul></li><li><p>JMSPriority</p><ul><li><p>消息的优先级， 0 代表最低优先级， 9 代表最高优先级；一般 0<del>4 为普通优先级， 5</del>9 为加快优先级</p><p>JMS 规范里并没有要求 JMS Provider 严格按这个优先级来实现，但是尽可能实现加快优先级消息的传输在普通消息的前面</p><p>同 JMSDestination 一样，该字段在发送前被忽略，在发送完成时重置</p></li></ul></li><li><p>JMSMessageID</p><ul><li>由 JMS Provider 指定的消息的唯一标识符；同上面的字段一样，在发送前设置的会被忽略，在发送完成时，由 JMS Provider 重置该字段</li></ul></li></ul><h2 id="消息体："><a href="#消息体：" class="headerlink" title="消息体："></a>消息体：</h2><ol><li>StreamMessage ：消息体是 Java 流，写入和读出都是顺序的</li><li>MapMessage ：消息体包含 key-value 对， key 为 String ， value 为基本类型，可以通过迭代器访问</li><li>TextMessage ：消息体是 String</li><li>ObjectMessage ：消息体是可序列化的 Java 对象</li><li>BytesMessage ：消息体是字节数组</li></ol><p>可以通过 message.clearBody() 来清除消息体；但在消费端，消息体是只读的，针对消息的写操作都会抛出 MessageNotWritableException 异常</p><h2 id="消息属性："><a href="#消息属性：" class="headerlink" title="消息属性："></a>消息属性：</h2><p>JMS 消息还提供了对“属性值对”的支持，以对消息头进行扩展；消息属性主要用于消息选择器</p><p>属性名：属性名必须服务消息选择器的命名规则</p><p>属性值：可以是基本类型及其对象类型以及 Map 、 List 和 String</p><p>清除属性：JMS 不能清除单个属性，但可以通过 Message.clearProperties() 方法清除所有消息属性</p><h1 id="四、消息可靠性"><a href="#四、消息可靠性" class="headerlink" title="四、消息可靠性"></a>四、消息可靠性</h1><h2 id="4-1-持久性"><a href="#4-1-持久性" class="headerlink" title="4.1 持久性"></a>4.1 持久性</h2><p><strong>参数设置说明</strong></p><p><strong>非持久：</strong></p><p>MessageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</p><p>当服务器宕机，消息就会丢失。</p><p><strong>持久：</strong></p><p>MessageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</p><p>当服务器宕机，消息依然存在。</p><p><strong>默认为持久状态</strong></p><h2 id="持久化的topic"><a href="#持久化的topic" class="headerlink" title="持久化的topic"></a>持久化的topic</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_NAME = <span class="string">&quot;topic01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">// 原本在这 connection.start();移动到下面了</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line">        MessageProducer producer = session.createProducer(topic);</span><br><span class="line">        <span class="comment">// 设置为持久化</span></span><br><span class="line">        producer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">&quot;msg--&quot;</span>+i);</span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送到MQ。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC_NAME = <span class="string">&quot;topic01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;qwq开始接收。。。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 设置一个身份id识别号</span></span><br><span class="line">        connection.setClientID(<span class="string">&quot;qwq&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"><span class="comment">// 将消费者MessageConsumer修改为订阅者TopicSubscriber</span></span><br><span class="line">        TopicSubscriber topicSubscriber = session.createDurableSubscriber(topic, <span class="string">&quot;remark...&quot;</span>);</span><br><span class="line">        connection.start();</span><br><span class="line"><span class="comment">// 开启监听消息</span></span><br><span class="line">        topicSubscriber.setMessageListener((message)-&gt;&#123;</span><br><span class="line">            TextMessage msg = (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息&quot;</span>+msg.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">        topicSubscriber.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>一定要先运行一次订阅者，相当于向mq注册它，然后生产者再发送消息，无论订阅者在不在线都会发送给它，如果订阅者不在线下次连接的时候就会将消息补发给它</strong></p></blockquote><h2 id="4-2-事务"><a href="#4-2-事务" class="headerlink" title="4.2 事务"></a>4.2 事务</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">producer.close();</span><br><span class="line">session.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">System.out.println(<span class="string">&quot;消息发送到MQ。。。&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建session时将事务开启</p><p>开启事务后，需要在消息send之后调用commit()将session提交，不然消息会传递失败。</p><p>这个事务类似于jdbc的事务操作</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>消费者开启事务的方式与生产者一致。</p><p>但是当消费者没有提交session时mq会认为本次消费无效，消费者下次消费时会消费到和上次一样的消息。这样就会出现消息重复消费</p><h2 id="4-3-签收"><a href="#4-3-签收" class="headerlink" title="4.3 签收"></a>4.3 签收</h2><h3 id="4-3-1-签收模式："><a href="#4-3-1-签收模式：" class="headerlink" title="4.3.1 签收模式："></a>4.3.1 签收模式：</h3><ul><li><p>Session.AUTO_ACKNOWLEDGE </p><ul><li>自动签收（默认）</li></ul></li><li><p>Session.CLIENT_ACKNOWLEDGE</p><ul><li><p>手动签收</p></li><li><p>要求消费者手动调用ack方法签收，如果不手动签收会认为这条消息未被消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">topicSubscriber.setMessageListener((message)-&gt;&#123;</span><br><span class="line">    TextMessage msg = (TextMessage) message;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到消息&quot;</span>+msg.getText());</span><br><span class="line">        msg.acknowledge();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Session.DUPS_OK_ACKNOWLEDGE</p><ul><li>允许消息重复</li></ul></li></ul><h3 id="4-3-2-事务与签收的关系"><a href="#4-3-2-事务与签收的关系" class="headerlink" title="4.3.2 事务与签收的关系"></a>4.3.2 事务与签收的关系</h3><p>事务开启签收为手动签收：</p><ul><li>如果没写commit()但写了ack方法，消息会认为未被处理</li><li>如果写了commit()但没写ack方法，消息会认为被处理了</li></ul><p>可以粗略的认为开启了事务签收模式就为自动签收</p><blockquote><p>在事务性会话中，当一个事务被成功提交则消息被自动签收。如果回滚则消息再次传送</p><p>非事务性会话中，消息何时被确认(签收)取决于创建会话时的应答模式(签收模式)</p></blockquote><h1 id="五、activemq的broker"><a href="#五、activemq的broker" class="headerlink" title="五、activemq的broker"></a>五、activemq的broker</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>相当于一个activemq服务器实例</p><p>broker其实就是实现了用代码的形式启动activemq将mq嵌入到java代码中，以便随时启动，在用的使用再去启动这样就能节省资源，也保证了可靠性</p><h2 id="使用不同的conf文件来启动不同的activemq实例"><a href="#使用不同的conf文件来启动不同的activemq实例" class="headerlink" title="使用不同的conf文件来启动不同的activemq实例"></a>使用不同的conf文件来启动不同的activemq实例</h2><p><code>./activemq start xbean:file:/activemq配置文件地址</code></p><p>例：<code>./activemq start xbean:file:/activemq/conf/activemq02.xml</code></p><h2 id="嵌入式broker"><a href="#嵌入式broker" class="headerlink" title="嵌入式broker"></a>嵌入式broker</h2><ol><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mybroker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BrokerService brokerService = <span class="keyword">new</span> BrokerService();</span><br><span class="line">        brokerService.setUseJmx(<span class="keyword">true</span>);</span><br><span class="line">        brokerService.addConnector(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        brokerService.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="六、spring整合activemq"><a href="#六、spring整合activemq" class="headerlink" title="六、spring整合activemq"></a>六、spring整合activemq</h1><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-02-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.jms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring-jms通信依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- activemq --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.14.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.2.17&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.6.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.6.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--json--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans</span><br><span class="line">        xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">        xmlns:amq=&quot;http://activemq.apache.org/schema/core&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">        xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">        xmlns:jms=&quot;http://www.springframework.org/schema/jms&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span><br><span class="line">         http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd</span><br><span class="line">         http://www.springframework.org/schema/context</span><br><span class="line">         http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">         http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd&quot;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ll.activemq&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jmsFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.pool.PooledConnectionFactory&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;stop&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;brokerURL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxConnections&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;destinationQueue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.command.ActiveMQQueue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;amq-spring-queue&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;destinationTopic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.activemq.command.ActiveMQTopic&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;amq-spring-topic&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jsmTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.core.JmsTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jmsFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果需要修改topic或者queue，将此处的引用修改即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultDestination&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;destinationTopic&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jms.support.converter.SimpleMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Produce</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-activemq.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SpringMQ_Produce produce = (SpringMQ_Produce) ctx.getBean(<span class="string">&quot;springMQ_Produce&quot;</span>);</span><br><span class="line"></span><br><span class="line">        produce.jmsTemplate.send(session -&gt; session.createTextMessage(<span class="string">&quot;qwq&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;生产者产出消息完毕！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Consumer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-activemq.xml&quot;</span>);</span><br><span class="line">        SpringMQ_Consumer consumer = (SpringMQ_Consumer) ctx.getBean(<span class="string">&quot;springMQ_Consumer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String msg = (String) consumer.jmsTemplate.receiveAndConvert();</span><br><span class="line"></span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>只需要将JmsTemplate的defaultDestination属性的引用修改为topic即可</p><h2 id="配置消息监听器"><a href="#配置消息监听器" class="headerlink" title="配置消息监听器"></a>配置消息监听器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;jmsContainer&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;connectionFactory&quot;</span> ref=<span class="string">&quot;jmsFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;destination&quot;</span> ref=<span class="string">&quot;destinationTopic&quot;</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;messageListener&quot;</span> ref=<span class="string">&quot;myMessageListener&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(textMessage.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、springboot整合activemq"><a href="#七、springboot整合activemq" class="headerlink" title="七、springboot整合activemq"></a>七、springboot整合activemq</h1><h2 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################### common config : #################################### activemq-03-springboot</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">false</span> <span class="comment"># 订阅-发送模式 false=queue；true=topic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.1.105:61616</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己定义的配置</span></span><br><span class="line"><span class="attr">my-config:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">queue-name:</span> <span class="string">amq-springboot-queue</span></span><br></pre></td></tr></table></figure><h2 id="配置bean"><a href="#配置bean" class="headerlink" title="配置bean"></a>配置bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my-config.activemq.queue-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String queueName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(queueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列-1"><a href="#队列-1" class="headerlink" title="队列"></a>队列</h2><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><h4 id="单点投递"><a href="#单点投递" class="headerlink" title="单点投递"></a>单点投递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueProduce</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueProduce</span><span class="params">(JmsMessagingTemplate jmsMessagingTemplate, Queue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jmsMessagingTemplate = jmsMessagingTemplate;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 每调用一次就投递一次消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgProduce</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(queue, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时投递"><a href="#定时投递" class="headerlink" title="定时投递"></a>定时投递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在QueueProduce中添加此方法</span></span><br><span class="line"><span class="comment">// 定时三秒投递消息，注意：@Scheduled注解只能用于没有参数的方法；</span></span><br><span class="line"><span class="comment">// 需要在主配置类上标注@EnableScheduling定时任务才能生效</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 3000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgProduceScheduled</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsMessagingTemplate.convertAndSend(queue, UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">6</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;...定时发送啦&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><p>springboot为我们封装的很好，所以只需要在需要接收消息的方法上加上<code>@JmsListener</code>就可以自动为我们监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;my-config.activemq.queue-name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(TextMessage textMessage)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息：&quot;</span>+textMessage.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主题-topic"><a href="#主题-topic" class="headerlink" title="主题(topic)"></a>主题(topic)</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span> <span class="comment"># 将这修改为true</span></span><br></pre></td></tr></table></figure><h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;$&#123;my-config.activemq.topic-name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(TextMessage textMessage)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息：&quot;</span>+textMessage.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my-config.activemq.topic-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Topic <span class="title">topic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQTopic(topicName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProduce</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Topic topic;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgProduce</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(topic, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 3000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgProduceScheduled</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(topic, UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;...定时发送啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、ActiveMQ的传输协议"><a href="#八、ActiveMQ的传输协议" class="headerlink" title="八、ActiveMQ的传输协议"></a>八、ActiveMQ的传输协议</h1><table><thead><tr><th>协议</th><th>描述</th></tr></thead><tbody><tr><td>TCP</td><td>默认的协议，性能相对可以</td></tr><tr><td>NIO</td><td>基于TCP协议之上的，进行了扩展和优化，具有更好的扩展性</td></tr><tr><td>UDP</td><td>性能比TCP更好，但是不具有可靠性</td></tr><tr><td>SSL</td><td>安全连接</td></tr><tr><td>HTTP(S)</td><td>基于HTTP或者HTTPS</td></tr><tr><td>VM</td><td>VM本身不是协议，当客户端和代理在同一个Java虚拟机中运行时，他们之间需要通信，但不想占用网络通道，而是直接通信，可以使用该方式</td></tr></tbody></table><h2 id="增加nio协议并使用"><a href="#增加nio协议并使用" class="headerlink" title="增加nio协议并使用"></a>增加nio协议并使用</h2><h3 id="修改activemq配置文件"><a href="#修改activemq配置文件" class="headerlink" title="修改activemq配置文件"></a>修改activemq配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加这个标签到配置文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;nio&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;nio://0.0.0.0:61618?trace=true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改生产者和消费者的代码"><a href="#修改生产者和消费者的代码" class="headerlink" title="修改生产者和消费者的代码"></a>修改生产者和消费者的代码</h3><p>只需要将<code>tcp://192.168.1.105:61616</code>更改为<code>nio://192.168.1.105:61616</code></p><h2 id="nio增强"><a href="#nio增强" class="headerlink" title="nio增强"></a>nio增强</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">&quot;auto+nio&quot;</span> <span class="attr">uri</span>=<span class="string">&quot;auto+nio://0.0.0.0:61608?maximumConnections=1000<span class="symbol">&amp;amp;</span>wireFormat.maxFrameSize=104857600<span class="symbol">&amp;amp;</span>org.apache.activemq.transport.nio.SelectorManager.corePoolSize=20<span class="symbol">&amp;amp;</span>org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize=50&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>可以使在支持多种协议的同时使用nio进行优化</p><p>代码中只需要将端口号修改为61608即可，例: <code>tcp://192.168.1.105:61608</code>，<code>nio://192.168.1.105:61608</code></p><h1 id="九、ActiveMQ的存储和持久化"><a href="#九、ActiveMQ的存储和持久化" class="headerlink" title="九、ActiveMQ的存储和持久化"></a>九、ActiveMQ的存储和持久化</h1><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果需要修改连接池，就将这里的class修改即可，但是要记得往lib包中添加对应的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysql-ds&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--这里设置驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.1.103:3306/activemq?relaxAutoCommit=true&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这个bean要添加到之后之前</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/12/MQ/ActiveMQ/activeMQ/image-20200519161307519.png" alt="image-20200519161307519"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">将这个这个修改为下面的样子</span><br><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">&quot;$&#123;activemq.data&#125;/kahadb&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">---------修改之后</span><br><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--createTablesOnStartup：每次启动amq就创建表，默认为true。第二次启动记得改为false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">&quot;#mysql-ds&quot;</span> <span class="attr">createTablesOnStartup</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mysql的一些配置"><a href="#mysql的一些配置" class="headerlink" title="mysql的一些配置"></a>mysql的一些配置</h2><p>如果连接不上记得将mysql允许远程连接和允许指定ip的连接</p><h2 id="下划线问题"><a href="#下划线问题" class="headerlink" title="下划线问题"></a>下划线问题</h2><p>如果操作系统路径里有<code>_</code>记得改名</p><h2 id="jdbc-journal"><a href="#jdbc-journal" class="headerlink" title="jdbc journal"></a>jdbc journal</h2><p>这是一个在数据库和amq的一个缓存，mq会将数据先存储在本地的缓存中，然后再慢慢的同步到数据库中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceFactory</span>&gt;</span></span><br><span class="line">&lt;journalPersistenceAdapterFactory</span><br><span class="line">                                      journalLogFiles=&quot;4&quot; </span><br><span class="line">                                      journalLogFileSize=&quot;32768&quot; </span><br><span class="line">                                      useJournal=&quot;true&quot; </span><br><span class="line">                                      useQuickJournal=&quot;true&quot;</span><br><span class="line">                                      dataSource=&quot;#mysql-ds&quot;</span><br><span class="line">                                      dataDirectory=&quot;activemq-data&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceFactory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意要将<persistenceAdapter>注释掉</persistenceAdapter></p><p>ps：别看错了<persistenceAdapter>和<persistenceFactory>不是同一个标签，不要把journalPersistenceAdapterFactory放到persistenceAdapter里面了</persistenceFactory></persistenceAdapter></p><h2 id="leveldb"><a href="#leveldb" class="headerlink" title="leveldb"></a>leveldb</h2><p>使用可复制的leveldb存储</p><ol><li><p>安装和配置好zookeeper，zookeeper的学习笔记里面有</p></li><li><p>修改activemq的配置文件(activemq.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    &lt;replicatedLevelDB</span><br><span class="line">          directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</span><br><span class="line">          replicas=&quot;3&quot;</span><br><span class="line">          bind=&quot;tcp://vmcluster110:63631&quot;</span><br><span class="line">          zkAddress=&quot;vmcluster111:2181,vmcluster112:2181,vmcluster113:2181&quot;</span><br><span class="line">          zkPath=&quot;/activemq/leveldb-stores&quot;</span><br><span class="line">          sync=&quot;local_disk&quot;</span><br><span class="line">          hostname=&quot;vmcluster110&quot;</span><br><span class="line">          /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">directory：存储数据的地方</span></span><br><span class="line"><span class="comment">replicas：集群中存在的节点数</span></span><br><span class="line"><span class="comment">bind：当被选举成master时，用来通讯的ip</span></span><br><span class="line"><span class="comment">zkAddress：zookeeper集群的ip和端口号</span></span><br><span class="line"><span class="comment">zkPath：数据存放在zk的那个节点下</span></span><br><span class="line"><span class="comment">sync：在同步完成之前在那个位置存放数据，local_disk：本地磁盘</span></span><br><span class="line"><span class="comment">hostname：当该节点成为主节点时，用于播发复制服务的主机名。设置本机的ip就好了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://activemq.apache.org/schema/core&quot;</span> <span class="attr">brokerName</span>=<span class="string">&quot;llqwq&quot;</span> <span class="attr">dataDirectory</span>=<span class="string">&quot;$&#123;activemq.data&#125;&quot;</span>&gt;</span></span><br><span class="line">    把所有的activemq的brokerName改成相同的名称</span><br></pre></td></tr></table></figure></li><li><p>修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;failover:(&quot;</span> +</span><br><span class="line">            <span class="string">&quot;tcp://192.168.1.105:61616,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;tcp://192.168.1.110:61616,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;tcp://192.168.1.111:61616)?randomize=false&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><h1 id="十、activemq补充"><a href="#十、activemq补充" class="headerlink" title="十、activemq补充"></a>十、activemq补充</h1><h2 id="异步投递-Async-Send"><a href="#异步投递-Async-Send" class="headerlink" title="异步投递 Async Send"></a>异步投递 Async Send</h2><p>默认情况下是异步的，但是在没有开启事务并且是不持久化的状态下，默认是同步的，可以通过指定异步的方式来改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_URL = <span class="string">&quot;tcp://192.168.1.105:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;autonio&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">        <span class="comment">// 使用ActiveMQConnectionFactory..setUseAsyncSend(true);来设置异步发送</span></span><br><span class="line">        connectionFactory.setUseAsyncSend(<span class="keyword">true</span>);</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line">        <span class="comment">// 这里不再是MessageProducer了</span></span><br><span class="line">        ActiveMQMessageProducer activeMQMessageProducer = (ActiveMQMessageProducer) session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">&quot;msg--&quot;</span>+i);</span><br><span class="line">            String msgId = UUID.randomUUID().toString()+<span class="string">&quot;---qwq&quot;</span>;</span><br><span class="line">            <span class="comment">// 设置msgid</span></span><br><span class="line">            textMessage.setJMSMessageID(msgId);</span><br><span class="line">            <span class="comment">// 由于指定为异步状态了，所以需要一个异步的函数来进行回调</span></span><br><span class="line">            activeMQMessageProducer.send(textMessage, <span class="keyword">new</span> AsyncCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(msgId + <span class="string">&quot;成功发送！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException e)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 这里是发送失败的状态</span></span><br><span class="line">                    System.out.println(msgId + <span class="string">&quot;发送失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 由于是异步的，这句打印可能会在消息发送之前打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;发送完成。。。。。&quot;</span>);</span><br><span class="line">        activeMQMessageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="延时间隔投递"><a href="#延时间隔投递" class="headerlink" title="延时间隔投递"></a>延时间隔投递</h2><p>在activemq.xml的broker中设置schedulerSupport=”true”</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/12/MQ/ActiveMQ/activeMQ/image-20200521184707949.png" alt="image-20200521184707949"></p><p>编写代码</p><p>只需要为消息设置属性即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TextMessage textMessage = session.createTextMessage(<span class="string">&quot;msg--&quot;</span>+i);</span><br><span class="line">String msgId = UUID.randomUUID().toString()+<span class="string">&quot;---qwq&quot;</span>;</span><br><span class="line">textMessage.setJMSMessageID(msgId);</span><br><span class="line"><span class="comment">// ScheduledMessage.AMQ_SCHEDULED_DELAY 延迟时间，延迟多少毫秒投递</span></span><br><span class="line"><span class="comment">// ScheduledMessage.AMQ_SCHEDULED_PERIOD 间隔时间,重复投递的时间间隔</span></span><br><span class="line"><span class="comment">// ScheduledMessage.AMQ_SCHEDULED_REPEAT 投递次数</span></span><br><span class="line">textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, <span class="number">3000L</span>);</span><br><span class="line">textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, <span class="number">4000L</span>);</span><br><span class="line">textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="消息重发策略"><a href="#消息重发策略" class="headerlink" title="消息重发策略"></a>消息重发策略</h2><p><a href="http://activemq.apache.org/message-redelivery-and-dlq-handling.html">官网介绍</a></p><p>在以下三种情况中，消息会被再次传送给消费者：</p><p>1．在使用事务的Session中，调用rollback()方法；</p><p>2．在使用事务的Session中，调用commit()方法之前就关闭了Session;</p><p>3．在Session中使用CLIENT_ACKNOWLEDGE签收模式，并且调用了recover()方法。</p><p>默认会重发6次，当超过六次时会进入死信队列(ActiveMQ.DLQ)，可以使用RedeliveryPolicy 类来修改默认的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(CONNECTION_URL);</span><br><span class="line">RedeliveryPolicy policy = connectionFactory.getRedeliveryPolicy();</span><br><span class="line"><span class="comment">// 设置最大重发次数为3次</span></span><br><span class="line">policy.setMaximumRedeliveries(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>RedeliveryPolicy的一些其他设置</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/12/MQ/ActiveMQ/activeMQ/image-20200521191415684.png" alt="image-20200521191415684"></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
          <category> activeMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> activeMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux错误记录</title>
      <link href="2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="vm虚拟机中桥接模式下虚拟机和物理机网段不同解决办法"><a href="#vm虚拟机中桥接模式下虚拟机和物理机网段不同解决办法" class="headerlink" title="vm虚拟机中桥接模式下虚拟机和物理机网段不同解决办法"></a>vm虚拟机中桥接模式下虚拟机和物理机网段不同解决办法</h1><ol><li><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.png" alt="image-20200514182233038"></p><p>点击虚拟网络编辑器</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20200514182434873.png" alt="image-20200514182434873"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20200514182617703.png" alt="image-20200514182617703"></p><p>将自动改为物理机中本地网卡的名称</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20200514182823994.png" alt="image-20200514182823994"></p><p>修改为桥接模式</p></li><li><p>在虚拟机中修改ip</p><ol><li>找到这个文件 /etc/sysconfig/network-scripts/ifcfg-网卡名</li><li>修改<code>BOOTPROTO</code>属性为<code>static</code>，默认为<code>dhcp</code></li><li>修改IPADDR(ip地址),  PREFIX(子网掩码),  GATEWAY(网关)。将IPADDR设置成与物理主机相同网段的ip，子网掩码和网关设置成和物理主机相同的，如果没有这三个属性就添加</li><li>重启网卡  <code>systemctl restart network</code> </li></ol></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;static&quot;</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.1.104&quot;</span></span><br><span class="line"><span class="attr">PREFIX</span>=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;faf9b428-5baa-4620-9801-2f608fefc9a8&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure><h1 id="开放端口无效"><a href="#开放端口无效" class="headerlink" title="开放端口无效"></a>开放端口无效</h1><p>问题描述：centos7里面开放指定端口无效但是关闭防火墙可以访问</p><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用这个命令查看可以使用的域</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> firewall-cmd --get-active-zones</span>                             </span><br><span class="line">external</span><br><span class="line">  interfaces: eth0</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定在这个域中开启端口</span></span><br><span class="line">firewall-cmd --zone=external --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><blockquote><p>如果使用的是云服务器还要去安全组里面加入开放端口</p></blockquote><h1 id="ping不通百度"><a href="#ping不通百度" class="headerlink" title="ping不通百度"></a>ping不通百度</h1><p>问题描述：centos7 ping 百度等网址时出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7node112 network-scripts]# ping baidu.com           </span><br><span class="line">ping: baidu.com: 域名解析暂时失败</span><br><span class="line">[root@centos7node112 network-scripts]# ping baidu.com</span><br><span class="line">ping: baidu.com: 域名解析暂时失败</span><br></pre></td></tr></table></figure><p>问题解决：</p><ol><li><p>设置dns域名解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑域名解析配置</span></span><br><span class="line">vim /etc/resolv.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将阿里云的dns服务器添加到文件中</span></span><br><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20201001095810858.png" alt="image-20201001095810858"></p><blockquote><p>如果还是不行就执行下面的操作</p></blockquote><ol><li><p>查看虚拟机中网关的ip</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20201001094817488.png" alt="image-20201001094817488"></p></li><li><p>查看虚拟机中的网卡设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入网卡配置文件的目录</span></span><br><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看网卡配置</span></span><br><span class="line">cat ifcfg-网卡的名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不知道网卡的名称是啥就使用ifconfig 或 ip addr 查看</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/23/Linux/Linux%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/image-20201001095434901.png" alt="image-20201001095434901"></p></li><li><p>修改之后就可以ping通了，</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
            <tag> 错误记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 学习笔记</title>
      <link href="2020/07/05/spring-cloud/spring-cloud/"/>
      <url>2020/07/05/spring-cloud/spring-cloud/</url>
      
        <content type="html"><![CDATA[<p><a href="https://spring.io/projects/spring-boot">spring-boot 官方文档</a></p><p><a href="https://spring.io/projects/spring-cloud">spring-cloud 官方文档</a></p><p><a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">spring-cloud中文文档</a></p><h1 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h1><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><h3 id="创建一个简单的maven项目（mavn-archetype-site）"><a href="#创建一个简单的maven项目（mavn-archetype-site）" class="headerlink" title="创建一个简单的maven项目（mavn-archetype-site）"></a>创建一个简单的maven项目（mavn-archetype-site）</h3><p>创建的过程中请使用3.5以上的maven，不要使用idea自带的</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523123547798.png" alt="image-20200523123547798"></p><h3 id="设置字符编码"><a href="#设置字符编码" class="headerlink" title="设置字符编码"></a>设置字符编码</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523124518170.png" alt="image-20200523124518170"></p><h3 id="注解生效激活"><a href="#注解生效激活" class="headerlink" title="注解生效激活"></a>注解生效激活</h3><p>打开enable annotation processors选项</p><p>default里面的enable annotation processors选项也要√</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523124807004.png" alt="image-20200523124807004"></p><h3 id="设置java8"><a href="#设置java8" class="headerlink" title="设置java8"></a>设置java8</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523125155066.png" alt="image-20200523125155066"></p><h3 id="File-Type-过滤【可选】"><a href="#File-Type-过滤【可选】" class="headerlink" title="File Type 过滤【可选】"></a>File Type 过滤【可选】</h3><p>将不需要看到的文件添加到下面那个框里面就好了</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523125416059.png" alt="image-20200523125416059"></p><h2 id="搭建父工程pom"><a href="#搭建父工程pom" class="headerlink" title="搭建父工程pom"></a>搭建父工程pom</h2><p>删除src文件，因为这是父工程，不需要src文件</p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关闭单元测试"><a href="#关闭单元测试" class="headerlink" title="关闭单元测试"></a>关闭单元测试</h3><p>这一步只是为了打包节省时间</p><p>看到test指令被划了横线就好了</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523131615272.png" alt="image-20200523131615272"></p><h3 id="测试是否搭建成功"><a href="#测试是否搭建成功" class="headerlink" title="测试是否搭建成功"></a>测试是否搭建成功</h3><p>运行maven的install命令查看一下是否出现了<code>BUILD SUCCESS</code></p><p>测试完了之后执行clean指令删除刚刚编译的项目jar包</p><h2 id="Rest微服务工程构建"><a href="#Rest微服务工程构建" class="headerlink" title="Rest微服务工程构建"></a>Rest微服务工程构建</h2><h3 id="创建一个普通的maven工程【cloud-provider-payment8001】"><a href="#创建一个普通的maven工程【cloud-provider-payment8001】" class="headerlink" title="创建一个普通的maven工程【cloud-provider-payment8001】"></a>创建一个普通的maven工程【cloud-provider-payment8001】</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523133057294.png" alt="image-20200523133057294"></p><h4 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有用到就不要导--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有用到就不要导--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有用到就不要导--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有用到就不要导--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="写application-yml"><a href="#写application-yml" class="headerlink" title="写application.yml"></a>写application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2020?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ll.springcloud.entities</span></span><br></pre></td></tr></table></figure><h4 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h4><h5 id="建表sql"><a href="#建表sql" class="headerlink" title="建表sql"></a>建表sql</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">`serial` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line"><span class="keyword">primary</span> key (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB auto_increment<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> charset<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>其他的类去看项目里面的代码</p><h3 id="热部署-Devtools"><a href="#热部署-Devtools" class="headerlink" title="热部署 Devtools"></a>热部署 Devtools</h3><h4 id="添加devtools-jar包"><a href="#添加devtools-jar包" class="headerlink" title="添加devtools jar包"></a>添加devtools jar包</h4><p>这个要添加到子工程里面</p><p>如果是拷贝的之前创建8001工程的pom文件，这个就不用拷了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加插件到父工程"><a href="#添加插件到父工程" class="headerlink" title="添加插件到父工程"></a>添加插件到父工程</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启自动编译选项"><a href="#开启自动编译选项" class="headerlink" title="开启自动编译选项"></a>开启自动编译选项</h4><p>勾上，automatically的那个也要勾</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523155942164.png" alt="image-20200523155942164"></p><p>按住<code>ctrl+shift+alt+/</code>,点击第一个</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523160233748.png" alt="image-20200523160233748"></p><p>勾上以下两个选项（可以搜索）</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523160509841.png" alt="image-20200523160509841"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523160603567.png" alt="image-20200523160603567"></p><h4 id="重启idea"><a href="#重启idea" class="headerlink" title="重启idea"></a>重启idea</h4><h3 id="创建消费者【cloud-customer-order80】"><a href="#创建消费者【cloud-customer-order80】" class="headerlink" title="创建消费者【cloud-customer-order80】"></a>创建消费者【cloud-customer-order80】</h3><p>没什么需要记的，和创建payment项目的步骤一样，就是不需要的依赖记得移除，代码看项目</p><h3 id="项目重构"><a href="#项目重构" class="headerlink" title="项目重构"></a>项目重构</h3><p>由于之前的项目中有代码相同的部分，所以将他们全都提取出来，单独作为一个项目【cloud-api-commons】</p><h1 id="二、eureka服务注册与发现"><a href="#二、eureka服务注册与发现" class="headerlink" title="二、eureka服务注册与发现"></a>二、eureka服务注册与发现</h1><h2 id="单机eureka构建步骤"><a href="#单机eureka构建步骤" class="headerlink" title="单机eureka构建步骤"></a>单机eureka构建步骤</h2><h3 id="eurekaServer端"><a href="#eurekaServer端" class="headerlink" title="eurekaServer端"></a>eurekaServer端</h3><h5 id="建maven工程"><a href="#建maven工程" class="headerlink" title="建maven工程"></a>建maven工程</h5><h5 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523192756143.png" alt="image-20200523192756143"></p><h5 id="写yml"><a href="#写yml" class="headerlink" title="写yml"></a>写yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment">#单机就是7001自己</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h5 id="主启动类-1"><a href="#主启动类-1" class="headerlink" title="主启动类"></a>主启动类</h5><p>在主启动类中添加@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>浏览器中输入网址<a href="http://localhost:7001/">http://localhost:7001/</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523193945664.png" alt="image-20200523193945664"></p><p><strong>如果出现下图中的红色警告，别慌，这是eureka的自我保护机制，后面会说的</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523205708198.png" alt="image-20200523205708198"></p><h2 id="将cloud-provider-payment8001注册进eureka中"><a href="#将cloud-provider-payment8001注册进eureka中" class="headerlink" title="将cloud-provider-payment8001注册进eureka中"></a>将cloud-provider-payment8001注册进eureka中</h2><p>以下修改都是对cloud-provider-payment8001项目进行的修改</p><h3 id="添加eureka-client依赖"><a href="#添加eureka-client依赖" class="headerlink" title="添加eureka-client依赖"></a>添加eureka-client依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改yml"><a href="#修改yml" class="headerlink" title="修改yml"></a>修改yml</h3><p>添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="修改主入口类"><a href="#修改主入口类" class="headerlink" title="修改主入口类"></a>修改主入口类</h3><p>添加@EnableEurekaClient注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>还是输入eureka的网址<a href="http://localhost:7001/">http://localhost:7001/</a></p><p>可以看到已经出现了刚刚注册进去的服务，服务的名称就是在application.yml中配置的<code>spring.application.name</code>,这个名称最好不要随意改动</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523200046599.png" alt="image-20200523200046599"></p><h2 id="将cloud-customer-order80也注册到eureka中"><a href="#将cloud-customer-order80也注册到eureka中" class="headerlink" title="将cloud-customer-order80也注册到eureka中"></a>将cloud-customer-order80也注册到eureka中</h2><p>步骤和修改和上面的一致</p><p>成功之后可以看到就被注册到eureka中了</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523201616980.png" alt="image-20200523201616980"></p><h2 id="集群Eureka搭建步骤"><a href="#集群Eureka搭建步骤" class="headerlink" title="集群Eureka搭建步骤"></a>集群Eureka搭建步骤</h2><h3 id="eureka集群原理说明"><a href="#eureka集群原理说明" class="headerlink" title="eureka集群原理说明"></a>eureka集群原理说明</h3><p>别问，问就是偷懒o(´^｀)o</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523202335326.png" alt="image-20200523202335326"></p><h3 id="再构建一个eureka-server项目"><a href="#再构建一个eureka-server项目" class="headerlink" title="再构建一个eureka-server项目"></a>再构建一个eureka-server项目</h3><p>参考eurekaServer-7001的那个，建完之后看下面的。先不要着急测试</p><h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 添加以下映射</span></span><br><span class="line">127.0.0.1 eureka7001</span><br><span class="line">127.0.0.1 eureka7002</span><br></pre></td></tr></table></figure><blockquote><p>这里是两台eureka的ip映射，因为练习cloud所以就共用一台物理机，使用映射的方式区分一下。</p><p>当然不配置这个也可以</p></blockquote><h4 id="修改yml-1"><a href="#修改yml-1" class="headerlink" title="修改yml"></a>修改yml</h4><p>7002的yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002</span> <span class="comment"># eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001:7001/eureka/</span> <span class="comment"># 因为是相互守望、相互注册，所以这里要填7001的注册地址</span></span><br></pre></td></tr></table></figure><p>7001的yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002:7002/eureka/</span> <span class="comment"># 不解释了，上面解释过了</span></span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>访问7001和7002</p><p>如果像下图一样，7001中的DS Replicas中的是7002，7002中的是7001，就成功啦|ू･ω･` )</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523205332154.png" alt="image-20200523205332154"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523210126006.png" alt="image-20200523210126006"></p><h3 id="将订单80和订单服务提供者8001注册到eureka中"><a href="#将订单80和订单服务提供者8001注册到eureka中" class="headerlink" title="将订单80和订单服务提供者8001注册到eureka中"></a>将订单80和订单服务提供者8001注册到eureka中</h3><p>这一步很简单，只需要修改80和8001的yml配置文件即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span></span><br><span class="line">      <span class="comment"># 将defaultZone修改为多个注册地址即可，当然只填一个也是可以的，因为eureka集群会互相复制，但是如果刚好填的那一个eureka刚好没启动，服务就注册不上去了</span></span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>网址输入<a href="http://localhost:7001和http://localhost:7002">http://localhost:7001和http://localhost:7002</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523211213776.png" alt="image-20200523211213776"></p><h3 id="订单服务提供者8001的集群配置"><a href="#订单服务提供者8001的集群配置" class="headerlink" title="订单服务提供者8001的集群配置"></a>订单服务提供者8001的集群配置</h3><h4 id="新建8002"><a href="#新建8002" class="headerlink" title="新建8002"></a>新建8002</h4><p>参考8001</p><h4 id="修改yml-2"><a href="#修改yml-2" class="headerlink" title="修改yml"></a>修改yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span> <span class="comment"># 只需要修改端口号</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么不修改spring.application.name?</p><p>不仅不要修改，名称还必须一致。因为8001和8002的服务提供都是一样的，如果名称不一致那么就做不到负载均衡了</p></blockquote><h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><p>如果配置成功，可以看到下面出现了8001和8002</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523214156853.png" alt="image-20200523214156853"></p><h3 id="使用下单服务80去访问订单服务集群"><a href="#使用下单服务80去访问订单服务集群" class="headerlink" title="使用下单服务80去访问订单服务集群"></a>使用下单服务80去访问订单服务集群</h3><p>因为订单服务已经是集群了，并且注册到了eureka中，所以这里只需要访问订单服务名称(<strong>CLOUD-PAYMENT-SERVICE</strong>)即可</p><blockquote><p>由于这里写死的网址是配置在配置文件中，所以这里只需要修改配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;my-config.cloud-payment-url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String PAYMENT_URL;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my-config:</span></span><br><span class="line">  <span class="attr">cloud-payment-url:</span> <span class="string">http://CLOUD-PAYMENT-SERVICE</span> <span class="comment"># 修改为服务名称</span></span><br></pre></td></tr></table></figure></blockquote><p>这里出现了以下错误，是因为没有开启RestTemplate的负载均衡能力</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523214619780.png" alt="image-20200523214619780"></p><p><strong>开启方法：</strong></p><p>在之前的配置类中加入@LoadBalanced注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>在8001和8002的controller加一个标识，方便测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入成功,serverPost:&quot;</span>+port, i);</span><br><span class="line"><span class="comment">// 在返回json串的时候加入一下port</span></span><br></pre></td></tr></table></figure><p>访问80的请求地址，连续多访问几次，如果返回的json串中的port一直在切换，那就成功啦！！！</p><p>因为默认是使用轮询的方式完成的负载均衡</p><h2 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h2><h3 id="微服务名称修改"><a href="#微服务名称修改" class="headerlink" title="微服务名称修改"></a>微服务名称修改</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523220413283.png" alt="image-20200523220413283"></p><p>修改这里的名称，这里显示的主机名，这么显示一般不太好</p><p><strong>修改yml文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span> <span class="comment"># 添加这个属性</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523220814238.png" alt="image-20200523220814238"></p><p>这样就改掉了</p><h3 id="ip显示"><a href="#ip显示" class="headerlink" title="ip显示"></a>ip显示</h3><p>当鼠标放到微服务名称连接上时，不会出现ip地址，这样不利于调试排错</p><p><strong>修改yml文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 添加这个 显示ip地址</span></span><br></pre></td></tr></table></figure><h2 id="服务发现Disovery"><a href="#服务发现Disovery" class="headerlink" title="服务发现Disovery"></a>服务发现Disovery</h2><p>可通过DiscoveryClient类来获取服务的信息</p><p><strong>使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discovery.getServices(); <span class="comment">// 这个方法可以获取到eureka中注册的所有服务的名称</span></span><br><span class="line">    services.forEach((i)-&gt;&#123;</span><br><span class="line">        log.info(<span class="string">&quot;*********element&quot;</span>+i);</span><br><span class="line">    &#125;);</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discovery.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>); <span class="comment">// 这个方法中可以获取指定服务名称中的服务，因为服务有可能是多个，所以这里返回一个列表</span></span><br><span class="line">    instances.forEach((i)-&gt;&#123;</span><br><span class="line">        log.info(i.getServiceId()+<span class="string">&quot;, &quot;</span>+i.getHost()+<span class="string">&quot;, &quot;</span>+i.getPort()+<span class="string">&quot;, &quot;</span>+i.getUri());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discovery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在主配置类中加入@EnableDiscoveryClient注解，开启功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8002</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印结果</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523223307895.png" alt="image-20200523223307895"></p><h2 id="Eureka自我保护机制原理"><a href="#Eureka自我保护机制原理" class="headerlink" title="Eureka自我保护机制原理"></a>Eureka自我保护机制原理</h2><h3 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523223453312.png" alt="image-20200523223453312"></p><h3 id="导致原因"><a href="#导致原因" class="headerlink" title="导致原因"></a>导致原因</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523223834549.png" alt="image-20200523223834549"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523223858560.png" alt="image-20200523223858560"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523224153468.png" alt="image-20200523224153468"></p><h3 id="怎么禁止自我保护"><a href="#怎么禁止自我保护" class="headerlink" title="怎么禁止自我保护"></a>怎么禁止自我保护</h3><p>修改eureka7001的yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://eureka7002:7002/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001:7001/eureka/</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">      <span class="comment">#关闭自我保护机制，保证不可用服务被及时踢除 添加以下两个属性</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span> <span class="comment"># 收心跳包的间隔时间 ms</span></span><br></pre></td></tr></table></figure><p>修改8001的yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 显示ip地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------添加以下两个属性</span></span><br><span class="line">    <span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>关闭之后再访问eureka7001就会出现以下提示，提醒自我保护机制已经关闭了</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200523225802348.png" alt="image-20200523225802348"></p><p>关闭自我保护机制后，如果8001出现宕机或者网络延迟较久的话，7001就会立刻删除这个服务</p><h1 id="三、zookeeper服务注册与发现"><a href="#三、zookeeper服务注册与发现" class="headerlink" title="三、zookeeper服务注册与发现"></a>三、zookeeper服务注册与发现</h1><h2 id="使用zookeeper代替eureka"><a href="#使用zookeeper代替eureka" class="headerlink" title="使用zookeeper代替eureka"></a>使用zookeeper代替eureka</h2><h3 id="将订单服务提供者注册进zookeeper"><a href="#将订单服务提供者注册进zookeeper" class="headerlink" title="将订单服务提供者注册进zookeeper"></a>将订单服务提供者注册进zookeeper</h3><h4 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h4><p>看之前的zookeeper笔记</p><h4 id="新建cloud-provider-payment8004"><a href="#新建cloud-provider-payment8004" class="headerlink" title="新建cloud-provider-payment8004"></a>新建cloud-provider-payment8004</h4><p>参考8001</p><h4 id="修改pom文件-加入zookeeper的jar包"><a href="#修改pom文件-加入zookeeper的jar包" class="headerlink" title="修改pom文件, 加入zookeeper的jar包"></a>修改pom文件, 加入zookeeper的jar包</h4><p><strong>注意：因为spring-cloud-starter-zookeeper-discovery中会自带zookeeper3.5.3的jar包，如果测试的时候出现错误，请排除掉它自带的那个jar包，添加一个和安装的zookeeper版本相同的jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加zookeeper3.6.1版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a><strong>yml</strong></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.108</span><span class="string">:2181</span> <span class="comment"># 连接zookeeper的ip和端口号</span></span><br></pre></td></tr></table></figure><h4 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a><strong>测试</strong></h4><p>使用zkCli连接，查看根节点下是否出现了services节点，services节点下是否出现了刚刚注册的服务名称，服务名称下应该还会有一个序列号，查看序列号里的内容，如果里面的内容和配置对的上就ok啦。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524100642945.png" alt="image-20200524100642945"></p><h3 id="将服务消费者注册到zookeeper中"><a href="#将服务消费者注册到zookeeper中" class="headerlink" title="将服务消费者注册到zookeeper中"></a>将服务消费者注册到zookeeper中</h3><h4 id="创建cloud-customer-zk-order80"><a href="#创建cloud-customer-zk-order80" class="headerlink" title="创建cloud-customer-zk-order80"></a>创建cloud-customer-zk-order80</h4><p>参考80</p><p>其他步骤参考8004和代码，溜了</p><p>测试成功后znode里面会出现注册进去的服务</p><h1 id="四、consul服务注册与发现"><a href="#四、consul服务注册与发现" class="headerlink" title="四、consul服务注册与发现"></a>四、consul服务注册与发现</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://www.consul.io/">https://www.consul.io/</a></p><p><a href="https://www.springcloud.cc/spring-cloud-consul.html">中文文档</a></p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524103853662.png" alt="image-20200524103853662"></p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524104040484.png" alt="image-20200524104040484"></p><h3 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h3><p><a href="https://www.consul.io/downloads">https://www.consul.io/downloads</a></p><h2 id="安装并运行consul"><a href="#安装并运行consul" class="headerlink" title="安装并运行consul"></a>安装并运行consul</h2><p>下载liunx或windows版的consul</p><p>步骤都一样</p><ul><li><p>解压文件</p><ul><li>linux解压命令: <code>unzip zip文件</code></li></ul></li><li><p>放到一个全英文的路径里面去</p></li><li><p>控制台输入 ./consul –version 查看是否成功</p></li><li><p>启动：<code>./consul agent -dev</code></p></li></ul><p>ps: windows的就不要./了</p><p>启动之后输入ip:8500就ok啦</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524110833439.png" alt="image-20200524110833439"></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><h3 id="新建cloud-provider-payment8006"><a href="#新建cloud-provider-payment8006" class="headerlink" title="新建cloud-provider-payment8006"></a>新建cloud-provider-payment8006</h3><p>参考8004</p><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><p>注意：spring-boot-starter-actuator一定要导入，不然会有一个红叉叉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yml-1"><a href="#yml-1" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524113640405.png" alt="image-20200524113640405"></p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>参考zookeeper的80，具体的看代码，这里就不写了</p><h3 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h3><p>和8006的一样</p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">my-config:</span></span><br><span class="line">  <span class="attr">cloud-payment-url:</span> <span class="string">http://cloud-payment-service</span></span><br></pre></td></tr></table></figure><h2 id="三个注册中心的异同点"><a href="#三个注册中心的异同点" class="headerlink" title="三个注册中心的异同点"></a>三个注册中心的异同点</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524125743220.png" alt="image-20200524125743220"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524125945132.png" alt="image-20200524125945132"></p><h1 id="五、Ribbon负载均衡服务调用"><a href="#五、Ribbon负载均衡服务调用" class="headerlink" title="五、Ribbon负载均衡服务调用"></a>五、Ribbon负载均衡服务调用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524130743392.png" alt="image-20200524130743392"></p><h2 id="核心组件IRule"><a href="#核心组件IRule" class="headerlink" title="核心组件IRule"></a>核心组件IRule</h2><p>IRule算法：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524132523252.png" alt="image-20200524132523252"></p><h2 id="如何替换"><a href="#如何替换" class="headerlink" title="如何替换"></a>如何替换</h2><p>测试前提：要订单服务提供者的集群，不然看不出效果</p><h3 id="修改order80"><a href="#修改order80" class="headerlink" title="修改order80"></a>修改order80</h3><p>添加一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">iRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule(); <span class="comment">// 定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这个类不能被@ComponentScan给扫描到，否则这个规则会被所有的ribbon给扫描到，就达不到私有化定制的目的了</p><p>说人话就是：不要放在主配置类下面（因为@SpringBootApplication里面就有@ComponentScan）</p></blockquote><p>像这样，放在主配置类外面，不要和他同包，也不要放在同包的子包里面</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524135705933.png" alt="image-20200524135705933"></p><p>最后给主配置类加上如下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// 加我加我，看看孩子；name是需要定制规则的那个服务名称，configuration就是自定义的规则类</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试自己测，如果8001和8002的标识（标识前面加过了）随机出现就对了</p><h2 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524140916349.png" alt="image-20200524140916349"></p><h1 id="六、OpenFeign服务接口调用"><a href="#六、OpenFeign服务接口调用" class="headerlink" title="六、OpenFeign服务接口调用"></a>六、OpenFeign服务接口调用</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524144034245.png" alt="image-20200524144034245"></p><h3 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524144259064.png" alt="image-20200524144259064"></p><h3 id="OpenFegin和Fegin两者之间的区别"><a href="#OpenFegin和Fegin两者之间的区别" class="headerlink" title="OpenFegin和Fegin两者之间的区别"></a>OpenFegin和Fegin两者之间的区别</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524144717167.png" alt="image-20200524144717167"></p><h2 id="OpenFeign使用步骤"><a href="#OpenFeign使用步骤" class="headerlink" title="OpenFeign使用步骤"></a>OpenFeign使用步骤</h2><h3 id="新建cloud-customer-openfeign-order80"><a href="#新建cloud-customer-openfeign-order80" class="headerlink" title="新建cloud-customer-openfeign-order80"></a>新建cloud-customer-openfeign-order80</h3><p>参考cloud-customer-order80</p><h4 id="pom-2"><a href="#pom-2" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml-2"><a href="#yml-2" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span> <span class="comment"># 也可以不配集群</span></span><br></pre></td></tr></table></figure><h4 id="添加一个service"><a href="#添加一个service" class="headerlink" title="添加一个service"></a>添加一个service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 标注是哪个服务里面的</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/&#123;id&#125;&quot;)</span> <span class="comment">// 这个需要和订单提供者的请求地址一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPlaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改controller"><a href="#修改controller" class="headerlink" title="修改controller"></a>修改controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 直接调用service</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPlaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改主配置类"><a href="#修改主配置类" class="headerlink" title="修改主配置类"></a>修改主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 加我(*^▽^*)开启功能</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h4><p>还是和以前一样测一下接口能不能访问得到就好啦</p><h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h2><p>openFeign默认超时时间为1秒钟，如果超时就会报错。这里在订单服务提供方那里写了个等待3秒的方法。具体的看代码</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524153136502.png" alt="image-20200524153136502"></p><h3 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h3><p>由于openfeign底层是使用的ribbon来做的管理，所以可以通过配置ribbon来解决</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在80的yml中加入以下配置</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span> <span class="comment"># 因为8001延迟三秒，所以这边也加长一点</span></span><br><span class="line">  <span class="comment"># 指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h2 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524154834154.png" alt="image-20200524154834154"></p><h3 id="开启步骤"><a href="#开启步骤" class="headerlink" title="开启步骤"></a>开启步骤</h3><p>以下修改都是在80里面修改的</p><h3 id="向容器中注入Logger-Level"><a href="#向容器中注入Logger-Level" class="headerlink" title="向容器中注入Logger.Level"></a>向容器中注入Logger.Level</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改yml-3"><a href="#修改yml-3" class="headerlink" title="修改yml"></a>修改yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.ll.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524155826147.png" alt="image-20200524155826147"></p><h1 id="七、Hystrix"><a href="#七、Hystrix" class="headerlink" title="七、Hystrix"></a>七、Hystrix</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524160650509.png" alt="image-20200524160650509"></p><h3 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200524160815102.png" alt="image-20200524160815102"></p><h2 id="star2-Hystrix重要概念"><a href="#star2-Hystrix重要概念" class="headerlink" title=":star2:Hystrix重要概念"></a>:star2:Hystrix重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><blockquote><p>  服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示， fallback</p></blockquote><p><strong>哪些情况会出现服务降级</strong></p><ul><li><p>  程序运行异常</p></li><li><p>  超时</p></li><li><p>  服务熔断触发服务降级</p></li><li><p>  线程池/信号量打满也会导致服务降级</p></li></ul><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><blockquote><p>  类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电然后调用服务降级的方法并返回友好提示</p><p>  服务的降级 -&gt; 进而熔断 -&gt;恢复调用链路</p></blockquote><h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><h2 id="star2-Hystrix案例"><a href="#star2-Hystrix案例" class="headerlink" title=":star2:Hystrix案例"></a>:star2:Hystrix案例</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h4 id="创建cloud-provider-hystrix-payment8001"><a href="#创建cloud-provider-hystrix-payment8001" class="headerlink" title="创建cloud-provider-hystrix-payment8001"></a>创建cloud-provider-hystrix-payment8001</h4><p>参考8001</p><h4 id="pom-3"><a href="#pom-3" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml-3"><a href="#yml-3" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka/,http://eureka7002:7002/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 显示ip地址</span></span><br></pre></td></tr></table></figure><h4 id="测试-8"><a href="#测试-8" class="headerlink" title="测试"></a>测试</h4><p>记得写controller再测试，只要能访问成功就好啦:laughing:</p><h3 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h3><h4 id="jmeter压测测试"><a href="#jmeter压测测试" class="headerlink" title="jmeter压测测试"></a>jmeter压测测试</h4><p>用jmeter测试，使用200个线程访问100次，也就是两万个请求去访问8001，这时候再在网页上发起请求可以看到有明显的卡顿了</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/1.gif"></p><h4 id="看热闹不嫌事大，加入80"><a href="#看热闹不嫌事大，加入80" class="headerlink" title="看热闹不嫌事大，加入80"></a>看热闹不嫌事大，加入80</h4><h5 id="新建一个cloud-consumer-feign-hystrix-order80"><a href="#新建一个cloud-consumer-feign-hystrix-order80" class="headerlink" title="新建一个cloud-consumer-feign-hystrix-order80"></a>新建一个cloud-consumer-feign-hystrix-order80</h5><p>参考之前的80</p><h5 id="pom-4"><a href="#pom-4" class="headerlink" title="pom"></a>pom</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="yml-4"><a href="#yml-4" class="headerlink" title="yml"></a>yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>controller里面访问8001，具体的看代码</p><p>将80启动，我们再启动jmeter去压测8001，同时我们在网页去访问80，因为80调用了8001，所以80的调8001的那个服务响应的时间也变慢了，如果运气好的话还可能会碰到超时，因为feign默认是超时时间是1秒</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525084915511.png" alt="image-20200525084915511"></p><h3 id="故障现象和导致原因"><a href="#故障现象和导致原因" class="headerlink" title="故障现象和导致原因"></a>故障现象和导致原因</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525085220088.png" alt="image-20200525085220088"></p><h3 id="上述结论"><a href="#上述结论" class="headerlink" title="上述结论"></a>上述结论</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525090403534.png" alt="image-20200525090403534"></p><h3 id="如何解决？解决的要求"><a href="#如何解决？解决的要求" class="headerlink" title="如何解决？解决的要求"></a>如何解决？解决的要求</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525090301764.png" alt="image-20200525090301764"></p><h3 id="star-服务降级"><a href="#star-服务降级" class="headerlink" title=":star:服务降级"></a>:star:服务降级</h3><h4 id="降级配置"><a href="#降级配置" class="headerlink" title="降级配置"></a>降级配置</h4><p>使用@HystrixCommand</p><h4 id="8001自身"><a href="#8001自身" class="headerlink" title="8001自身"></a>8001自身</h4><p>设置自身超时时间峰值，峰值内正常运行，超过了需要有兜底方案，做服务降级fallbake</p><h4 id="8001fallback"><a href="#8001fallback" class="headerlink" title="8001fallback"></a>8001fallback</h4><p>修改service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用@HystrixCommand来指定兜底方案，当发生异常会自动调用timeoutHandle</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;timeoutHandle&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        // 这里设置超时时间</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeout = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 这里故意弄一个异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 超时5秒</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(timeout);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString()+<span class="string">&quot;  超时&quot;</span>+timeout+<span class="string">&quot;秒&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">timeoutHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;呜呜呜，系统繁忙&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok   &quot;</span>+UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用@HystrixCommand需要在主配置类中添加@EnableCircuitBreaker注解开启功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrisMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrisMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="80fallbake"><a href="#80fallbake" class="headerlink" title="80fallbake"></a>80fallbake</h4><h5 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h5><p>我们自己配置过的热部署方式对ava代码的改动明显，</p><p>但对＠Hystrix Command内属性的修改建议重启微服务</p><h5 id="业务类-1"><a href="#业务类-1" class="headerlink" title="业务类"></a>业务类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/order/payment/timeout&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;timeoutHandle&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.timeout();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">timeoutHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;qwq&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主配置类"><a href="#主配置类" class="headerlink" title="主配置类"></a>主配置类</h5><p>添加@EnableHystrix注解，开启功能</p><h4 id="目前问题"><a href="#目前问题" class="headerlink" title="目前问题"></a>目前问题</h4><p>每个业务方法对应一个兜底的方法，代码膨胀</p><p>统一和自定义的分开</p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><h5 id="每个方法配置一个？？？膨胀"><a href="#每个方法配置一个？？？膨胀" class="headerlink" title="每个方法配置一个？？？膨胀"></a>每个方法配置一个？？？膨胀</h5><p><strong>＠Default Properties（defaultFallback=““）</strong></p><p><strong>说明：</strong></p><blockquote><p>  1:1每个方法配置一个服务降级方法，技术上可以，实际上傻X</p><p>  1:N除了个别重要核心业务有专属，其它普通的可以通过＠ DefaultProperties（default Fallback=“）统一跳转到统—处理结果页面</p><p>  通用的和独享的各自分开，避兔了代码膨胀，合理减少了代码量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// 加上这个注解配置全局属性，这里配置了一个默认的处理方法</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;globalHandle&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/payment/ok&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/payment/timeout&quot;)</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = &quot;timeoutHandle&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;)</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">// 当未指定fallbackMethod的时候就会调用默认的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.timeout();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">timeoutHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;qwq&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">globalHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全局处理异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="和业务逻辑混一起？？？混乱"><a href="#和业务逻辑混一起？？？混乱" class="headerlink" title="和业务逻辑混一起？？？混乱"></a>和业务逻辑混一起？？？混乱</h5><ul><li><p>  服务降级，客户端去调用服务端，碰上服务端宕机或关闭</p></li><li><p>本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系</p><p>  只需要为 Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</p></li><li><p>未来我们要面对的异常</p><ul><li>  运行</li><li>  超时</li><li>  宕机</li></ul></li></ul><p><strong>修改cloud-consumer-feign-hystrix-order80</strong></p><blockquote><p>  根据cloud-consumer-feign-hystrix-order80已经有的PaymentHystrixService接口，重新新建一个类（ <strong>PaymentFallbackService</strong>）实现该接口，统一为接口里面的方法进行异常处理</p></blockquote><ul><li><p><strong>yml</strong></p><ul><li>```yml<br>  feign:<pre><code>hystrix:  enabled: true # 开启feign对hystrix的支持</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+   PaymentFallbackService</span><br><span class="line"></span><br><span class="line">    +   &#96;&#96;&#96;java</span><br><span class="line">        @Component</span><br><span class="line">        public class PaymentFallbackService implements PaymentFeignService &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String ok() &#123;</span><br><span class="line">                return &quot;not ok!!! qwq&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            @Override</span><br><span class="line">            public String timeout() &#123;</span><br><span class="line">                return &quot;timeout qwq&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PaymentFeignService接口</p><ul><li>```java<br>  @Component<br>  // 添加一个fallback属性，指定出现异常时的兜底方案<br>  @FeignClient(value = “CLOUD-PAYMENT-SERVICE”, fallback = PaymentFallbackService.class)<br>  public interface PaymentFeignService {<pre><code>  @GetMapping(&quot;/payment/ok&quot;)  String ok();  @GetMapping(&quot;/payment/timeout&quot;)  String timeout();</code></pre>  }  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### :star:服务熔断</span><br><span class="line"></span><br><span class="line">#### 是什么</span><br><span class="line"></span><br><span class="line">&gt;   熔断机制概述</span><br><span class="line">&gt;</span><br><span class="line">&gt;   熔断机制是应对雪崩效应的种微服务链路保护机制。当扇岀链路的某个微服务出错不可用或者晌应时间太长时，</span><br><span class="line">&gt;</span><br><span class="line">&gt;   会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。</span><br><span class="line">&gt;</span><br><span class="line">&gt;   当检测到该节点微服务调用响应正常后，恢复调用链路</span><br><span class="line">&gt;</span><br><span class="line">&gt;   在 Spring Cloud框架里，熔断机制通过 Hystrix实现。 Hystrix会监控微服务间调用的状况，</span><br><span class="line">&gt;</span><br><span class="line">&gt;   当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是＠HystrixCommand。</span><br><span class="line"></span><br><span class="line">#### 实操</span><br><span class="line"></span><br><span class="line">**修改coud-provider-hystrix-payment8001**</span><br><span class="line"></span><br><span class="line">+   PaymentService</span><br><span class="line"></span><br><span class="line">    在PaymentService添加以下方法</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;java</span><br><span class="line">    &#x2F;&#x2F;--------服务熔断</span><br><span class="line">    @HystrixCommand(fallbackMethod &#x3D; &quot;paymentCircuitBreaker_fallback&quot;,commandProperties &#x3D; &#123;</span><br><span class="line">        @HystrixProperty(name &#x3D; &quot;circuitBreaker.enabled&quot;,value &#x3D; &quot;true&quot;),&#x2F;&#x2F; 是否开启断路器</span><br><span class="line">        @HystrixProperty(name &#x3D; &quot;circuitBreaker.requestVolumeThreshold&quot;,value &#x3D; &quot;10&quot;),&#x2F;&#x2F; 请求次数</span><br><span class="line">        @HystrixProperty(name &#x3D; &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value &#x3D; &quot;10000&quot;), &#x2F;&#x2F; 时间窗口期</span><br><span class="line">        @HystrixProperty(name &#x3D; &quot;circuitBreaker.errorThresholdPercentage&quot;,value &#x3D; &quot;60&quot;),&#x2F;&#x2F; 失败率达到多少后跳闸</span><br><span class="line">    &#125;)</span><br><span class="line">    public String paymentCircuitBreaker(Integer id)</span><br><span class="line">    &#123;</span><br><span class="line">        if(id &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            throw new RuntimeException(&quot;******id 不能负数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String serialNumber &#x3D; IdUtil.simpleUUID();</span><br><span class="line">    </span><br><span class="line">        return Thread.currentThread().getName()+&quot;\t&quot;+&quot;调用成功，流水号: &quot; + serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    public String paymentCircuitBreaker_fallback(Integer id)</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;id 不能负数，请稍后再试，&#x2F;(ㄒoㄒ)&#x2F;~~   id: &quot; +id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PaymentController</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/break/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">breaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentCircuitBreaker(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>  测试：在10次请求中如果有6次及以上的错误，就会触发熔断，这时再次发送正确的请求也会返回fallbake提示</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>熔断类型：</strong></p><ul><li><p>  熔断打开：请求不再进行调用当前服务，内部设罩时钟一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</p></li><li><p>  熔断关闭：熔断关闭不会对服务进行熔断</p></li><li><p>  熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p></li></ul><h4 id="官网断路器流程"><a href="#官网断路器流程" class="headerlink" title="官网断路器流程"></a>官网断路器流程</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525113443796.png" alt="image-20200525113443796"></p><h5 id="断路器在什么状态下起作用"><a href="#断路器在什么状态下起作用" class="headerlink" title="断路器在什么状态下起作用"></a>断路器在什么状态下起作用</h5><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525113549607.png" alt="image-20200525113549607"></p><h5 id="断路器开启或关闭的条件"><a href="#断路器开启或关闭的条件" class="headerlink" title="断路器开启或关闭的条件"></a>断路器开启或关闭的条件</h5><ol><li><p> 当满足一定的阀值的时候（默认10秒内超过20个请求次数）</p></li><li><p> 当失败率达到一定的时候（默认10秒内超过50％的请求失败）</p></li><li><p> 到达以上阀值，断路器将会开启</p></li><li><p> 当开启的时候，所有请求都不会进行转发</p></li><li><p> 一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。</p></li><li><p> 如果成功，断路器会关闭，若失败，继续开启。重复4和5</p></li></ol><h5 id="断路器打开之后"><a href="#断路器打开之后" class="headerlink" title="断路器打开之后"></a>断路器打开之后</h5><ol><li><p> 再有请求调用的时候，将不会调用主逻辑，而是直接调用降级 fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少晌应延迟的效果</p></li><li><p>原来的主逻辑要如何恢复呢？</p><p> 对于这一问题， hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后， hystrix会启动—个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将会闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p></li></ol><h3 id="服务监控-hystrixDashboard"><a href="#服务监控-hystrixDashboard" class="headerlink" title="服务监控 hystrixDashboard"></a>服务监控 hystrixDashboard</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><blockquote><p>  除了隔离依赖服务的调用以外, Hystriⅸ还提供了准实时的调用监控( Hystrix Dashboard), Hystrix会持续地记录所有通过 Hystⅸ发  起的请求的执行信息,并以统计报表和图形的形式展示给用户,包括每秒执行多少请求多少成功,多少失败等。 Netflix通过  hystrix-metrIcs-event-stream项目实现了对以上指标的监控。 Spring Cloud也提供了 Hystrix Dashboard的整合,对监控内容转化成可视化界面。</p></blockquote><h4 id="仪表盘9001"><a href="#仪表盘9001" class="headerlink" title="仪表盘9001"></a>仪表盘9001</h4><ol><li><p><strong>新建cloud-consumer-hystrixdashboard9001</strong></p><ol><li><p>```xml</p> <dependency>     <groupId>org.springframework.cloud</groupId>     <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId> </dependency> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.  &#96;&#96;&#96;yaml</span><br><span class="line">    server:</span><br><span class="line">      port: 9001</span><br></pre></td></tr></table></figure></li><li><p>```java<br> @SpringBootApplication<br> // 使用这个注解开启Hystrix图形监控功能<br> @EnableHystrixDashboard<br> public class HystrixDashboardMain9001 {</p><pre><code> public static void main(String[] args) &#123;     SpringApplication.run(HystrixDashboardMain9001.class, args); &#125;</code></pre><p> }</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    4.  访问：http:&#x2F;&#x2F;localhost:9001&#x2F;hystrix</span><br><span class="line"></span><br><span class="line">        如果出现以下界面则成功</span><br><span class="line"></span><br><span class="line">        ![image-20200525155420212](README.assets&#x2F;image-20200525155420212.png)</span><br><span class="line"></span><br><span class="line">#### 断路器演示(服务监控 hystrixDashboard)</span><br><span class="line"></span><br><span class="line">#### 9001监控8001</span><br><span class="line"></span><br><span class="line">**修改8001**</span><br><span class="line"></span><br><span class="line">&gt;   添加这个组件到容器里面</span><br><span class="line">&gt;</span><br><span class="line">&gt;   &#96;&#96;&#96;java</span><br><span class="line">&gt;   &#x2F;**</span><br><span class="line">&gt;        *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span><br><span class="line">&gt;        *ServletRegistrationBean因为springboot的默认路径不是&quot;&#x2F;hystrix.stream&quot;，</span><br><span class="line">&gt;        *只要在自己的项目里配置上下面的servlet就可以了</span><br><span class="line">&gt;        *&#x2F;</span><br><span class="line">&gt;   @Bean</span><br><span class="line">&gt;   public ServletRegistrationBean getServlet() &#123;</span><br><span class="line">&gt;       HystrixMetricsStreamServlet streamServlet &#x3D; new HystrixMetricsStreamServlet();</span><br><span class="line">&gt;       ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(streamServlet);</span><br><span class="line">&gt;       registrationBean.setLoadOnStartup(1);</span><br><span class="line">&gt;       registrationBean.addUrlMappings(&quot;&#x2F;hystrix.stream&quot;);</span><br><span class="line">&gt;       registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);</span><br><span class="line">&gt;       return registrationBean;</span><br><span class="line">&gt;   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>  如果不加就会出现这个错误<code>Unable to connect to Command Metric Stream.</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525162858622.png" alt="image-20200525162858622"></p><p>  测试：在框框里输入要监控的微服务，http://微服务地址/hystrix.stream</p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525163340606.png" alt="image-20200525163340606"></p><p>  成功之后就会进入到仪表盘的界面：</p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525163637779.png" alt="image-20200525163637779"></p></blockquote></li></ol></li></ol><h5 id="如何看"><a href="#如何看" class="headerlink" title="如何看"></a>如何看</h5><h6 id="一圈"><a href="#一圈" class="headerlink" title="一圈"></a>一圈</h6><blockquote><p>  实心圆:共有两种含义。它通过颜色的变化代表了实例的健康程度,它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减 </p><p>  该实心圆除了颜色的变化之外,它的大小也会根据实例的请求流量发生变化,流量越大该实心圆就越大。所以通过该实心圆的展示,就  可以在大量的实例中快速的发现<strong>故障实例和高压力实例。</strong></p></blockquote><h6 id="一线"><a href="#一线" class="headerlink" title="一线"></a>一线</h6><p>曲线：用来记录2分钟内流量的相对变化,可以通过它来观察到流量的上升和下降趋势。</p><h6 id="整图说明"><a href="#整图说明" class="headerlink" title="整图说明"></a>整图说明</h6><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525161705175.png" alt="image-20200525161705175"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525161722240.png" alt="image-20200525161722240"></p><h3 id="star-服务限流"><a href="#star-服务限流" class="headerlink" title=":star:服务限流"></a>:star:服务限流</h3><h1 id="八、GateWay新一代网关"><a href="#八、GateWay新一代网关" class="headerlink" title="八、GateWay新一代网关"></a>八、GateWay新一代网关</h1><h2 id="概述简介"><a href="#概述简介" class="headerlink" title="概述简介"></a>概述简介</h2><h3 id="是什么-4"><a href="#是什么-4" class="headerlink" title="是什么"></a>是什么</h3><blockquote><p>  Gateway是在 Spring生态系统之上构建的AP网关服务,基于 Spring5, Spring Boot2和 Project Reactor等技术  Gateway旨在提供_种简单而有效的方式来对AP进行路由,以提供些强大的过滤器功能,例如:熔断、限流、重试等</p><p>  SpringCloud Gateway 是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p><p>  Spring Cloud Gateway作为 Spring Cloud生态系统中的网关,目标是替代zuul,在 Spring Cloud2.0以上版本中,没有对新版本的zuul2.0以上最新高性能版本进行集成,仍然还是使用的zuul 1.x非 Reactor模式的老版本。而为了提升网关的性能, SpringCloud Gateway是基于 WebFluxl框架实现的,而 WebFlux框架底层则使用了高性能的 Reactor模式通信框架Netty</p><p>  Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter 链的方式提供了网关基本的功能,例如:安全,监控/指标,和限流</p></blockquote><p><strong>一句话：</strong> Spring Cloud Gateway使用的 Webflux中的reactor-netty响应式编程组件,底层使用了 Netty 通讯框架。</p><h3 id="能干嘛-2"><a href="#能干嘛-2" class="headerlink" title="能干嘛"></a>能干嘛</h3><ul><li>  反向代理</li><li>  鉴权</li><li>  流量</li><li>  控制</li><li>  熔断</li><li>  日志监控</li><li>  。。。</li></ul><h3 id="微服务架构中网关在哪里"><a href="#微服务架构中网关在哪里" class="headerlink" title="微服务架构中网关在哪里"></a>微服务架构中网关在哪里</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525170114159.png" alt="image-20200525170114159"></p><h2 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h2><h3 id="Route-路由"><a href="#Route-路由" class="headerlink" title="Route(路由)"></a>Route(路由)</h3><p>路由是构建网关的基本模块,它由ID,目标URI,一系列的断言和过滤器组成,如果断言为true则匹配该路由</p><h3 id="Predicate-断言"><a href="#Predicate-断言" class="headerlink" title="Predicate(断言)"></a>Predicate(断言)</h3><p>参考的是Java8的java.util.function.Predicate<br>开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p><h3 id="Filter-过滤"><a href="#Filter-过滤" class="headerlink" title="Filter(过滤)"></a>Filter(过滤)</h3><p>指的是 Spring框架中 Gateway Filter的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改。</p><h3 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525171426906.png" alt="image-20200525171426906"></p><p>web请求，通过一些匹配条件，定位到真止的服务节点。并在这个转发过程的前后，进行一些精细化控制。<br>predicate就是我们的匹配条件；而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</p><h2 id="Gateway工作流程"><a href="#Gateway工作流程" class="headerlink" title="Gateway工作流程"></a>Gateway工作流程</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200525171907990.png" alt="image-20200525171907990"></p><blockquote><p>  客户端向 Spring Cloud Gateway发出请求。然后在 Gateway Handler Mapping中找到与请求相匹配的路由,将其发送到 Gateway  Web Handler.      </p><p>  Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑,然后返回。  </p><p>  过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前(“pre”)或之后(post”)执行业务逻辑。      </p><p>  Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等,  在“post类型的过滤器中可以做响应内容、响应头的修改,日志的输出,流量监控等有着非常重要的作用。</p></blockquote><p><strong>核心逻辑：</strong> 路由转发+执行过滤器链</p><h2 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h2><h3 id="新建-Module"><a href="#新建-Module" class="headerlink" title="新建 Module"></a>新建 Module</h3><p>cloud-gateway-gateway9527</p><h4 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h4><p><strong>注意：gateway不需要web和actuator包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YML"><a href="#YML" class="headerlink" title="YML"></a>YML</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001:7001/eureka</span></span><br></pre></td></tr></table></figure><h4 id="业务类-2"><a href="#业务类-2" class="headerlink" title="业务类"></a>业务类</h4><p>网关莫得业务，嘿嘿嘿:laughing:</p><h4 id="主启动类-2"><a href="#主启动类-2" class="headerlink" title="主启动类"></a>主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9527网关如何做路由映射那"><a href="#9527网关如何做路由映射那" class="headerlink" title="9527网关如何做路由映射那??"></a>9527网关如何做路由映射那??</h4><p>8001 的 controller 的两个请求路径/payment/ok和/payment/break</p><p>我们目前不想暴露8001端口,希望在8001外面套一层9527</p><p>看下面的配置:arrow_double_down:</p><h4 id="YML新增网关配置"><a href="#YML新增网关配置" class="headerlink" title="YML新增网关配置"></a>YML新增网关配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="comment">#----------从这里开始就是对路由的配置啦</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/ok</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/break/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001:7001/eureka</span></span><br></pre></td></tr></table></figure><h4 id="测试-9"><a href="#测试-9" class="headerlink" title="测试"></a>测试</h4><h4 id="YML配置说明"><a href="#YML配置说明" class="headerlink" title="YML配置说明"></a>YML配置说明</h4><p>gateway的网关路由配置方式有两种</p><ul><li><p>第一种是yaml配置</p><ul><li>  看前面的配置😒</li></ul></li><li><p>第二种是代码中注入Routelocator的Bean</p><ul><li>```java<br>  // 输入<a href="http://localhost:9527/guonei%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E5%8F%91%E5%88%B0http://news.baidu.com/guonei">http://localhost:9527/guonei会自动转发到http://news.baidu.com/guonei</a><br>  @Configuration<br>  public class GateWayConfig<br>  {<pre><code>  @Bean  public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder)  &#123;      RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();      routes.route(&quot;path_route_atguigu&quot;,              r -&gt; r.path(&quot;/guonei&quot;)                      .uri(&quot;http://news.baidu.com/guonei&quot;)).build();      return routes.build();  &#125;</code></pre>  }  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    +   &lt;img src&#x3D;&quot;README.assets&#x2F;2.gif&quot; alt&#x3D;&quot;qwq&quot; style&#x3D;&quot;zoom:200%;&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 通过微服务名实现动态路由</span><br><span class="line"></span><br><span class="line">&gt;   默认情况下 Gateway会根据注册中心注册的服务列表,  以注册中心上微服务名为路径创建动态路由进行转发,从而实现动态路由的功能</span><br><span class="line"></span><br><span class="line">测试条件：7001和8001、8002</span><br><span class="line"></span><br><span class="line">**yml**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;yaml</span><br><span class="line">server:</span><br><span class="line">  port: 9527</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br><span class="line">      routes:</span><br><span class="line">      - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br><span class="line">        uri: lb:&#x2F;&#x2F;cloud-payment-service #匹配后提供服务的路由地址</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;payment&#x2F;ok         # 断言，路径相匹配的进行路由</span><br><span class="line"></span><br><span class="line">      - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br><span class="line">        uri: lb:&#x2F;&#x2F;cloud-payment-service #匹配后提供服务的路由地址</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;payment&#x2F;timeout         # 断言，路径相匹配的进行路由</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: cloud-gateway-service</span><br><span class="line">  client: #服务提供者provider注册进eureka服务列表内</span><br><span class="line">    service-url:</span><br><span class="line">      register-with-eureka: true</span><br><span class="line">      fetch-registry: true</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001:7001&#x2F;eureka</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>测试</strong></p><p>网址输入：<a href="http://localhost:9527/payment/ok">http://localhost:9527/payment/ok</a></p><p>看看有没有交替出现8001和8002的端口号</p><h2 id="Predicate的使用"><a href="#Predicate的使用" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/20190422215919986.png" alt="在这里插入图片描述"></p><h3 id="AfterRoutePredicateFactory"><a href="#AfterRoutePredicateFactory" class="headerlink" title="AfterRoutePredicateFactory"></a>AfterRoutePredicateFactory</h3><p> 时间类型的Predicate （AfterRoutePredicateFactory BeforeRoutePredicateFactory BetweenRoutePredicateFactory），当只有满足特定时间要求的请求会进入到此predicate中，并交由router处理。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p>predicates：</p><p><code>- After=2017-01-20T17:42:47.789-07:00[America/Denver]</code> 会被解析成PredicateDefinition对象 <code>（name =After ，args= 2017-01-20T17:42:47.789-07:00[America/Denver]）</code>。predicates的配置，遵循的约定大于配置的思想，这个After就是指定了它的处理类为AfterRoutePredicateFactory，同理，其他类型的predicate也遵循这个规则。</p><p>当请求的时间在这个配置的时间之后，请求会被路由到 <a href="http://example.org/">http://example.org</a></p><p> 启动工程，在浏览器上访问 <a href="http://localhost:8081/%EF%BC%8C%E4%BC%9A%E6%98%BE%E7%A4%BA">http://localhost:8081/，会显示</a> <a href="http://example.org/">http://example.org</a> 返回的结果，此时gateway路由到了配置的uri。如果我们将配置的时间设置到当前时之后，浏览器会显示404，此时证明没有路由到配置的uri。</p><h3 id="CookieRoutePredicateFactory"><a href="#CookieRoutePredicateFactory" class="headerlink" title="CookieRoutePredicateFactory"></a>CookieRoutePredicateFactory</h3><p> cookie类型的<code>CookieRoutePredicateFactory</code>，指定的cookie满足正则匹配，才会进入此router。<br>CookieRoute <code>PredicateFactory</code>需要2个参数，一个是cookie名字，另一个是值也可以是正则表达式。它用于匹配请求中，带有该名称的cookie和cookie匹配正则表达式的请求。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=name,</span> <span class="string">forezp</span></span><br></pre></td></tr></table></figure><p>在上面的配置中，请求带有cookie名为name, cookie值为forezp 的请求将都会转发到uri为 <a href="http://example.org/">http://example.org</a> 的地址上。</p><p>使用curl命令进行请求，在请求中带上 cookie，会返回正确的结果，否则，请求报404错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -H <span class="string">&#x27;Cookie:name=forezp&#x27;</span> localhost:8081</span></span><br></pre></td></tr></table></figure><h3 id="HeaderRoutePredicateFactory"><a href="#HeaderRoutePredicateFactory" class="headerlink" title="HeaderRoutePredicateFactory"></a>HeaderRoutePredicateFactory</h3><p> <code>HeaderRoutePredicateFactory</code>需要2个参数，一个是header名，另外一个header值，该值可以是一个正则表达式。当此断言匹配了请求的header名和值时，断言通过，进入到router的规则中去。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">         <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">         <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p> 在上面的配置中，当请求的Header中有X-Request-Id的header名，且header值为数字时，请求会被路由到配置的 uri. 使用curl执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -H <span class="string">&#x27;X-Request-Id:1&#x27;</span> localhost:8081</span></span><br></pre></td></tr></table></figure><p>执行命令后，会正确的返回请求结果。如果在请求中没有带上X-Request-Id的header名，并且值不为数字时，请求就会报404，路由没有被正确转发。</p><h3 id="HostRoutePredicateFactory"><a href="#HostRoutePredicateFactory" class="headerlink" title="HostRoutePredicateFactory"></a>HostRoutePredicateFactory</h3><p> <code>HostRoutePredicateFactory</code>需要一个参数即hostname，它可以使用. * 等去匹配host。这个参数会匹配请求头中的host的值，一致，则请求正确转发。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org</span></span><br></pre></td></tr></table></figure><p> 在上面的配置中，请求头中含有Host为somehost.org的请求将会被路由转发转发到配置的uri。 启动工程，执行以下的curl命令，请求会返回正确的请求结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">-H</span> <span class="string">&#x27;Host:www.somehost.org&#x27;</span> <span class="string">localhost:8081</span></span><br></pre></td></tr></table></figure><h3 id="MethodRoutePredicateFactory"><a href="#MethodRoutePredicateFactory" class="headerlink" title="MethodRoutePredicateFactory"></a>MethodRoutePredicateFactory</h3><p> <code>MethodRoutePredicateFactory</code> 需要一个参数，即请求的类型。比如GET类型的请求都转发到此路由。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure><p> 在上面的配置中，所有的GET类型的请求都会路由转发到配置的uri。使用 curl命令模拟 get类型的请求，会得到正确的返回结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8081</span></span><br></pre></td></tr></table></figure><p>使用 curl命令模拟 post请求，则返回404结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST localhost:8081</span></span><br></pre></td></tr></table></figure><h3 id="PathRoutePredicateFactory"><a href="#PathRoutePredicateFactory" class="headerlink" title="PathRoutePredicateFactory"></a>PathRoutePredicateFactory</h3><p> <code>PathRoutePredicateFactory</code> 需要一个参数: 一个spel表达式，应用匹配路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/foo/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p> 在上面的配置中，所有的请求路径满足/foo/{segment}的请求将会匹配并被路由，比如/foo/1 、/foo/bar的请求，将会命中匹配，并成功转发。<br> 使用curl模拟一个请求localhost:8081/foo/dew，执行之后会返回正确的请求结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8081/foo/dew</span></span><br></pre></td></tr></table></figure><h3 id="QueryRoutePredicateFactory"><a href="#QueryRoutePredicateFactory" class="headerlink" title="QueryRoutePredicateFactory"></a>QueryRoutePredicateFactory</h3><p> <code>QueryRoutePredicateFactory</code> 需要2个参数:一个参数名和一个参数值的正则表达式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></span><br></pre></td></tr></table></figure><p>在上面的配置文件中，配置了请求中含有参数foo，并且foo的值匹配ba.，则请求命中路由，比如一个请求中含有参数名为foo，值的为bar，能够被正确路由转发。<br> 模拟请求的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8081?foo=bar</span></span><br></pre></td></tr></table></figure><p> <code>QueryRoutePredicateFactory</code>也可以只填一个参数，填一个参数时，则只匹配参数名，即请求的参数中含有配置的参数名，则命中路由。<br> 比如以下的配置中，配置了请求参数中含有参数名为foo 的参数将会被请求转发到uri为 <a href="http://example.org/">http://example.org</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">         <span class="attr">uri:</span> <span class="string">http://example.org</span></span><br><span class="line">         <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Query=foo</span></span><br></pre></td></tr></table></figure><p> 总之每一种predicate都会对当前的客户端请求进行判断，是否满足当前的要求，如果满足则交给当前请求处理。如果有很多个Predicate，并且一个请求满足多个Predicate，则按照配置的顺序第一个生效。具体的可以在官网文档查看：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RC3/single/spring-cloud-gateway.html#gateway-starter">SpringCloudGateWay官网地址</a></p><h2 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h2><h3 id="是什么-5"><a href="#是什么-5" class="headerlink" title="是什么"></a>是什么</h3><blockquote><p>  路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。</p><p>  Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p></blockquote><h3 id="spring-cloud-gateway-的-filter"><a href="#spring-cloud-gateway-的-filter" class="headerlink" title="spring cloud gateway 的 filter"></a>spring cloud gateway 的 filter</h3><p>spring cloud gateway 的 filter都只有两种</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>  pre</li><li>  post</li></ul><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li><p>Gateway Filter</p><blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>  在<a href="http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_gatewayfilter_factories">【spring cloud gateway】</a>的官方文档中，是这样说明GatewayFilterFactory的：</p><blockquote><p>  <strong>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</strong></p></blockquote><ul><li>  路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应；</li><li>  GatewayFilter不同于GlobalFilter，它只作用于指定的路由；</li><li>  spring cloud gateway中内置了大量的网关过滤器工厂；</li></ul><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><p>  内置的过滤器工厂一共有22个，位于 <code>org.springframework.cloud.gateway.filter.factory</code>及<code>org.springframework.cloud.gateway.filter.factory.rewrite</code>包中</p><h3 id="2-1-根据用途划分"><a href="#2-1-根据用途划分" class="headerlink" title="2.1 根据用途划分"></a>2.1 根据用途划分</h3><p>  根据过滤器工厂的用途，可以划分为 <code>Header</code>、<code>Parameter</code>、<code>Path</code>、<code>Body</code>、<code>Status</code>、<code>Session</code>、<code>Redirect</code>、<code>Retry</code>、<code>RateLimiter</code>和<code>Hystrix</code>，具体如下：</p><ul><li><strong>Header</strong><ul><li>  <code>AddRequestHeaderGatewayFilterFactory</code></li><li>  <code>RemoveRequestHeaderGatewayFilterFactory</code></li><li>  <code>AddResponseHeaderGatewayFilterFactory</code></li><li>  <code>RemoveResponseHeaderGatewayFilterFactory</code></li><li>  <code>SetRequestHeaderGatewayFilterFactory</code></li><li>  <code>SetResponseHeaderGatewayFilterFactory</code></li><li>  <code>PreserveHostHeaderGatewayFilterFactory</code></li><li>  <code>RequestHeaderToRequestUriGatewayFilterFactory</code></li><li>  <code>SecureHeadersGatewayFilterFactory</code></li></ul></li><li><strong>Parameter</strong><ul><li>  <code>AddRequestParameterGatewayFilterFactory</code></li></ul></li><li><strong>Path</strong><ul><li>  <code>PrefixPathGatewayFilterFactory</code></li><li>  <code>RewritePathGatewayFilterFactory</code></li><li>  <code>SetPathGatewayFilterFactory</code></li><li>  <code>StripPrefixGatewayFilterFactory</code></li></ul></li><li><strong>Body</strong><ul><li>  <code>ModifyRequestBodyGatewayFilterFactory</code></li><li>  <code>ModifyResponseBodyGatewayFilterFactory</code></li></ul></li><li><strong>Status</strong><ul><li>  <code>SetStatusGatewayFilterFactory</code></li></ul></li><li><strong>Session</strong><ul><li>  <code>SaveSessionGatewayFilterFactory</code></li></ul></li><li><strong>Redirect</strong><ul><li>  <code>RedirectToGatewayFilterFactory</code></li></ul></li><li><strong>Retry</strong><ul><li>  <code>RetryGatewayFilterFactory</code></li></ul></li><li><strong>RateLimiter</strong><ul><li>  <code>RequestRateLimiterGatewayFilterFactory</code></li></ul></li><li><strong>Hystrix</strong><ul><li>  <code>HystrixGatewayFilterFactory</code></li></ul></li></ul><h3 id="2-2-根据作用域划分"><a href="#2-2-根据作用域划分" class="headerlink" title="2.2 根据作用域划分"></a>2.2 根据作用域划分</h3><p>  根据过滤器工厂的作用域划分，主要分为两类，一类是作用于 <code>request</code>，另一类是作用于 <code>response</code>，具体如下：</p><ul><li><strong>Request</strong><ul><li>  <code>AddRequestHeaderGatewayFilterFactory</code></li><li>  <code>RemoveRequestHeaderGatewayFilterFactory</code></li><li>  <code>SetRequestHeaderGatewayFilterFactory</code></li><li>  <code>PreserveHostHeaderGatewayFilterFactory</code></li><li>  <code>RequestHeaderToRequestUriGatewayFilterFactory</code></li><li>  <code>AddRequestParameterGatewayFilterFactory</code></li><li>  <code>PrefixPathGatewayFilterFactory</code></li><li>  <code>RewritePathGatewayFilterFactory</code></li><li>  <code>SetPathGatewayFilterFactory</code></li><li>  <code>StripPrefixGatewayFilterFactory</code></li><li>  <code>ModifyRequestBodyGatewayFilterFactory</code></li><li>  <code>SaveSessionGatewayFilterFactory</code></li><li>  <code>RequestRateLimiterGatewayFilterFactory</code></li><li>  <code>HystrixGatewayFilterFactory</code></li></ul></li><li><strong>Response</strong><ul><li>  <code>AddResponseHeaderGatewayFilterFactory</code></li><li>  <code>RemoveResponseHeaderGatewayFilterFactory</code></li><li>  <code>SetResponseHeaderGatewayFilterFactory</code></li><li>  <code>SecureHeadersGatewayFilterFactory</code></li><li>  <code>ModifyResponseBodyGatewayFilterFactory</code></li><li>  <code>SetStatusGatewayFilterFactory</code></li><li>  <code>RedirectToGatewayFilterFactory</code></li><li>  <code>RetryGatewayFilterFactory</code></li></ul></li></ul></blockquote></li><li><p>Global Filter</p><p>  在项目中添加filter.MyLogFilter</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;************  qwq  *************&quot;</span>);</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(uname == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******用户名为null，非法用户，o(╥﹏╥)o&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="九、Spring-Cloud-Config分布式配置中心"><a href="#九、Spring-Cloud-Config分布式配置中心" class="headerlink" title="九、Spring Cloud Config分布式配置中心"></a>九、Spring Cloud Config分布式配置中心</h1><h2 id="star-概述"><a href="#star-概述" class="headerlink" title=":star:概述"></a>:star:概述</h2><h3 id="分布式系统面临的—配置问题"><a href="#分布式系统面临的—配置问题" class="headerlink" title="分布式系统面临的—配置问题"></a>分布式系统面临的—配置问题</h3><blockquote><p>  微服务意味着要将单体应用中的业务拆分成一个个子服务,每个服务的粒度相对较小,因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行,所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>  SpringCloud提供了ConfigServer来解决这个问题,我们每一个微服务自己带着一个 application.yyml上百个配置文件的管理….  /(ToT)~~ </p></blockquote><h3 id="是什么-6"><a href="#是什么-6" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527085525733.png" alt="image-20200527085525733"></p><p><strong>是什么</strong></p><blockquote><p>  SpringCloud Config为微服务架构中的微服务提供<strong>集中化</strong>的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个<strong>中心化的外部配置</strong>。</p></blockquote><p><strong>怎么玩</strong></p><blockquote><p>  Spring Cloud Config分为<strong>服务端和客户端两部分</strong></p><p>  服务端也称为<strong>分布式配置中心</strong>,它是—个<strong>独立的微服务应用</strong>,用来连接配置服务器并为客户端提供获取配置信息,加密/解密信息等访问接口</p><p>  客户端则是通过指定的配置中心来管理应用资源,以及与业务相关的配置内容,并在启动的时候从配置中心获取和加载配置信息，配置服务器默认采用git来存储配置信息,这样就有助于对环境配置进行版本管理,并且可以通过gt客户端工具来方便的管理和访问配置内容</p></blockquote><h3 id="能干嘛-3"><a href="#能干嘛-3" class="headerlink" title="能干嘛"></a>能干嘛</h3><ul><li>  集中管理配置文件</li><li>  不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>  运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>  当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>  将配置信息以REST接口的形式暴露</li></ul><h3 id="官网-1"><a href="#官网-1" class="headerlink" title="官网"></a>官网</h3><p><a href="https://spring.io/projects/spring-cloud-config">https://spring.io/projects/spring-cloud-config</a></p><h2 id="star-Config服务端配置与测试"><a href="#star-Config服务端配置与测试" class="headerlink" title=":star:Config服务端配置与测试"></a>:star:Config服务端配置与测试</h2><h3 id="创建cloud-config-center3344"><a href="#创建cloud-config-center3344" class="headerlink" title="创建cloud-config-center3344"></a>创建cloud-config-center3344</h3><p>参考其他的项目</p><h3 id="pom-5"><a href="#pom-5" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入config-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yml-5"><a href="#yml-5" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/LLQWQ/cloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>spring.cloud.config.server.git.uri</code>这个属性可以通过ssh和https的方式连接到git仓库。如果使用ssh连接的方式，在电脑没有保存秘钥的情况下需要自己指定。使用<code>spring.cloud.config.server.git.privateKey</code>来指定秘钥，并且将<code>spring.cloud.config.server.git.ignoreLocalSshSettings</code>设为true</p><h3 id="主配置类-1"><a href="#主配置类-1" class="headerlink" title="主配置类"></a>主配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">// 加上这个注解开启功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-10"><a href="#测试-10" class="headerlink" title="测试"></a>测试</h3><p>测试前记得创建一个仓库</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527101835804.png" alt="image-20200527101835804"></p><p>在网页中输入：<a href="http://localhost:3344/config-test.yml">http://localhost:3344/config-test.yml</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527102056673.png" alt="image-20200527102056673"></p><p><strong>访问规则：</strong></p><blockquote><p>  {application}：微服务应用的名称<br>  {profile}：环境<br>  {label}：哪个分支</p><ul><li>/{application}/{profile}[/{label}]<ul><li>使用这种方式读取出来的是一个json串<ul><li><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527103503753.png" alt="image-20200527103503753" style="zoom:200%;"></li></ul></li><li><a href="http://localhost:3344/config/dev/master">http://localhost:3344/config/dev/master</a></li><li><a href="http://localhost:3344/order/test/qwq">http://localhost:3344/order/test/qwq</a></li></ul></li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul></blockquote><h2 id="star-Config客户端配置与测试"><a href="#star-Config客户端配置与测试" class="headerlink" title=":star:Config客户端配置与测试"></a>:star:Config客户端配置与测试</h2><h3 id="新建cloud-config-client3355"><a href="#新建cloud-config-client3355" class="headerlink" title="新建cloud-config-client3355"></a>新建cloud-config-client3355</h3><h3 id="pom-6"><a href="#pom-6" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加config-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h3><h4 id="是什么-7"><a href="#是什么-7" class="headerlink" title="是什么"></a>是什么</h4><blockquote><p>  applicaiton.yml是用户级的资源配置项</p><p>  bootstrap.yml是系统级的,优先级更加高</p><p>  Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的Application Context的父上下文。初始化的时候，Bootstrap Context 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的’Environment’。</p><p>  Bootstrap属性有高优先级,默认情况下,它们不会被本地配置覆盖。 Bootstrap context’和 Application Context有着不同的约定  ,所以新增了一个bootstrap.yml文件,保证 Bootstrap Context’Application  Context’配置的分离。</p><p>  要将 Client模块下的 application.yml文件改为 bootstrap.yml这是很关键的,  因为 bootstrap.yml是比 application.yml先加载的。 bootstrap.yml优先级高于 application.yml</p></blockquote><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><h3 id="Controler"><a href="#Controler" class="headerlink" title="Controler"></a>Controler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主配置类-2"><a href="#主配置类-2" class="headerlink" title="主配置类"></a>主配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-11"><a href="#测试-11" class="headerlink" title="测试"></a>测试</h3><p>在浏览器输入：<a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527110632378.png" alt="image-20200527110632378"></p><p>输出了git上面的配置文件的内容</p><h2 id="star-Config客户端之动态刷新"><a href="#star-Config客户端之动态刷新" class="headerlink" title=":star:Config客户端之动态刷新"></a>:star:Config客户端之动态刷新</h2><h3 id="修改Controller"><a href="#修改Controller" class="headerlink" title="修改Controller"></a>修改Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 添加下面这个注解</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改yml-4"><a href="#修改yml-4" class="headerlink" title="修改yml"></a>修改yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="测试-12"><a href="#测试-12" class="headerlink" title="测试"></a>测试</h3><p>修改git仓库里面的配置内容</p><p>网页刷新<a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>这时候你会发现并没有得到修改后的内容，这是因为需要向3355发送一个post请求来刷新<code>curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</code></p><p>这时候再去刷新网页就会发现已经同步过来了</p><p>但是这种方法还不是特别自动，算个半自动，所以接下来加入rabbitmq来实现git提交修改后自动同步配置</p><h1 id="十、Spring-Cloud-Bus-消息总线"><a href="#十、Spring-Cloud-Bus-消息总线" class="headerlink" title="十、Spring Cloud Bus 消息总线"></a>十、Spring Cloud Bus 消息总线</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><h3 id="是什么-8"><a href="#是什么-8" class="headerlink" title="是什么"></a>是什么</h3><p>Bus支持两种消息代理: Rabbitmq和 Kafka</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527123547367.png" alt="image-20200527123547367"></p><h3 id="能干嘛-4"><a href="#能干嘛-4" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>Spring Cloud Bus能管理和传播分布式系统间的消息,就像一个分布式执行器,可用于广播状态更改、事件推送等,也可以当作微服务间的通信通道</p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527123827334.png" alt="image-20200527123827334" style="zoom:200%;"><h3 id="为何被称为总线"><a href="#为何被称为总线" class="headerlink" title="为何被称为总线"></a>为何被称为总线</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527124031110.png" alt="image-20200527124031110"></p><h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><p>参考rabbitmq的笔记</p><h2 id="SpringCloud-Bus动态刷新全局广播"><a href="#SpringCloud-Bus动态刷新全局广播" class="headerlink" title="SpringCloud Bus动态刷新全局广播"></a>SpringCloud Bus动态刷新全局广播</h2><p><strong>必须先具备良好的RabbitMQ环境先</strong></p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ol><li> 利用消息总线<strong>触发一个客户端</strong>/bus/refresh而刷新所有客户端的配置    </li><li> 利用消息总线<strong>触发一个服务端</strong> Config Serverl的/bus/refresh端点, 而刷新所有客户端的配置    </li></ol><p><strong>第二种的架构显然更加适合,第一种不适合的原因如下：</strong></p><ul><li><p>  打破了微服务的职责单一性,因为微服务本身是业务模块,它本不应该承担配置刷新的职责。</p></li><li><p>  破坏了微服务各节点的对等性。</p></li><li><p>有一定的局限性。例如,微服务在迁移时,它的网络地址常常会发生变化,此时如果想要做到自动刷新,那就会增加更多的修改</p></li></ul><h3 id="演示广播效果，增加复杂度，再以3355为模板再制作一个3366"><a href="#演示广播效果，增加复杂度，再以3355为模板再制作一个3366" class="headerlink" title="演示广播效果，增加复杂度，再以3355为模板再制作一个3366"></a>演示广播效果，增加复杂度，再以3355为模板再制作一个3366</h3><p>参考3355</p><h3 id="给cloud-config-center-3344配置中心服务端添加消息总线支持"><a href="#给cloud-config-center-3344配置中心服务端添加消息总线支持" class="headerlink" title="给cloud-config-center-3344配置中心服务端添加消息总线支持"></a>给cloud-config-center-3344配置中心服务端添加消息总线支持</h3><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/LLQWQ/cloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置 -------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.107</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##rabbitmq相关配置,暴露bus刷新配置的端点 -------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="给cloud-config-client-3355客户端添加消息总线支持"><a href="#给cloud-config-client-3355客户端添加消息总线支持" class="headerlink" title="给cloud-config-client-3355客户端添加消息总线支持"></a>给cloud-config-client-3355客户端添加消息总线支持</h3><p>==3366也是一样的==</p><p><strong>pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.107</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><h3 id="测试-13"><a href="#测试-13" class="headerlink" title="测试"></a>测试</h3><ol><li> 将7001、3344、3355、3366依次运行起来，3344先自测一下康康能不能获取到配置信息</li><li> 修改git仓库中的配置信息</li><li> 看看3344有没有更新，然后再查看3355和3366，这个时候3355和3366应该是没有更新的</li><li> 向3344发送一个post请求<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</code></li><li> 再次查看3355和3366，现在应该是更新了</li></ol><p><strong>这样就做到了，一次修改，广播通知，处处生效</strong></p><h2 id="SpringCloud-Bus动态刷新定点通知"><a href="#SpringCloud-Bus动态刷新定点通知" class="headerlink" title="SpringCloud Bus动态刷新定点通知"></a>SpringCloud Bus动态刷新定点通知</h2><p><strong>测试场景：</strong> 修改git仓库中的配置，只刷新3355不刷新3366</p><p>完成以上场景，并不需要修改配置，只需要将刷新的post修改一下即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;`</span></span><br><span class="line"></span><br><span class="line">&#123;destination&#125;：需要通知更新的服务</span><br></pre></td></tr></table></figure><p>按照上面的格式，只需要在修改完git仓库的配置之后使用<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</code>来通知3344即可做到只通知3355而不通知3366的功能</p><p>ps：如果不写端口号则表示通知在eureka上注册的所有服务名叫config-client的服务</p><h1 id="十一、Spring-Cloud-Stream-消息驱动"><a href="#十一、Spring-Cloud-Stream-消息驱动" class="headerlink" title="十一、Spring Cloud Stream 消息驱动"></a>十一、Spring Cloud Stream 消息驱动</h1><h2 id="中文指导手册"><a href="#中文指导手册" class="headerlink" title="中文指导手册"></a>中文指导手册</h2><p><a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p><h2 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527141810648.png" alt="image-20200527141810648"></p><p>一句话：屏蔽底层消息中间件的差异降低切换成本,统一消息的编程模型</p><h3 id="编码api的常用注解"><a href="#编码api的常用注解" class="headerlink" title="编码api的常用注解"></a>编码api的常用注解</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527143009336.png" alt="image-20200527143009336"></p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>rabbitmq环境已经搭建好了</p><p>工程中新建三个子模块</p><ul><li>  cloud-stream-rabbitmq-provider8801 消息发送模块</li><li>  cloud-stream-rabbitmq-consumer8802 消息接收模块</li><li>  cloud-stream-rabbitmq-consumer8803 消息接收模块</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><h3 id="创建cloud-stream-rabbitmq-provider8801"><a href="#创建cloud-stream-rabbitmq-provider8801" class="headerlink" title="创建cloud-stream-rabbitmq-provider8801"></a>创建cloud-stream-rabbitmq-provider8801</h3><h3 id="pom-7"><a href="#pom-7" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入stream-rabbit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yml-6"><a href="#yml-6" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.107</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><h3 id="主配置类-3"><a href="#主配置类-3" class="headerlink" title="主配置类"></a>主配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient 不使用这个注解也可以注册到eureka中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQProviderMain8801</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProviderMain8801.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.stream.messaging.Source; 注意source不要导错包了</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(uuid).build());</span><br><span class="line">        log.info(<span class="string">&quot;==============uuid: &quot;</span>+uuid);</span><br><span class="line">        <span class="keyword">return</span> uuid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/message/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-14"><a href="#测试-14" class="headerlink" title="测试"></a>测试</h3><ol><li><p> 打开rabbitmq的web控制界面</p></li><li><p> 查看是否存在名称为studyExchange的交换机，这个名称是之前在配置文件中指定的交换机名称</p></li><li><p> 浏览器输入网址：<a href="http://localhost:8801/message/send">http://localhost:8801/message/send</a>  (多点几次)</p></li><li><p>查看交换机的图形界面有没有什么变化，就是下面这个界面，看那个视图有没有变动</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527155914627.png" alt="image-20200527155914627"></p></li></ol><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><h3 id="创建cloud-stream-rabbitmq-consumer8802"><a href="#创建cloud-stream-rabbitmq-consumer8802" class="headerlink" title="创建cloud-stream-rabbitmq-consumer8802"></a>创建cloud-stream-rabbitmq-consumer8802</h3><p>参考8801</p><h3 id="pom-8"><a href="#pom-8" class="headerlink" title="pom"></a>pom</h3><p>和8001一样</p><h3 id="yml-7"><a href="#yml-7" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.107</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># &lt;---------------这里改成input------------------- </span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// import org.springframework.cloud.stream.messaging.Sink;</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者qwq(&quot;</span>+port+<span class="string">&quot;)接收到消息： &quot;</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主启动类-3"><a href="#主启动类-3" class="headerlink" title="主启动类"></a>主启动类</h3><p>和8001一样</p><h3 id="测试-15"><a href="#测试-15" class="headerlink" title="测试"></a>测试</h3><ol><li><p> 启动rabbitmq的web控制界面</p></li><li><p> 启动7001,8001,8002（如果没用到eureka的话7001都可以不用启动）</p></li><li><p> 浏览器访问：<a href="http://localhost:8801/message/send">http://localhost:8801/message/send</a></p></li><li><p> 查看8002的控制台有没有打印出对应的消息</p></li><li><p>查看名称为studyExchange的交换机有没有订阅者和流量的变化</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527162558243.png" alt="image-20200527162558243"></p></li></ol><h2 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>  stream的消费者在没指定分组时会默认分配在一个唯一的组中，并且stream的每个组都能消费到生产者发送过来的消息。这种情况就是订阅发布模式，但是如果一个组中有多个消费者，此时这多个消费者就是竞争关系，也就是一人消费一条。（说竞争关系可能不太对，应该是轮询的负载均衡模式）</p><p>  一句话：不同组重复消费，同一组轮询</p></blockquote><p>为了测试效果先创建一个8003</p><h4 id="创建cloud-stream-rabbitmq-consumer8803"><a href="#创建cloud-stream-rabbitmq-consumer8803" class="headerlink" title="创建cloud-stream-rabbitmq-consumer8803"></a>创建cloud-stream-rabbitmq-consumer8803</h4><p>参考8002（就是直接clone 8002 改一下配置）</p><h4 id="修改yml-5"><a href="#修改yml-5" class="headerlink" title="修改yml"></a>修改yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span> </span><br><span class="line">        <span class="attr">input:</span> </span><br><span class="line">          <span class="attr">group:</span> <span class="string">qwq</span> <span class="comment"># 添加这个就好了，8002和8003写一样的组名就好啦</span></span><br></pre></td></tr></table></figure><h4 id="测试-16"><a href="#测试-16" class="headerlink" title="测试"></a>测试</h4><ol><li> 浏览器访问：<a href="http://localhost:8801/message/send">http://localhost:8801/message/send</a></li><li> 查看8002和8003的控制台，如果没有出现重复的消息就对啦:laughing:</li></ol><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><strong>问题：</strong>当8002和8003宕机了，但是8001在它们宕机之后发送了五条消息，当8002和8003再次上线还会不会收到8001在当前后发送的5条消息？</p><p>答案是收得到，但是有几个前提：</p><ul><li>  8002和8003指定了分组的属性</li><li>  8002和8003的宕机前的分组属性和重新上线后的分组属性的值必须是一样的</li></ul><p>拿8002举例，假设它宕机前的分组属性的值是qwq，宕机后也必须是以qwq的分组登录的才能收到补发的消息。</p><p>因为stream在8002第一次登录时会记录分组，当他下线了，在它下线的这段时间所发送的消息会在它再次以qwq上线的时候补发给它，也就相当于qwq被注册到了stream里面。</p><h1 id="十二、Spring-Cloud-Sleuth-分布式请求链路跟踪"><a href="#十二、Spring-Cloud-Sleuth-分布式请求链路跟踪" class="headerlink" title="十二、Spring Cloud Sleuth 分布式请求链路跟踪"></a>十二、Spring Cloud Sleuth 分布式请求链路跟踪</h1><h2 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h2><h3 id="为什么会出现这样的技术？需要解决那些问题？"><a href="#为什么会出现这样的技术？需要解决那些问题？" class="headerlink" title="为什么会出现这样的技术？需要解决那些问题？"></a>为什么会出现这样的技术？需要解决那些问题？</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527172421771.png"></p><p>在调用链路少的情况可以不用引用，但是当链路很长的时候就很有必要对其进行监控了，比如下图这种情况</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527172550577.png" alt="image-20200527172550577"></p><h3 id="是什么-9"><a href="#是什么-9" class="headerlink" title="是什么"></a>是什么</h3><p><a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></p><blockquote><p>  Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p><p>  在分布式系统中提供追踪解决方案并且兼容支持了 zipkin</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>它会将调用链路记录下来，可以以web的界面展现出来</p><h2 id="搭建链路监控步骤"><a href="#搭建链路监控步骤" class="headerlink" title="搭建链路监控步骤"></a>搭建链路监控步骤</h2><h3 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><p>zipkin-server-2.12.9-exec.jar</p><p>下载以exec结尾的jar包</p><h4 id="运行jar"><a href="#运行jar" class="headerlink" title="运行jar"></a>运行jar</h4><p>使用<code>java -jar zipkin-server-2.12.9-exec.jar</code>来运行，出现这个标志说明成功啦</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527175700308.png" alt="image-20200527175700308"></p><h4 id="运行控制台"><a href="#运行控制台" class="headerlink" title="运行控制台"></a>运行控制台</h4><p><a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527175752803.png" alt="image-20200527175752803"></p><h4 id="完整的调用链路"><a href="#完整的调用链路" class="headerlink" title="完整的调用链路"></a>完整的调用链路</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527174038626.png" alt="image-20200527174038626"></p><p>精简版：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527174102677.png" alt="image-20200527174102677"></p><h4 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h4><ul><li>  <strong>Trace:</strong>  类似于树结构的Span集合，表示一条调用链路，存在唯一标识</li><li>  <strong>span:</strong>  表示调用链路来源，通俗的理解span就是一次请求信息</li></ul><h3 id="服务提供者和调用者"><a href="#服务提供者和调用者" class="headerlink" title="服务提供者和调用者"></a>服务提供者和调用者</h3><p>修改cloud-provider-payment8001和cloud-customer-openfeign-order80</p><h4 id="pom-9"><a href="#pom-9" class="headerlink" title="pom"></a>pom</h4><p>添加这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml-8"><a href="#yml-8" class="headerlink" title="yml"></a>yml</h4><p>添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">        <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集 </span></span><br><span class="line">        <span class="comment"># 项目中一般写0.5</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="测试-17"><a href="#测试-17" class="headerlink" title="测试"></a>测试</h4><ol><li><p> 启动zipkin-server</p></li><li><p> 浏览器访问：<a href="http://localhost/order/payment/ok">http://localhost/order/payment/ok</a></p></li><li><p>查看zipkin-server的控制界面</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200527190516542.png" alt="image-20200527190516542"></p></li></ol><h1 id="十三、Spring-Cloud-Alibaba-入门简介"><a href="#十三、Spring-Cloud-Alibaba-入门简介" class="headerlink" title="十三、Spring Cloud Alibaba 入门简介"></a>十三、Spring Cloud Alibaba 入门简介</h1><p>见脑图</p><h1 id="star2-十四、SpringCloud-Alibaba-Nacos服务注册和配置中心"><a href="#star2-十四、SpringCloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title=":star2:十四、SpringCloud Alibaba Nacos服务注册和配置中心"></a>:star2:十四、SpringCloud Alibaba Nacos服务注册和配置中心</h1><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><h3 id="为什么叫Nacos"><a href="#为什么叫Nacos" class="headerlink" title="为什么叫Nacos"></a>为什么叫Nacos</h3><blockquote><p>  前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service</p></blockquote><h3 id="是什么-10"><a href="#是什么-10" class="headerlink" title="是什么"></a>是什么</h3><blockquote><p>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心<br>Nacos：Dynamic Naming and Configuration Service<br>Nacos就是注册中心+配置中心的组合 等价于 <code>Nacos = Eureka+Config+Bus</code></p></blockquote><h3 id="能干嘛-5"><a href="#能干嘛-5" class="headerlink" title="能干嘛"></a>能干嘛</h3><blockquote><p>  替代Eureka做服务注册中心</p><p>  替代Config做服务配置中心</p></blockquote><h3 id="去哪下-1"><a href="#去哪下-1" class="headerlink" title="去哪下"></a>去哪下</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">git仓库</span>](<span class="link">https://github.com/alibaba/Nacos</span>)</span><br><span class="line"><span class="section"># 官网文档</span></span><br><span class="line"><span class="bullet">+</span> https://nacos.io/zh-cn/index.html</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#<span class="emphasis">_spring_</span>cloud<span class="emphasis">_alibaba_</span>nacos<span class="emphasis">_discovery</span></span><br></pre></td></tr></table></figure><h3 id="各种注册中心比较"><a href="#各种注册中心比较" class="headerlink" title="各种注册中心比较"></a>各种注册中心比较</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528084720925.png" alt="image-20200528084720925"></p><p><strong>据说Nacos在阿里巴巴内部有超过10万的实例运行,已经过了类似双十一等各种大型流量的考验</strong></p><h2 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h2><ol><li><p> 本地Java8+Maven环境已经OK</p></li><li><p>先从官网下载Nacos</p><p> <a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p></li><li><p> 解压安装包，直接运行bin目录下的startup.cmd</p></li><li><p>命令运行成功后直接访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p> 默认账号密码都是nacos</p></li><li><p>结果页面</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528085646074.png" alt="image-20200528085646074"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528085801217.png" alt="image-20200528085801217"></p></li></ol><h2 id="Nacos作为服务注册中心演示"><a href="#Nacos作为服务注册中心演示" class="headerlink" title="Nacos作为服务注册中心演示"></a>Nacos作为服务注册中心演示</h2><h3 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">官网文档</a></h3><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">中文官网</a></p><h3 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h3><h4 id="新建Module"><a href="#新建Module" class="headerlink" title="新建Module"></a>新建Module</h4><p>​            cloudalibaba-provider-payment9001</p><h4 id="POM-1"><a href="#POM-1" class="headerlink" title="POM"></a>POM</h4><p><strong>父POM</strong></p><p>添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>本模块POM</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YML-1"><a href="#YML-1" class="headerlink" title="YML"></a>YML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="主启动"><a href="#主启动" class="headerlink" title="主启动"></a>主启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务类-3"><a href="#业务类-3" class="headerlink" title="业务类"></a>业务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/port&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;port: &quot;</span> + port + <span class="string">&quot;, uuid: &quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-18"><a href="#测试-18" class="headerlink" title="测试"></a>测试</h4><ol><li> 访问nacos控制台，看服务列表里面有没有刚刚注册的服务</li></ol><p>​            <a href="http://localhost:8848/nacos/index.html#/serviceManagement">http://localhost:8848/nacos/index.html#/serviceManagement</a></p><p>​            <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528113404419.png" alt="image-20200528113404419"></p><blockquote><p>  为了下一章节演示nacos的负载均衡，参照9001新建9002</p></blockquote><p>如果想偷懒的话就。。。看下图（这种方式可以复制一个服务）</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528111505861.png" alt="image-20200528111505861"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528111829900.png" alt="image-20200528111829900"></p><h3 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h3><h4 id="新建Module-1"><a href="#新建Module-1" class="headerlink" title="新建Module"></a>新建Module</h4><p>​            cloudalibaba-consumer-nacos-order83</p><h4 id="POM-2"><a href="#POM-2" class="headerlink" title="POM"></a>POM</h4><p>和9001一样</p><h4 id="yml-9"><a href="#yml-9" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myConfig:</span> <span class="comment"># 这里是自己写的配置</span></span><br><span class="line">  <span class="attr">serverUrl:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><h4 id="主启动-1"><a href="#主启动-1" class="headerlink" title="主启动"></a>主启动</h4><p>和9001一样</p><h4 id="业务类-4"><a href="#业务类-4" class="headerlink" title="业务类"></a>业务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myConfig.serverUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/port&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProviderPort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverUrl+<span class="string">&quot;/payment/port&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-19"><a href="#测试-19" class="headerlink" title="测试"></a>测试</h4><ol><li><p>访问nacos控制台</p><p> <a href="http://localhost:8848/nacos/index.html#/serviceManagement">http://localhost:8848/nacos/index.html#/serviceManagement</a></p></li><li><p>83访问9001/9002，轮询负载OK</p><p> 就是看到9001和9002的端口交替出现</p></li></ol><h4 id="为什么nacos支持负载均衡"><a href="#为什么nacos支持负载均衡" class="headerlink" title="为什么nacos支持负载均衡"></a>为什么nacos支持负载均衡</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528131821302.png" alt="image-20200528131821302"></p><p>因为nacos整合了ribbon</p><h3 id="服务注册中心对比"><a href="#服务注册中心对比" class="headerlink" title="服务注册中心对比"></a>服务注册中心对比</h3><h4 id="Nacos和CAP"><a href="#Nacos和CAP" class="headerlink" title="Nacos和CAP"></a>Nacos和CAP</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528132152933.png" alt="image-20200528132152933"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528132134012.png" alt="image-20200528132134012"></p><h4 id="Nacos支持AP和CP模式的切换"><a href="#Nacos支持AP和CP模式的切换" class="headerlink" title="Nacos支持AP和CP模式的切换"></a>Nacos支持AP和CP模式的切换</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; C是所有节点在同一时间看到的数据是一致的;而A的定义是所有的请求都会收到响应。</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 何时选择使用何种模式?</span></span><br><span class="line">一般来说,如果不需要存储服务级别的信息且服务实例是通过nacos-client注册,并能够倮持心跳上报,那么就可以选挥AP模式.当前主流的服务如 Spring cloud 和Dubbo 服务,都适用于AP模式,AP模式为了服务的可用性而减弱了一致性,因此AP模式下只支持注册临时实例.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 如果需要在服务级别编辑或者存储配置信息,那么CP 是必须,K8S服务和DNS服务则适用于CP模式。</span></span><br><span class="line">CP模式下则支持注册持久化实例,此时则是以 Raft 协议为集群运行模式,该模式下注册实例之前必须先注册服务,如果服务不存在,则会返回错误.</span><br><span class="line"></span><br><span class="line">可以用以下命令启动并告知nacos的模式</span><br><span class="line"><span class="code">`curl-X PUT&#x27;SNACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#x27;`</span></span><br></pre></td></tr></table></figure><h2 id="Nacos作为服务配置中心演示"><a href="#Nacos作为服务配置中心演示" class="headerlink" title="Nacos作为服务配置中心演示"></a>Nacos作为服务配置中心演示</h2><h3 id="Nacos作为配置中心-基础配置"><a href="#Nacos作为配置中心-基础配置" class="headerlink" title="Nacos作为配置中心-基础配置"></a>Nacos作为配置中心-基础配置</h3><h4 id="建model"><a href="#建model" class="headerlink" title="建model"></a>建model</h4><p>cloudalibaba-config-nacos-client3377</p><h4 id="POM-3"><a href="#POM-3" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba config --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YML-2"><a href="#YML-2" class="headerlink" title="YML"></a>YML</h4><h5 id="bootstrap-yml-1"><a href="#bootstrap-yml-1" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br></pre></td></tr></table></figure><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h5 id="why配置两个"><a href="#why配置两个" class="headerlink" title="why配置两个"></a>why配置两个</h5><blockquote><p>  Nacos同springcloud-config一样,在项目初始化时,要保证先从配置中心进行配置拉取,拉取配置之后,才能保证项目的正常启动。<br>  springboot中配置文件的加载是存在优先级顺序的,bootstrap优先级高于application</p></blockquote><h4 id="主启动-2"><a href="#主启动-2" class="headerlink" title="主启动"></a>主启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务类-5"><a href="#业务类-5" class="headerlink" title="业务类"></a>业务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在Nacos中添加配置信息"><a href="#在Nacos中添加配置信息" class="headerlink" title="在Nacos中添加配置信息"></a>在Nacos中添加配置信息</h4><p>公式：${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528141639257.png" alt="image-20200528141639257"></p><h4 id="测试-20"><a href="#测试-20" class="headerlink" title="测试"></a>测试</h4><ol><li><p>在nacos的管理界面添加配置</p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528141830231.png" alt="image-20200528141830231" style="zoom:200%;"></li><li><p> 启动3377，并访问<a href="http://localhost:3377/configInfo%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E6%89%93%E5%8D%B0%E4%BA%86%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF">http://localhost:3377/configInfo查看是否打印了配置信息</a></p></li><li><p> 在nacos管理界面修改配置信息，查看3377是否更新</p></li></ol><h3 id="Nacos作为配置中心-分类配置"><a href="#Nacos作为配置中心-分类配置" class="headerlink" title="Nacos作为配置中心-分类配置"></a>Nacos作为配置中心-分类配置</h3><h4 id="Data-ID"><a href="#Data-ID" class="headerlink" title="Data ID"></a>Data ID</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528143514511.png" alt="image-20200528143514511"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528143559804.png" alt="image-20200528143559804"></p><p>如果有一个dataid为<code>nacos-config-client-test.yaml</code>的配置，此时将action的值修改为test，那么它就会去读取<code>nacos-config-client-test.yaml</code>的配置，而不会去读取<code>nacos-config-client-dev.yaml</code>的配置</p><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528145005346.png" alt="image-20200528145005346"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528145044527.png" alt="image-20200528145044527"></p><p>应该不用我说了吧😒</p><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>新建命名空间</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528145312056.png" alt="image-20200528145312056"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528145354352.png" alt="image-20200528145354352"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528145429410.png" alt="image-20200528145429410"></p><p>懂？🙄</p><h2 id="star-Nacos集群和持久化配置（重要）"><a href="#star-Nacos集群和持久化配置（重要）" class="headerlink" title=":star:==Nacos集群和持久化配置（重要）=="></a>:star:==Nacos集群和持久化配置（重要）==</h2><h3 id="nacos配置持久化"><a href="#nacos配置持久化" class="headerlink" title="nacos配置持久化"></a>nacos配置持久化</h3><h4 id="我的配置："><a href="#我的配置：" class="headerlink" title="我的配置："></a><strong>我的配置：</strong></h4><ul><li>  maven：3.5.4</li><li>  mysql：5.7.9</li><li>  nacos-server：1.2.1</li></ul><h4 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h4><ol><li> 在数据库创建一个库（nacos）</li><li> 运行<code>nacos安装目录/conf/nacos-mysql.sql</code>建立里面的表</li><li>修改<code>nacos安装目录/conf/application.properties</code><ol><li> 修改被箭头指向的，默认是被注释的。取消注释后再修改mysql的连接ip、账号和密码</li><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200528163454937.png" alt="image-20200528163454937"></li></ol></li><li> 登录nacos控制台，增加一条配置，查看数据库的config_info表有没有增加刚刚的配置</li></ol><h4 id="连接mysql8"><a href="#连接mysql8" class="headerlink" title="连接mysql8"></a>连接mysql8</h4><p>在nacos目前这个版本如果要连接mysql8需要添加jar包</p><p>在nacos安装目录下面添加<code>\plugins\mysql</code>目录，在这个目录中添加连接mysql8的jar包·</p><h3 id="nacos配置集群"><a href="#nacos配置集群" class="headerlink" title="nacos配置集群"></a>nacos配置集群</h3><h4 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h4><p>四台虚拟机</p><table><thead><tr><th>ip</th><th>部署服务</th></tr></thead><tbody><tr><td>192.168.1.106</td><td>nginx，mysql:5.7.9</td></tr><tr><td>192.168.1.105</td><td>nacos</td></tr><tr><td>192.168.1.108</td><td>nacos</td></tr><tr><td>192.168.1.109</td><td>nacos</td></tr></tbody></table><p>==为了保证可以安全通过，建议先在单机并且连接数据库的情况下先运行通过再配置集群==</p><p>ps: liunx 下的单机启动命令为<code>./startup.sh -m standalone</code>，因为.sh脚本里面默认是集群模式启动。如果想配置伪集群的话需要修改start.sh启动脚本</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529095505214.png" alt="image-20200529095505214"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529095713167.png" alt="image-20200529095713167"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line">cygwin=<span class="literal">false</span></span><br><span class="line">darwin=<span class="literal">false</span></span><br><span class="line">os400=<span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;`uname`&quot;</span> <span class="keyword">in</span></span><br><span class="line">CYGWIN*) cygwin=<span class="literal">true</span>;;</span><br><span class="line">Darwin*) darwin=<span class="literal">true</span>;;</span><br><span class="line">OS400*) os400=<span class="literal">true</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">error_exit ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR: <span class="variable">$1</span> !!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=<span class="variable">$HOME</span>/jdk/java</span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=/opt/taobao/java</span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; <span class="built_in">unset</span> JAVA_HOME</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> <span class="variable">$darwin</span>; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -x <span class="string">&#x27;/usr/libexec/java_home&#x27;</span> ] ; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">export</span> JAVA_HOME=`/usr/libexec/java_home`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> [ -d <span class="string">&quot;/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    JAVA_PATH=`dirname $(readlink -f $(<span class="built_in">which</span> javac))`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$JAVA_PATH</span>&quot;</span> != <span class="string">&quot;x&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">export</span> JAVA_HOME=`dirname <span class="variable">$JAVA_PATH</span> 2&gt;/dev/null`</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        error_exit <span class="string">&quot;Please set the JAVA_HOME variable in your environment, We need java(x64)! jdk8 or later is better!&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SERVER=<span class="string">&quot;nacos-server&quot;</span></span><br><span class="line"><span class="built_in">export</span> MODE=<span class="string">&quot;cluster&quot;</span></span><br><span class="line"><span class="built_in">export</span> FUNCTION_MODE=<span class="string">&quot;all&quot;</span></span><br><span class="line"><span class="built_in">export</span> PORT=<span class="string">&quot;8848&quot;</span> <span class="comment"># =========================改这里========================</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:m:f:s:p:&quot;</span> opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">        m)</span><br><span class="line">            MODE=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        f)</span><br><span class="line">            FUNCTION_MODE=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        s)</span><br><span class="line">            SERVER=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        <span class="comment">#==================这里也要==================#</span></span><br><span class="line">        p)</span><br><span class="line">        PORT=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        ?)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Unknown parameter&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> JAVA=<span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span></span><br><span class="line"><span class="built_in">export</span> BASE_DIR=`<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>)/..; <span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">export</span> DEFAULT_SEARCH_LOCATIONS=<span class="string">&quot;classpath:/,classpath:/config/,file:./,file:./config/&quot;</span></span><br><span class="line"><span class="built_in">export</span> CUSTOM_SEARCH_LOCATIONS=<span class="variable">$&#123;DEFAULT_SEARCH_LOCATIONS&#125;</span>,file:<span class="variable">$&#123;BASE_DIR&#125;</span>/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================================================</span></span><br><span class="line"><span class="comment"># JVM Configuration</span></span><br><span class="line"><span class="comment">#===========================================================================================</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;MODE&#125;</span>&quot;</span> == <span class="string">&quot;standalone&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.standalone=true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/java_heapdump.hprof&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -XX:-UseLargePages&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;FUNCTION_MODE&#125;</span>&quot;</span> == <span class="string">&quot;config&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=config&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$&#123;FUNCTION_MODE&#125;</span>&quot;</span> == <span class="string">&quot;naming&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=naming&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JAVA_MAJOR_VERSION=$(<span class="variable">$JAVA</span> -version 2&gt;&amp;1 | sed -E -n <span class="string">&#x27;s/.* version &quot;([0-9]*).*$/\1/p&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$JAVA_MAJOR_VERSION</span>&quot;</span> -ge <span class="string">&quot;9&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">  JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xlog:gc*:file=<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/nacos_gc.log:time,tags:filecount=10,filesize=102400&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Djava.ext.dirs=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre/lib/ext:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib/ext&quot;</span></span><br><span class="line">  JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xloggc:<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dloader.path=<span class="variable">$&#123;BASE_DIR&#125;</span>/plugins/health,<span class="variable">$&#123;BASE_DIR&#125;</span>/plugins/cmdb,<span class="variable">$&#123;BASE_DIR&#125;</span>/plugins/mysql&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.home=<span class="variable">$&#123;BASE_DIR&#125;</span>&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -jar <span class="variable">$&#123;BASE_DIR&#125;</span>/target/<span class="variable">$&#123;SERVER&#125;</span>.jar&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> <span class="variable">$&#123;JAVA_OPT_EXT&#125;</span>&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> --spring.config.location=<span class="variable">$&#123;CUSTOM_SEARCH_LOCATIONS&#125;</span>&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> --logging.config=<span class="variable">$&#123;BASE_DIR&#125;</span>/conf/nacos-logback.xml&quot;</span></span><br><span class="line">JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> --server.max-http-header-size=524288&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$&#123;BASE_DIR&#125;</span>/logs&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$&#123;BASE_DIR&#125;</span>/logs</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JAVA</span> <span class="variable">$&#123;JAVA_OPT&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;MODE&#125;</span>&quot;</span> == <span class="string">&quot;standalone&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nacos is starting with standalone&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nacos is starting with cluster&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check the start.out log output file</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/start.out&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  touch <span class="string">&quot;<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/start.out&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JAVA</span> <span class="variable">$&#123;JAVA_OPT&#125;</span>&quot;</span> &gt; <span class="variable">$&#123;BASE_DIR&#125;</span>/logs/start.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># ==========================改这里====================</span></span><br><span class="line">nohup <span class="variable">$JAVA</span> <span class="variable">$&#123;JAVA_OPT&#125;</span> -Dserver.port=<span class="variable">$&#123;PORT&#125;</span> nacos.nacos &gt;&gt; <span class="variable">$&#123;BASE_DIR&#125;</span>/logs/start.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nacos is starting，you can check the <span class="variable">$&#123;BASE_DIR&#125;</span>/logs/start.out&quot;</span></span><br></pre></td></tr></table></figure><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><ol><li><p> 下载nacos-server.jar，注意：这里下载的版本一定要一样！！</p></li><li><p> 解压<code>tar -zxvf xxx.tar.gz</code></p></li><li><p>进入nacos安装目录\conf，使用cluster.conf.example文件的内容创建一个名称为cluster.conf的文件</p><ol><li> <code>cp cluster.conf.example cluster.conf</code></li><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529092639246.png" alt="image-20200529092639246"></li></ol></li><li><p>修改cluster.conf文件，将文件内容添加集群ip:端口号</p><ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529093022916.png" alt="image-20200529093022916"></li></ol></li><li><p>修改conf目录下的application.properties</p><ol><li><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529093221473.png" alt="image-20200529093221473"></p></li><li><p> 添加mysql的配置，参考上一节的持久化配置</p></li><li><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529093327553.png" alt="image-20200529093327553"></p></li><li><p>```properties<br> #*************** Config Module Related Configurations ***************#</p><h3 id="If-user-MySQL-as-datasource"><a href="#If-user-MySQL-as-datasource" class="headerlink" title="If user MySQL as datasource:"></a>If user MySQL as datasource:</h3><p> spring.datasource.platform=mysql</p><h3 id="Count-of-DB"><a href="#Count-of-DB" class="headerlink" title="Count of DB:"></a>Count of DB:</h3><p> db.num=1</p><h3 id="Connect-URL-of-DB"><a href="#Connect-URL-of-DB" class="headerlink" title="Connect URL of DB:"></a>Connect URL of DB:</h3><p> db.url.0=jdbc:mysql://192.168.1.106:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true<br> db.user=root<br> db.password=123456</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6.  启动mysql，如果要连接mysql8参考持久化里面的解决办法</span><br><span class="line"></span><br><span class="line">7.  启动三台nacos-server &#96;.&#x2F;startup.sh&#96;，时间可能会有点久</span><br><span class="line"></span><br><span class="line">8.  查看启动日志&#96;cat start.out&#96;在logs目录里面，如果出现什么错误可以看这个，或者nacos.log</span><br><span class="line"></span><br><span class="line">9.  全都启动起来之后，在浏览器中访问nacos控制台，三台都要</span><br><span class="line"></span><br><span class="line">10.  全都访问成功之后，配置nginx</span><br><span class="line"></span><br><span class="line">     1.  ![image-20200529094119789](README.assets&#x2F;image-20200529094119789.png)</span><br><span class="line"></span><br><span class="line">     2.  添加一个upstream和server</span><br><span class="line"></span><br><span class="line">     3.  &#96;&#96;&#96;nginx</span><br><span class="line">         upstream cluster &#123;</span><br><span class="line">             server 192.168.1.109:8848;</span><br><span class="line">             server 192.168.1.106:8848;</span><br><span class="line">             server 192.168.1.108:8848;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         server &#123;</span><br><span class="line">             listen 23232;</span><br><span class="line">             server_name localhost;</span><br><span class="line">         </span><br><span class="line">             location &#x2F; &#123;</span><br><span class="line">                 proxy_pass http:&#x2F;&#x2F;cluster;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p> 启动nginx，浏览器访问<a href="http://192.168.1.106:23232/nacos%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF%E8%AE%BF%E9%97%AE%E7%9A%84nginx%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BB%A3%E7%90%86%E5%88%B0%E9%82%A3%E4%B8%89%E5%8F%B0nacos%E4%B8%8A%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E5%88%99%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F">http://192.168.1.106:23232/nacos，这里是访问的nginx，查看有没有代理到那三台nacos上，如果出现登录界面则配置成功</a></p></li><li><p>nacos控制台添加一个配置，查看其他两台nacos有没有同样的数据，有就ok啦！！！！😆</p><p> ps：我配了一下午加一晚上🙃，该死的版本</p></li></ol><h1 id="star2-十五、SpringCloud-Alibaba-Sentinle实现熔断与限流"><a href="#star2-十五、SpringCloud-Alibaba-Sentinle实现熔断与限流" class="headerlink" title=":star2:十五、SpringCloud Alibaba Sentinle实现熔断与限流"></a>:star2:十五、SpringCloud Alibaba Sentinle实现熔断与限流</h1><h2 id="Sentinle"><a href="#Sentinle" class="headerlink" title="Sentinle"></a>Sentinle</h2><h3 id="官网-2"><a href="#官网-2" class="headerlink" title="官网"></a>官网</h3><p><a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">中文版</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki">wiki</a></p><h3 id="是什么-11"><a href="#是什么-11" class="headerlink" title="是什么"></a>是什么</h3><p>一句话解释，之前我们讲解过的Hystrix的Alibaba版</p><h3 id="去哪下-2"><a href="#去哪下-2" class="headerlink" title="去哪下"></a>去哪下</h3><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><h3 id="能干嘛-6"><a href="#能干嘛-6" class="headerlink" title="能干嘛"></a>能干嘛</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529101917054.png" alt="image-20200529101917054"></p><h3 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h3><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel">官网解释</a></p><p>服务使用中的各种问题</p><ul><li>  服务雪崩</li><li>  服务降级</li><li>  服务熔断</li><li>  服务限流</li></ul><h2 id="安装Sentinle控制台"><a href="#安装Sentinle控制台" class="headerlink" title="安装Sentinle控制台"></a>安装Sentinle控制台</h2><h3 id="Sentinel-分为两个部分"><a href="#Sentinel-分为两个部分" class="headerlink" title="Sentinel 分为两个部分:"></a>Sentinel 分为两个部分:</h3><ul><li>  核心库(Java 客户端)不依赖任何框架/库,能够运行于所有Java 运行时环境,同时对 Dubbo/Spring Cloud 等框架也有较好的支持.</li><li>控制台(Dashboard)基于 Spring Boot 开发,打包后可以直接运行,不需要额外的 Tomcat等应用<br>  容器.</li></ul><h3 id="安装启动步骤"><a href="#安装启动步骤" class="headerlink" title="安装启动步骤"></a>安装启动步骤</h3><ol><li>下载<a href="https://github.com/alibaba/Sentinel/releases/download/1.7.2/sentinel-dashboard-1.7.2.jar">sentinel-dashboard-1.7.2.jar</a><ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529102718476.png" alt="image-20200529102718476"></li></ol></li><li> 使用 <code>java -jar</code> 命令启动，但是注意：sentinel的默认前台端口号为8080，所以8080端口不能被占用，并且需要java8的环境</li><li>浏览器输入<code>localhost:8080</code>，如果出现以下界面说明启动成功<ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529103148889.png" alt="image-20200529103148889"></li></ol></li><li>登录sentinel，用户名和密码都是sentinel<ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529103241722.png" alt="image-20200529103241722"></li></ol></li></ol><h2 id="初始化演示工程"><a href="#初始化演示工程" class="headerlink" title="初始化演示工程"></a>初始化演示工程</h2><h3 id="创建cloudalibaba-sentinel-service8401"><a href="#创建cloudalibaba-sentinel-service8401" class="headerlink" title="创建cloudalibaba-sentinel-service8401"></a>创建cloudalibaba-sentinel-service8401</h3><h4 id="POM-4"><a href="#POM-4" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ll.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YML-3"><a href="#YML-3" class="headerlink" title="YML"></a>YML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="comment"># 默认是8719，如果端口被占用会自动+1直到找到可用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="主启动-3"><a href="#主启动-3" class="headerlink" title="主启动"></a>主启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8410</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8410.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务类FlowLimitController"><a href="#业务类FlowLimitController" class="headerlink" title="业务类FlowLimitController"></a>业务类FlowLimitController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;...testB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-21"><a href="#测试-21" class="headerlink" title="测试"></a>测试</h3><ol><li> 启动依次nacos-server、sentinel和8401</li><li>登录sentinel的控制台会发现空空如也，为啥一个被监控的服务没有？<ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529110904527.png" alt="image-20200529110904527"></li><li> 因为sentinel默认是懒加载，需要对应的服务有一次请求</li></ol></li><li>浏览器访问：<a href="http://localhost:8401/testA%E5%92%8Chttp://localhost:8401/testB%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E6%9F%A5%E7%9C%8Bsentinel%E6%8E%A7%E5%88%B6%E5%8F%B0">http://localhost:8401/testA和http://localhost:8401/testB，然后再查看sentinel控制台</a><ol><li> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529111045642.png" alt="image-20200529111045642"></li></ol></li></ol><h2 id="流控规则（流量控制）"><a href="#流控规则（流量控制）" class="headerlink" title="流控规则（流量控制）"></a>流控规则（流量控制）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529112141525.png" alt="image-20200529112141525"></p><ul><li>  资源名：唯一名称，默认请求路径</li><li>  针对来源：<code>Sentinel</code>可以针对调用者进行限流，填写微服务名，指定对哪个微服务进行限流 ，默认<code>default</code>(不区分来源，全部限制)</li><li>阈值类型/单机阈值：<ul><li>  QPS(每秒钟的请求数量)：当调用该接口的QPS达到了阈值的时候，进行限流；</li><li>  线程数：当调用该接口的线程数达到阈值时，进行限流</li></ul></li><li>  是否集群：不需要集群</li><li>流控模式：<ul><li>  直接：接口达到限流条件时，直接限流</li><li>  关联：当关联的资源达到阈值时，就限流自己</li><li>  链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就可以限流）[api级别的针对来源]</li></ul></li><li>流控效果<ul><li>  快速失败：直接失败，就异常</li><li>  Warm Up：根据**<code>codeFactor</code>**（冷加载因子，默认为3）的值，即请求 QPS 从 <strong><code>threshold / 3</code></strong> 开始，经预热时长逐渐升至设定的 QPS 阈值</li><li>  排队等待：匀速排队,让请求以匀速的速度通过,阈值类型必须设置为QPS,否则无效</li></ul></li></ul><p><a href="%5Bhttps://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E5%9F%BA%E4%BA%8Eqps%E5%B9%B6%E5%8F%91%E6%95%B0%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%5D(https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6#%E5%9F%BA%E4%BA%8Eqps%E5%B9%B6%E5%8F%91%E6%95%B0%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6)">详情看这里</a></p><h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><ol><li><p>直接快速失败</p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/../../springcloud/%E5%9B%BE%E7%89%87/sentinel%E7%9A%849.png"></p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%845.png"></p><pre><code> ==直接失败的效果:==</code></pre><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%846.png"></p></li><li><p>线程数:</p><p> ​        <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/../../springcloud/%E5%9B%BE%E7%89%87/sentinel%E7%9A%848.png"></p><p> ​    <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8410.png"></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如a请求过来,处理很慢,在一直处理,此时b请求又过来了</span><br><span class="line">此时因为a占用一个线程,此时要处理b请求就只有额外开启一个线程</span><br><span class="line">那么就会报错</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8411.png"></p></li></ol><h3 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h3><h4 id="直接（默认）"><a href="#直接（默认）" class="headerlink" title="直接（默认）"></a>直接（默认）</h4><p>快速点击访问<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p>一秒只能访问一次，快速访问会出现Blocked by Sentinel (flow limiting)错误</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529113305794.png" alt="image-20200529113305794">测试</p><p><strong>问题：</strong></p><p>直接调用默认报错信息，技术方面OK but，是否应该有我们自己的后续处理？<br>类似有一个fallback的兜底方法？</p><h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8412.png"></p><p>==应用场景:  比如<strong>支付接口</strong>达到阈值,就要限流下<strong>订单的接口</strong>,防止一直有订单==</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8413.png"></p><p><strong>当testA达到阈值,qps大于1,就让testB之后的请求直接失败</strong></p><p>可以使用postman压测</p><h4 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">            machine-root</span><br><span class="line">              &#x2F;       \</span><br><span class="line">             &#x2F;         \</span><br><span class="line">       Entrance1     Entrance2</span><br><span class="line">          &#x2F;             \</span><br><span class="line">         &#x2F;               \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure><p>如上所示的Node分布情况，资源nodeA分别在两个上下文Entrance1和Entrance2下进行调用，假设在上下文Entrance1的调用量很大，而上下文Entrance2的调用量很小，我们想针对Entrance1上下文的nodeA调用进行限流，那么可以使用<strong>链路限流模式</strong>，配置如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/a.png" alt="img"> </p><p>那么在上下文Entrance2下对nodeA的调用就没有影响</p><h4 id="预热Warm-up"><a href="#预热Warm-up" class="headerlink" title="预热Warm up"></a>预热Warm up</h4><p>​     <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8414.png"></p><p>  <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/../../springcloud/%E5%9B%BE%E7%89%87/sentinel%E7%9A%8415.png"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8416.png"></p><p> ==应用场景==</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8417.png"></p><h4 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8418.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8419.png"></p><h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><p><strong>就是熔断降级</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8421.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8420.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8422.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8423.png"></p><h3 id="RT配置"><a href="#RT配置" class="headerlink" title="RT配置:"></a>RT配置:</h3><p>新增一个请求方法用于测试</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8424.png"></p><p>==配置RT:==</p><p>​                这里配置的PT,默认是秒级的平均响应时间</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8425.png"></p><p>默认计算平均时间是: 1秒类进入5个请求,并且响应的平均值超过阈值(这里的200ms),就报错]</p><p>​            1秒5请求是Sentinel默认设置的</p><p>==测试==</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8427.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8426.png"></p><p><strong>默认熔断后.就直接抛出异常</strong></p><h3 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例:"></a>异常比例:</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8428.png"></p><p>修改请求方法</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8429.png"></p><p>配置:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8431.png"></p><p>==如果没触发熔断,这正常抛出异常==:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8432.png"></p><p>==触发熔断==:</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8433.png"></p><h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数:"></a>异常数:</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8434.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%8435.png"></p><p>一分钟之内,有5个请求发送异常,进入熔断</p><h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><blockquote><p>  何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>  商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>  用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>  热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529142000115.png" alt="image-20200529142000115"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529142308769.png" alt="image-20200529142308769"></p><p>参数索引是方法里面的参数位置，而不是网址里面的参数位置</p><h3 id="修改8401"><a href="#修改8401" class="headerlink" title="修改8401"></a>修改8401</h3><p>在controller中新增一个方法</p><p>@SentinelResource：value值作为新增热点规则时添加的资源名，不能重复；blockHandler值为兜底的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;testHotKey_block&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;, required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;, required = false)</span> String p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1+<span class="string">&quot;, &quot;</span>+p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey_block</span><span class="params">(String p1, String p2, BlockException e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;qwq&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529143651570.png" alt="image-20200529143651570"></p><p>当参数值为eee时限流阈值为200</p><p><a href="http://localhost:8401/testHotKey?p1=eee">http://localhost:8401/testHotKey?p1=eee</a> 限流阈值为200</p><p><a href="http://localhost:8401/testHotKey?p1=123">http://localhost:8401/testHotKey?p1=123</a> 限流阈值为1</p><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529145026877.png" alt="image-20200529145026877"></p><p>系统规则支持以下的模式：</p><ul><li>  <strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li>  <strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li>  <strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>  <strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>  <strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><h2 id="SentinelResource注解"><a href="#SentinelResource注解" class="headerlink" title="@SentinelResource注解"></a>@SentinelResource注解</h2><p><a href="%5Bhttps://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%5D(https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81)">详细的看这里</a></p><blockquote><h2 id="SentinelResource-注解"><a href="#SentinelResource-注解" class="headerlink" title="@SentinelResource 注解"></a>@SentinelResource 注解</h2><blockquote><p>  注意：注解方式埋点不支持 private 方法。</p></blockquote><p>  <code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p><ul><li>  <code>value</code>：资源名称，必需项（不能为空）</li><li>  <code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li>  <code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li><code>fallback</code> / <code>fallbackClass</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul><li>  返回值类型必须与原函数返回值类型一致；</li><li>  方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>  fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code>里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul><li>  返回值类型必须与原函数返回值类型一致；</li><li>  方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>  defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li>  <code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li></ul><blockquote><p>  注：1.6.0 之前的版本 fallback 函数只针对降级异常（<code>DegradeException</code>）进行处理，<strong>不能针对业务异常进行处理</strong>。</p></blockquote><p>  ==特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> <strong>直接抛出</strong>（若方法本身未定义 throws BlockException 则会被 JVM 包装一层 <code>UndeclaredThrowableException</code>）。==</p></blockquote><p>blockHandler支持重写</p><p><code>fallback</code> 管java异常<code>blockHandler</code> 管<code>BlockException</code> </p><p>按url限流使用的是默认的兜底方法，而不是指定的兜底方法</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/image-20200529152748291.png" alt="image-20200529152748291"></p><h3 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑:"></a>自定义限流处理逻辑:</h3><ol><li><p>==单独创建一个类,用于处理限流==</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%84%E7%9A%841.png"></p></li><li><p>==在controller中,指定使用自定义类中的方法作为降级方法==</p><p> <img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/sentinel%E7%9A%84%E7%9A%842.png"></p></li></ol><h2 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>sentinel整合ribbon+openFeign+fallback</p><p>有手就行，去参考openFeign整合豪猪哥的笔记，累了，不想写了。</p><p>注意添加openFeign对sentinel的支持，和openFeign的依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br></pre></td></tr></table></figure><h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><h3 id="sentinel-规则持久化到nacos"><a href="#sentinel-规则持久化到nacos" class="headerlink" title="sentinel 规则持久化到nacos"></a>sentinel 规则持久化到nacos</h3><blockquote><p>  <strong>目录</strong></p></blockquote><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>Sentinel Dashboard中添加的规则是存储在内存中的，只要项目一重启规则就丢失了</p><p>此处将规则持久化到nacos中，在nacos中添加规则，然后同步到dashboard中；</p><p>后面研究如果将dashboard中添加的规则自动添加到nacos中</p><p>官网教程地址：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>1.导入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在application.properties中配置sentinel-nacos信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">mz</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8003</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel dashboard</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.transport.dashboard</span>=<span class="string">localhost:8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.nacos.server-addr</span>=<span class="string">localhost:8848</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.nacos.data-id</span>=<span class="string">mz-sentinel</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.nacos.group-id</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.nacos.data-type</span>=<span class="string">json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.nacos.rule-type</span>=<span class="string">flow</span></span><br></pre></td></tr></table></figure><p>3.在nacos中添加规则</p><p><img src= "/img/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1230278/201907/1230278-20190731222443568-75493756.png" alt="img"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;resource&quot;:</span> <span class="string">&quot;/hello&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;:</span> <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;:</span> <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;clusterMode&quot;:</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4.创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello sentinel&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问几次接口之后，就可以在Sentinel Dashboard 中看到在nacos中配置的规则信息了，并且项目服务重启依然存在</p><p><img src= "/img/loading.gif" data-lazy-src="https://img2018.cnblogs.com/blog/1230278/201907/1230278-20190731222719960-166637927.png" alt="img"></p><h3 id="修改规则同步到Nacos"><a href="#修改规则同步到Nacos" class="headerlink" title="修改规则同步到Nacos"></a><a href="https://www.jianshu.com/p/b597664c7678">修改规则同步到Nacos</a></h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>下面直接来看看如何实现的具体改造步骤，这里参考了<code>Sentinel Dashboard</code>源码中关于Nacos实现的测试用例。但是由于考虑到与Spring Cloud Alibaba的结合使用，略作修改。</p><p><strong>第一步</strong>：修改<code>pom.xml</code>中的sentinel-datasource-nacos的依赖，将<code>&lt;scope&gt;test&lt;/scope&gt;</code>注释掉，这样才能在主程序中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：找到<code>resources/app/scripts/directives/sidebar/sidebar.html</code>中的这段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;dashboard.flowV1(&#123;app: entry.app&#125;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-filter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>流控规则</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;dashboard.flow(&#123;app: entry.app&#125;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-filter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>流控规则</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步</strong>：在<code>com.alibaba.csp.sentinel.dashboard.rule</code>包下新建一个nacos包，用来编写针对Nacos的扩展实现。</p><p><strong>第四步</strong>：创建Nacos的配置类，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; flowRuleEntityEncoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; flowRuleEntityDecoder() &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigService <span class="title">nacosConfigService</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(PropertyKeyConst.SERVER_ADDR, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ConfigFactory.createConfigService(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用到了namespace隔离环境，可以在<code>nacosConfigService</code>方法中再加入配置，比如：<code>properties.put(PropertyKeyConst.NAMESPACE, &quot;130e71fa-97fe-467d-ad77-967456f2c16d&quot;);</code></p><p><strong>第五步</strong>：实现Nacos的配置拉取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleNacosProvider</span> <span class="keyword">implements</span> <span class="title">DynamicRuleProvider</span>&lt;<span class="title">List</span>&lt;<span class="title">FlowRuleEntity</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; converter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLOW_DATA_ID_POSTFIX = <span class="string">&quot;-sentinel&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_ID = <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;FlowRuleEntity&gt; <span class="title">getRules</span><span class="params">(String appName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String rules = configService.getConfig(appName + FLOW_DATA_ID_POSTFIX, GROUP_ID, <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(rules)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> converter.convert(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  <code>getRules</code>方法中的<code>appName</code>参数是Sentinel中的服务名称。</li><li>  <code>configService.getConfig</code>方法是从Nacos中获取配置信息的具体操作。其中，DataId和GroupId分别对应客户端使用时候的对应配置。比如这里的例子对应了之前我们在<a href="https://links.jianshu.com/go?to=http://blog.didispace.com/spring-cloud-alibaba-sentinel-2-1/">《Sentinel使用Nacos存储规则》</a>一文中的配置，具体如下：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds.nacos.groupId</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds.nacos.dataId</span>=<span class="string">$&#123;spring.application.name&#125;-sentinel</span></span><br></pre></td></tr></table></figure><p>注意：两边的DataId和GroupId必须对应上。</p><p><strong>第六步</strong>：实现Nacos的配置推送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleNacosPublisher</span> <span class="keyword">implements</span> <span class="title">DynamicRulePublisher</span>&lt;<span class="title">List</span>&lt;<span class="title">FlowRuleEntity</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; converter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLOW_DATA_ID_POSTFIX = <span class="string">&quot;-sentinel&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_ID = <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String app, List&lt;FlowRuleEntity&gt; rules)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AssertUtil.notEmpty(app, <span class="string">&quot;app name cannot be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rules == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        configService.publishConfig(app + FLOW_DATA_ID_POSTFIX, GROUP_ID, converter.convert(rules));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  这里的大部分内容与上一步中的实现一致。主要就是Nacos中存储配置的DataId和GroupId不要弄错。</li></ul><p><strong>第七步</strong>：修改<code>com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2</code>中<code>DynamicRuleProvider</code>和<code>DynamicRulePublisher</code>注入的Bean，改为上面我们编写的针对Apollo的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line"><span class="keyword">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line"><span class="keyword">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br></pre></td></tr></table></figure><h1 id="十六、SpringCloud-Seata-处理分布式事务"><a href="#十六、SpringCloud-Seata-处理分布式事务" class="headerlink" title="十六、SpringCloud Seata 处理分布式事务"></a>十六、SpringCloud Seata 处理分布式事务</h1><h2 id="seata简介"><a href="#seata简介" class="headerlink" title="seata简介"></a>seata简介</h2><h3 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h3><p>一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p><h3 id="是什么-12"><a href="#是什么-12" class="headerlink" title="是什么"></a>是什么</h3><blockquote><p>  Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务<br>  <a href="http://seata.io/zh-cn/">官网地址</a></p></blockquote><h3 id="能干嘛-7"><a href="#能干嘛-7" class="headerlink" title="能干嘛"></a>能干嘛</h3><p><strong>一个典型的分布式事务过程：</strong></p><p><strong>分布式事务处理过程的-ID+三组件模型</strong></p><ul><li><strong>Transaction ID XID</strong><ul><li>  全局唯一的事务ID</li></ul></li><li><strong>3组件概念</strong><ul><li>Transaction Coordinator(TC) <ul><li>  事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚;</li></ul></li><li>Transaction  Manager(TM) <ul><li>  控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议;</li></ul></li><li>Resource Manager(RM) <ul><li>  控制分支事务，负责分支注册，状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚；</li></ul></li></ul></li></ul><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/07/05/spring-cloud/spring-cloud/TB1rDpkJAvoK1RjSZPfXXXPKFXa-794-478.png" alt="img"></p><ol><li> TM向TC 申请开启一个全局事务,全局事务创建成功并生成一个全局唯一的XID;</li><li> XID 在微服务调用链路的上下文中传播;</li><li> RM向TC 注册分支事务,将其纳入XID 对应全局事务的管辖;</li><li> TM向TC 发起针对XID 的全局提交或回滚决议;</li><li> TC调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li></ol><h3 id="Seata术语"><a href="#Seata术语" class="headerlink" title="Seata术语"></a>Seata术语</h3><h4 id="TC-事务协调者"><a href="#TC-事务协调者" class="headerlink" title="TC - 事务协调者"></a>TC - 事务协调者</h4><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><h4 id="TM-事务管理器"><a href="#TM-事务管理器" class="headerlink" title="TM - 事务管理器"></a>TM - 事务管理器</h4><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><h4 id="RM-资源管理器"><a href="#RM-资源管理器" class="headerlink" title="RM - 资源管理器"></a>RM - 资源管理器</h4><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><h2 id="Seata下载安装"><a href="#Seata下载安装" class="headerlink" title="Seata下载安装"></a>Seata下载安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p><a href="http://seata.io/zh-cn/blog/download.html">官网地址</a></p><p><a href="https://github.com/seata/seata/releases">下载地址</a></p><p>我下载的是<a href="https://github.com/seata/seata/releases/tag/v1.0.0">v1.0.0-GA</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> 框架 </category>
          
          <category> 分布式 </category>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2020/02/05/git/git%E5%91%BD%E4%BB%A4/"/>
      <url>2020/02/05/git/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git命令行操作"><a href="#git命令行操作" class="headerlink" title="git命令行操作"></a>git命令行操作</h1><ol><li><p><code>git init</code></p><ul><li>效果：使用该命令会将此文件夹加入git进行管理，随后会在当前目录下生成一个.git隐藏文件夹，这个文件夹就是版本库，而当前目录及其子目录就是<strong>工作区</strong>。</li><li>注意：.git文件会记录你在这个工作区中的操作，切勿删除和修改</li></ul></li><li><p><code>git add &lt;file&gt;</code></p><ul><li>作用：将文件从工作区提交到暂存区（就是把文件交给git管）</li><li>注意：但此时文件<strong>并没有真正进入到版本库</strong>当中，文件目前只处于一个<strong>中间状态</strong>，如果文件没有处于暂存区的话git是不会去记录你的操作的，如果数据被删除了是无法通过git恢复的。</li></ul></li><li><p><code>git commit &lt;file&gt;</code></p><ul><li>作用：将<strong>暂存区</strong>文件提交到版本库中</li><li>参数：<code>-m &quot;&lt;message&gt;&quot;</code> 可以不用进入vim编辑器中输入提交信息</li><li>注意：这个命令将处于中间状态的文件（<strong>暂存区的文件</strong>）提交到版本库中,这时才算真正完成了一次提交过程。第一次提交为root（根）提交</li></ul><blockquote><p>一般情况下这三个命令的使用顺序应该是 init -&gt; add -&gt; commit<br>如果此时工作区中的文件发生了改动，并且希望将修改后的文件提交至<strong>版本库</strong></p><ol><li>必须先使用<code>git add &lt;file&gt;</code>命令将修改后的文件存入暂存区</li><li>再使用<code>git commit &lt;file&gt;</code>命令将文件从<strong>暂存区</strong>提交至版本库才可以，这和svn有很大的区别，SVN在添加新文之后每次修改的文件直接commit就可以了。</li><li>如果该文件已经处于追踪状态的话则可以直接使用<code>git commit &lt;file&gt;</code>提交到本地仓库，但是这样就不能撤销了</li></ol></blockquote></li><li><p><code>git status</code></p><ul><li>作用：查看工作区中文件的状态</li></ul></li><li><p><code>git rm --cached &lt;file&gt;</code></p><ul><li>作用：将文件从暂存区移除</li><li>注意：这条命令并不会删除文件夹中的文件，只是单单的把文件从暂存区中移除（简单的说就是：不把这个文件给git管了）<br>‘rm’ 是(remove)删除的意思，’cached’: 缓存</li></ul></li><li><p><code>git reset HEAD &lt;file&gt;</code></p><ul><li>作用：将文件从暂存区移除</li></ul></li></ol><h2 id="版本的前进和后退"><a href="#版本的前进和后退" class="headerlink" title="版本的前进和后退"></a><strong>版本的前进和后退</strong></h2><h3 id="查看提交的记录"><a href="#查看提交的记录" class="headerlink" title="查看提交的记录"></a><strong>查看提交的记录</strong></h3><ul><li><p><code>git log</code></p><ul><li>作用：查看提交的记录(最完整的)</li><li>参数：<ol><li><code>--pretty</code><ul><li>值：online</li><li>解释：每条log显示一行（简洁一些）</li></ul></li><li><code>--online</code><ul><li>解释：每条log显示一行，但是hash值只显示前一部分，并且只显示后面的版本不显示前面的版本</li></ul></li></ol></li><li>ps：多屏显示的控制方式（空格：向下翻页，b：向上翻页，q：退出）</li></ul></li><li><p><code>git reflog</code></p><pre><code>  + 作用：和上面的差不多但是会多一列参数&#39;HEAD@&#123;&lt;移动到当前版本需要多少步&gt;&#125;&#39;  + ps：所有记录都可以显示</code></pre></li></ul><h3 id="修改版本"><a href="#修改版本" class="headerlink" title="修改版本"></a><strong>修改版本</strong></h3><ul><li>方式<ul><li>基于索引值 [<strong>推荐</strong>]<ul><li><code>git reset --hard &lt;想去位置的索引值&gt;</code></li><li>ps：前进和后退<strong>都可以用</strong></li></ul></li><li>使用^符号<ul><li><code>git reset --hard HEAD^</code></li><li>ps：<strong>只能后退</strong>，如果想后退2个版本就加两个^，以此类推</li></ul></li><li>使用~符号<ul><li><code>git reset --hard HEAD~1</code></li><li>ps：<strong>只能后退</strong>，要退几步~后就写几 </li></ul></li></ul></li></ul><h3 id="reset命令三个参数的对比"><a href="#reset命令三个参数的对比" class="headerlink" title="reset命令三个参数的对比"></a><strong>reset命令三个参数的对比</strong></h3><ul><li><code>--soft</code><ul><li>解释：不会管<strong>暂存区</strong>和<strong>工作区</strong>，只用于在本地库移动版本指针（也就是指移动版本但）</li></ul></li><li><code>--mixed</code><ul><li>解释：在本地库移动版本指针和重置暂存区</li></ul></li><li><code>--hard</code><ul><li>解释：在本地库移动版本指针和重置暂存区&amp;工作区</li></ul></li></ul><h3 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a><strong>恢复删除的文件</strong></h3><pre><code>ps：适用于本地仓库有记录的情况</code></pre><ul><li>当文件被删除但本地仓库里有该文件的记录则可以使用<code>git reset --hard &lt;文件未被删除时的版本hash&gt;</code>来恢复文件</li></ul><h3 id="比较差异文件"><a href="#比较差异文件" class="headerlink" title="比较差异文件"></a><strong>比较差异文件</strong></h3><ul><li><code>git diff &lt;file&gt;</code><ul><li>解释：不加参数时表示为<strong>工作区</strong>和<strong>缓存区</strong>进行比较</li><li>参数：<ul><li><code>HEAD</code><ul><li>解释：如果使用版本指针指定某一个版本的话则表示<strong>缓存区</strong>和指定<strong>版本</strong>进行比较</li></ul></li></ul></li><li>ps：不带文件名表示比较当前目录的所有文件</li></ul></li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><code>git branch &lt;分支名称&gt;</code><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3></li><li><code>git branch -v</code><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3></li><li><code>git checkout &lt;分支名称&gt;</code><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3></li><li><code>git merge &lt;合并过来的分支名称&gt;</code></li><li>ps：假设有A,B两个分支A要合并到B上去，那么我们当前必须要处于B分支，也就是被合并的分支</li><li><strong>步骤</strong><ol><li>切换到被合并的分支上（执行<code>git checkout &lt;被合并的分支名&gt;</code>）</li><li>执行<code>checkout</code>命令</li></ol></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a><strong>解决冲突</strong></h3><ol><li>解决完文件中的冲突（打开文件，将文件改成想要的样子），保存</li><li>提交到暂存区，使用：<code>git add &lt;file&gt;</code></li><li>提交到本地仓库，使用：<code>git commit -m &quot;&lt;日志&gt;&quot;</code><br> 注意：这里<strong>一定</strong>不能带文件名</li></ol><h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h2><ul><li><p>介绍</p><ul><li>项目/仓库级别：仅在当前本地库的范围内有效</li><li>系统用户级别：当前登录的用户范围（可以理解为当前系统用户的全局范围）</li><li>优先级：如果两个级别都有设置则就近原则以项目级别的签名为准（项目级别 &gt; 系统用户级别）</li><li>注意：如果两者都没有会报错，必须拥有其一</li></ul></li><li><p>形式</p><ul><li>用户名：123qwq</li><li>email地址：<a href="mailto:&#115;&#100;&#x6a;&#x66;&#111;&#x73;&#x69;&#100;&#102;&#110;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#115;&#100;&#x6a;&#x66;&#111;&#x73;&#x69;&#100;&#102;&#110;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a></li></ul></li><li><p>作用</p><ul><li>区分不同的开发人员的身份</li></ul></li><li><p>注意</p><ul><li>这里设置的签名和登录远程仓库（代码托管中心）的账号和密码是没有半毛钱关系的</li></ul></li><li><p>命令</p><ul><li><p>增加项目级别：</p><blockquote><p><code>git config user.name tom_pro --add</code><br>  <code>git config user.email  good1245_pro.@qq.com --add</code></p></blockquote></li><li><p>增加全局：</p><blockquote><p><code>git config user.name tom_pro --add --global</code><br>  <code>git config user.email good1245_pro.@qq.com --add --global</code></p></blockquote></li><li><p>删除：</p><blockquote><p><code>git config user.name --unset</code></p></blockquote></li><li><p>改：</p><blockquote><p><code>git config user.name qwq123</code></p></blockquote></li><li><p>查看签名：</p><blockquote><p><code>cat .git/config</code><br>  <code>git config --list </code></p></blockquote></li><li><p>查看指定字段：</p><blockquote><p><code>git config user.name</code></p></blockquote></li><li><p>注意：这里的意思是打开.get文件夹下的config文件，如果不想使用命令查看签名也可以用记事本打开config文件，修改也一样.<br>设置或查看全局的签名在后面加<code>--global</code> 即可，但是如果使用<code>cat</code>命令就得到当前系统用户的文件夹下查看使用<code>cd ~</code>即可到达，然后再使用<code>cat .\.gitconfig</code>即可查看<br>增加和修改命令其实差不多</p></li></ul></li></ul><h2 id="与第三方远程库进行交互"><a href="#与第三方远程库进行交互" class="headerlink" title="与第三方远程库进行交互"></a>与第三方远程库进行交互</h2><ul><li>保存项目地址<ul><li>查看地址别名：<code>git remote -v</code></li><li>新建一个地址别名：<code>git remote add &lt;别名&gt; &lt;仓库地址&gt;</code></li></ul></li><li>从远程仓库下载项目<br>  <code>git clone &lt;仓库地址&gt;</code><br>  ps：clone有三个效果  <ol><li>不需要进行<code>git init</code>仓库已经初始化好了</li><li>不需要保存项目地址，会自动添加（origin）</li><li>完整的把远程库下载到本地</li></ol></li><li>将本地仓库提交到远程库  <ul><li><code>git push &lt;别名&gt; &lt;推送的分支&gt;</code></li><li>ps：如果当前提交的这个项目自己不在这个项目的团队中的话会提交失败</li></ul></li><li>拉取远程仓库中的更新<ul><li><code>git pull &lt;别名&gt; &lt;抓取的分支&gt;</code></li></ul><ol><li><code>git fetch &lt;别名&gt; &lt;抓取的分支&gt;</code><ul><li>这一步只是将远程仓库中的内容抓取下来，但是还没有对我们本地工作区进行修改，如果需要要切换到对应的版本，使用 <code>git checkout &lt;别名&gt;/&lt;分支名&gt;</code>即可</li></ul></li><li>切换到本地工作区中被合并的分支上 <code>git checkout &lt;被合并的分支&gt;</code></li><li>将远程仓库的分支合并到需要被合并的分支上 <code>git merge &lt;别名&gt;/&lt;被合并的分支&gt;</code><br>ps：pull = fetch+merge，如果更新的远程数据比较简单、不太会产生冲突的话使用<code>pull</code>, 但是更新的数据比较复杂时推荐使用分步操作。<br>如果两个人修改了同一个地方，第一个提交到远程仓库的人可以提交成功，但是第二个就不行。这种情况第二个人需要  </li><li>将本地工作区中的更改提交到本地仓库</li><li>将代码拉取来下</li><li>解决冲突</li><li>提交</li></ol></li></ul><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p>有A、B两个人，A找B开发项目但是B不能跳槽到A的团队去</p><ol><li>B把A的项目fork一份</li><li>B把fork下来的项目clone到本地</li><li>B完成A给的任务，fork下来的远程库上</li><li>B发起pull request</li><li>A审核，审核ok后合并分支</li></ol><h2 id="设置ssh登录"><a href="#设置ssh登录" class="headerlink" title="设置ssh登录"></a>设置ssh登录</h2><ol><li>进入用户的根目录 <code>cd ~</code></li><li>删除以前的ssh <code>rm -r .ssh/</code> 如果没有就不用删</li><li>生成ssh <code>ssh-keygen -t rsa -C &lt;第三方仓库的账号（邮箱）&gt;</code> C是大写的！！</li><li>进入到.ssh目录中 <code>cd ./.ssh/</code></li><li>打开目录中的id_rsa.pub文件 <code>cat id_rsa.pub</code> 并复制里面的内容</li><li>进入到第三方仓库中设置ssh公钥</li><li>新建一个远程ssh连接的别名 <code>git remote add &lt;别名&gt; &lt;ssh地址&gt;</code></li><li>使用ssh登录就要将推送的别名更改为刚刚设置的ssh的别名 </li></ol><h2 id="eclipse-Git插件"><a href="#eclipse-Git插件" class="headerlink" title="eclipse Git插件"></a>eclipse Git插件</h2><ul><li>将工程初始化为一个git工程（右键-&gt;theam-&gt;share project-&gt;git）</li></ul><h2 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/git/git%E5%91%BD%E4%BB%A4/gitflow.png" alt="git工作流"></p><ul><li>A为分发任务的，B为程序员</li></ul><ol><li>创建主分支</li><li>A分发一个需求到B，B创建一个分支（new）用来完成这个功能</li><li>B完成之后提交到远程库</li><li>A拉取远程库中的new分支，检查有没有bug，这个功能通不通过，如果不通过就叫A改，如果通过就合并到主分支</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> git </category>
          
          <category> 代码管理 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> git </tag>
            
            <tag> 代码管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Boot 错误记录</title>
      <link href="2020/02/05/spring-boot/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
      <url>2020/02/05/spring-boot/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="无法通过-params-给映射对象中的-Map-类型传值"><a href="#无法通过-params-给映射对象中的-Map-类型传值" class="headerlink" title="无法通过 params 给映射对象中的 Map 类型传值"></a>无法通过 params 给映射对象中的 Map 类型传值</h1><ul><li><p>版本：</p><ul><li>spring-boot：<code>2.2.13RELEASE</code></li></ul></li><li><p>问题描述：</p><p>无法直接在路径地址后面拼接参数给映射对象中map属性传值</p><p>例：<code>http://localhost:8080/list?id=1&amp;role.id=1&amp;map.a=2</code></p><p>在这个例子中Entity类中的map无法被正确的映射值，但是 <code>role.id</code> 却可以映射到值</p><p>猜测是 路径中的 <code>map.a</code> 无法被映射到正确的类型所以boot就没有对map进行映射，<code>map.a=2</code> 中的 <code>2</code> 可能是 string 也可能是 int 类型</p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------Role.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------Entity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt;)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Entity entity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案</p><ul><li><p>在 <code>controller</code> 中的参数列表中加入 <code>@RequestBody</code> 注解</p></li><li><pre><code class="java">@GetMapping(&quot;/list&quot;)@ResponseBodypublic String list(@RequestBody Entity entity) &#123;    return &quot;success&quot;;&#125;</code></pre></li><li><p>然后前台请求时不要在 <code>params</code> 中传递参数，在 <code>body</code> 中传递参数即可</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/spring-boot/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/image-20210317205432768.png" alt="image-20210317205432768"></p><ul><li>这样就可以拿到 <code>map.a</code> 的属性值了</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring-boot </category>
          
          <category> 框架 </category>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误记录 </tag>
            
            <tag> java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 学习笔记</title>
      <link href="2020/01/05/spring-boot/spring-boot/"/>
      <url>2020/01/05/spring-boot/spring-boot/</url>
      
        <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://spring.io/projects/spring-boot">spring.io</a></p><h1 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h1><blockquote><p>  Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>  We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</p></blockquote><p>使用Spring Boot可以轻松地创建独立的，基于生产级别的Spring的应用程序，您可以“运行”它们。</p><p>我们对Spring平台和第三方库有默认的设置，这样您就可以从零开始。大多数Spring引导应用程序只需要最小的Spring配置。</p><h1 id="怎么下？"><a href="#怎么下？" class="headerlink" title="怎么下？"></a>怎么下？</h1><h2 id="使用maven"><a href="#使用maven" class="headerlink" title="使用maven"></a>使用maven</h2><p>创建一个简单的maven项目在pom文件中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加一个父项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加springboot依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就搭建了一个简单的springboot项目</p><h2 id="使用springboot构建器（spring-initialier）"><a href="#使用springboot构建器（spring-initialier）" class="headerlink" title="使用springboot构建器（spring initialier）"></a>使用springboot构建器（spring initialier）</h2><p>使用spring initialier构建springboot项目非常简单</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200610080858326.png" alt="image-20200610080858326"></p><p>只需要在这一步选择需要的模块即可</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200610080945287.png" alt="image-20200610080945287"></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>spring-boot默认的配置文件为<strong>application.properties</strong>和<strong>application.yml</strong></p><h2 id="YMAL"><a href="#YMAL" class="headerlink" title="YMAL"></a>YMAL</h2><h3 id="YMAL语法"><a href="#YMAL语法" class="headerlink" title="YMAL语法"></a>YMAL语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><code>yaml</code> 语法以键值对的形式使用 <strong>键值对</strong> 形式存储数据 (k: v)</li><li>大小写敏感</li><li>冒号后面的 <strong>空格</strong> 是必须要的</li></ul><h4 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h4><ul><li><p>字面量</p><ul><li><p>布尔、字符串、数字都可以直接写</p></li><li><p>字符串默认可以不用加 <code>&quot;&quot;</code> 和 <code>&#39;&#39;</code> </p></li><li><p>如果字符串加了<code>&quot;&quot;</code>则不会转义值中的特殊字符。例：</p><blockquote><p>k: “123 \n 456”</p><p>输出:<br>123<br>[…这里是换行…]<br>456</p></blockquote></li><li><p>如果添加了<code>&#39;&#39;</code>则会转义值中的特殊字符</p></li></ul><blockquote><p>k: ‘123 \n 456’</p><p>输出: 123 \n 456</p></blockquote></li></ul><ul><li><p>对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> </span><br><span class="line"><span class="attr">v1:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">v2:</span> <span class="number">456</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> &#123;<span class="attr">v1:</span> <span class="number">123</span>, <span class="attr">v2:</span> <span class="number">456</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置文件注入值"><a href="#配置文件注入值" class="headerlink" title="配置文件注入值"></a>配置文件注入值</h2><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rens:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">qwq</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">date:</span> <span class="number">2019</span><span class="string">/12/12</span></span><br><span class="line">  <span class="attr">is_man:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">a:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">qaq</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;rens&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rens</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean isMan;</span><br><span class="line">    <span class="keyword">private</span> Map a;</span><br><span class="line">    <span class="keyword">private</span> List lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br></pre></td></tr></table></figure><blockquote><p>注意：@ConfigurationProperties注解并不能将组件加入到容器中，要完成配置文件注入的功能必须还要将组件加入到容器中</p></blockquote><p>在pom文件中导入配置文件处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="properties文件注入时乱码"><a href="#properties文件注入时乱码" class="headerlink" title="properties文件注入时乱码"></a>properties文件注入时乱码</h3><p>解决办法：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/properties%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81.png" alt="image-20200325092529457"></p><h2 id="引入自定义配置文件"><a href="#引入自定义配置文件" class="headerlink" title="引入自定义配置文件"></a>引入自定义配置文件</h2><p>使用@Import注解来引入yml/properties配置文件</p><p>使用@ImportResources注解来引入xml配置文件</p><h2 id="ConfigurationProperties和-Value获取值的区别"><a href="#ConfigurationProperties和-Value获取值的区别" class="headerlink" title="@ConfigurationProperties和@Value获取值的区别"></a>@ConfigurationProperties和@Value获取值的区别</h2><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr><tr><td>功能</td><td>批量注入配置文件中的值</td><td>一个一个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303</td><td>支持</td><td>不支持</td></tr></tbody></table><p>需要批量注入值时使用@ConfigurationProperties</p><p>只需要获得配置文件中某项值时使用@Value</p><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件中可以使用随机数：</p><p>${random.value} ${random.int} ${random.long} ${random.int(10)} ${random.int[10, 20]}。。。</p><p>属性配置占位符</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service:</span></span><br><span class="line"><span class="attr">prot:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">$&#123;service.prot&#125;</span></span><br></pre></td></tr></table></figure><p>配置文件中可以使用之前定义过的值</p><h2 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h2><p><code>RandomValuePropertySource</code> 对于随机值注入非常有用（比如在保密场景或者测试用例中)。它可以产生 integer、long、uuid 和 string。如下示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my.secret</span>=<span class="variable">$&#123;random.value&#125;</span></span><br><span class="line"><span class="attr">my.number</span>=<span class="variable">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">my.bignumber</span>=<span class="variable">$&#123;random.long&#125;</span></span><br><span class="line"><span class="attr">my.uuid</span>=<span class="variable">$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">my.number.less.than.ten</span>=<span class="variable">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="attr">my.number.in.range</span>=<span class="variable">$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure><p><code>random.int*</code> 语法为 <code>OPEN value (,max) CLOSE</code>，<code>OPEN,CLOSE</code> 可为任意字符，<code>value,max</code> 为整数。如果使用了 <code>max</code>，<code>value</code> 则为最小值，<code>max</code> 为最大值。</p><h2 id="多Profile文件"><a href="#多Profile文件" class="headerlink" title="多Profile文件"></a>多Profile文件</h2><p>在springboot中可以使用<strong>application[-profile].properties/yml</strong>来创建多个不同环境的配置文件</p><h2 id="yaml文档块"><a href="#yaml文档块" class="headerlink" title="yaml文档块"></a>yaml文档块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">a:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">a:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev2</span></span><br></pre></td></tr></table></figure><p>在yaml中可以使用<code>---</code>来分割</p><h2 id="激活profile环境"><a href="#激活profile环境" class="headerlink" title="激活profile环境"></a>激活profile环境</h2><h3 id="配置文件中激活"><a href="#配置文件中激活" class="headerlink" title="配置文件中激活"></a>配置文件中激活</h3><p>使用spring.profiles.active来激活指定的环境</p><h3 id="命令行中激活"><a href="#命令行中激活" class="headerlink" title="命令行中激活"></a>命令行中激活</h3><p>–spring.profiles.active=dev</p><p>虚拟机中激活</p><p>-Dspring.profiles.active=dev</p><h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><h3 id="配置文件默认加载位置"><a href="#配置文件默认加载位置" class="headerlink" title="配置文件默认加载位置"></a>配置文件默认加载位置</h3><p>spring-boot默认从以下位置加载配置文件</p><ol><li> <code>file:./config/</code></li><li> <code>file:./config/*/</code></li><li> <code>file:./</code></li><li> <code>classpath:/config/</code></li><li> <code>classpath:/</code></li></ol><p>优先级从上到下</p><p>spring-boot会从以上路径从上到下依次加载；如果配置文件中有相同的属性则会以高优先级的为准</p><h3 id="修改默认配置文件名称"><a href="#修改默认配置文件名称" class="headerlink" title="修改默认配置文件名称"></a>修改默认配置文件名称</h3><p>spring-boot默认会去查找名称为<strong>application</strong>的配置文件</p><p>如果不喜欢默认的application名称，可以使用<code>spring.config.name</code>来更改默认名称</p><h3 id="指定配置文件位置"><a href="#指定配置文件位置" class="headerlink" title="指定配置文件位置"></a>指定配置文件位置</h3><h4 id="spring-config-location"><a href="#spring-config-location" class="headerlink" title="spring.config.location"></a>spring.config.location</h4><p>spring-boot中可以使用<strong>spring.config.location</strong>来指定配置文件的位置，<strong>默认位置配置将被替代</strong></p><p>例如，如果 <code>spring.config.location</code> 配置为 <code>classpath:/custom-config/,file:./custom-config/</code>，搜索顺序将变为以下：</p><ol><li> <code>file:./custom-config/</code></li><li> <code>classpath:custom-config/</code></li></ol><p>==该属性在spring项目的配置文件中指定是无效的，必须使用命令行参数指定==</p><p>命令行指定的配置文件则指定的那个配置文件为最高优先级</p><p><strong>使用方法：</strong></p><p>将项目打包后使用如下命令</p><p><code>java -jar xxx.jar --spring.config.location=d:a/qwq.yml</code></p><p>如果指定的是一个<strong>目录而不是文件</strong>则会查找该目录下的<strong>application.yml/.properties</strong></p><blockquote><p>  ⚠️注意：如果指定的是一个目录必须在末尾写上‘/’；</p><p>  例：</p><p>  ​    spring.config.location=d:config/ (√)</p><p>  ​    spring.config.location=d:config (×)</p></blockquote><h4 id="spring-config-additional-location"><a href="#spring-config-additional-location" class="headerlink" title="spring.config.additional-location"></a>spring.config.additional-location</h4><p>或者，当使用 <code>spring.config.additional-location</code> 配置自定义配置位置时，除了使用默认位置外，还会使用它们。这些其他（additional）位置将在默认位置之前搜索。例如，如果将其他位置配置为 <code>classpath:/custom-config/,file:./custom-config/</code>，则搜索顺序将变为以下内容：</p><ol><li> <code>file:./custom-config/</code></li><li> <code>classpath:custom-config/</code></li><li> <code>file:./config/</code></li><li> <code>file:./</code></li><li> <code>classpath:/config/</code></li><li> <code>classpath:/</code></li></ol><p>该搜索顺序允许您在一个配置文件中指定默认值，然后有选择地覆盖另一个配置文件中的值。您可以在 <code>application.properties</code>（或您使用 <code>spring.config.name</code> 指定的其他文件）中的某个默认位置为应用程序提供默认值。之后，在运行时，这些默认值将被自定义位置中的某个文件所覆盖。</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>==springboot日志框架默认采用的是slf4g和logback；==</p><h2 id="slf4g使用"><a href="#slf4g使用" class="headerlink" title="slf4g使用"></a>slf4g使用</h2><h3 id="如何在系统中使用slf4g"><a href="#如何在系统中使用slf4g" class="headerlink" title="如何在系统中使用slf4g"></a>如何在系统中使用slf4g</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/concrete-bindings.png" alt="img"></p><p>每一个日志框架都有自己的配置文件，使用slf4g以后配置文件还是需要<strong>使用具体实现框架自己本身的配置文件</strong></p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>在实际的开发中需要使用到多个框架，如spring、hibernate、mybatis…往往这些框架底层使用的日志框架都有所不同，spring(commons-logging)、hibernate(jboss-logging)，我们需要解决这一问题。统一的将日志框架的实现都改为slf4g</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/legacy.png" alt="click to enlarge"></p><h2 id="如何让系统中所有的日志都统一到slf4j"><a href="#如何让系统中所有的日志都统一到slf4j" class="headerlink" title="如何让系统中所有的日志都统一到slf4j:"></a><strong>如何让系统中所有的日志都统一到slf4j:</strong></h2><ol><li> 先将系统中其他日志框架先排除出去；</li><li> 用中间包来替换原有的日志框架；</li><li> 我们导入slf4j其他的实现；</li></ol><h2 id="spring-boot日志关系"><a href="#spring-boot日志关系" class="headerlink" title="spring-boot日志关系"></a>spring-boot日志关系</h2><p>springboot中使用它来做日志功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层依赖关系：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200610091059443.png" alt="image-20200610091059443"></p><h1 id="WEB开发"><a href="#WEB开发" class="headerlink" title="WEB开发"></a>WEB开发</h1><h2 id="静态资源的映射"><a href="#静态资源的映射" class="headerlink" title="静态资源的映射"></a>静态资源的映射</h2><p>springBoot默认访问的静态路径的位置：</p><ul><li><p>classpath:\MATE-INFO\resources</p></li><li><p>classpath:\resources</p></li><li><p>classpath:\static</p></li><li><p>classpath:\public</p></li><li><p>\   (项目根路径)</p></li></ul><blockquote><p>改变默认的静态资源路径可以在配置文件中使用<code>spring.resources.static-locations</code>属性更改</p></blockquote><h2 id="开发期间禁用缓存"><a href="#开发期间禁用缓存" class="headerlink" title="开发期间禁用缓存"></a>开发期间禁用缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 禁用缓存</span><br><span class="line">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure><p>按<code>ctrl</code>+<code>f9</code>重新编译项目</p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><p>引入thymeleaf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="thymeleaf使用-amp-语法"><a href="#thymeleaf使用-amp-语法" class="headerlink" title="thymeleaf使用&amp;语法"></a>thymeleaf使用&amp;语法</h4><p>具体使用可以查看<a href="../thymeleaf/thymeleaf.md">thymeleaf.md</a></p><blockquote><p>在html标签中添加<code>xmlns:th=&quot;http://www.thymeleaf.org/&quot;</code>属性编写时就会出现提示了</p></blockquote><h5 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure><p>spring-boot中为我们自动配置了thymeleaf的配置项，只要在<code>classpath:/templates</code>中的html文件会自动使用thyemeleaf模板语法来解析</p><h5 id="Thymeleaf常用语法"><a href="#Thymeleaf常用语法" class="headerlink" title="Thymeleaf常用语法"></a>Thymeleaf常用语法</h5><ul><li><p>${} </p><p>用于获取变量值</p><blockquote><p>这里的${}并不是el表达式而是ognl</p></blockquote></li><li><p>*{}</p><p>与${}的作用类似，一般与<code>th:object</code>一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;#session.qwq&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- *&#123;name&#125; 相当于 $&#123;session.qwq.name&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@{}</p><p>  链接网址</p></li><li><p>#{}</p></li><li><p>~{}</p></li><li><p>[()], [[]]</p></li></ul><h5 id="Thymeleaf内置对象"><a href="#Thymeleaf内置对象" class="headerlink" title="Thymeleaf内置对象"></a>Thymeleaf内置对象</h5><p>Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p><ul><li>一些环境相关对象</li></ul><table><thead><tr><th>对象</th><th>作用</th></tr></thead><tbody><tr><td><code>#ctx</code></td><td>获取Thymeleaf自己的Context对象</td></tr><tr><td><code>#requset</code></td><td>如果是web程序，可以获取HttpServletRequest对象</td></tr><tr><td><code>#response</code></td><td>如果是web程序，可以获取HttpServletReponse对象</td></tr><tr><td><code>#session</code></td><td>如果是web程序，可以获取HttpSession对象</td></tr><tr><td><code>#servletContext</code></td><td>如果是web程序，可以获取HttpServletContext对象</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>Thymeleaf提供的全局对象：</li></ul><table><thead><tr><th>对象</th><th>作用</th></tr></thead><tbody><tr><td><code>#dates</code></td><td>处理java.util.date的工具对象</td></tr><tr><td><code>#calendars</code></td><td>处理java.util.calendar的工具对象</td></tr><tr><td><code>#numbers</code></td><td>用来对数字格式化的方法</td></tr><tr><td><code>#strings</code></td><td>用来处理字符串的方法</td></tr><tr><td><code>#bools</code></td><td>用来判断布尔值的方法</td></tr><tr><td><code>#arrays</code></td><td>用来护理数组的方法</td></tr><tr><td><code>#lists</code></td><td>用来处理List集合的方法</td></tr><tr><td><code>#sets</code></td><td>用来处理set集合的方法</td></tr><tr><td><code>#maps</code></td><td>用来处理map集合的方法</td></tr></tbody></table><h5 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h5><ul><li><p>字符串</p><p>使用<code>&#39;&#39;</code>标注起来的就是一个字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  你正在观看 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;thymeleaf&#x27;&quot;</span>&gt;</span>template<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的字符串常量值.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不使用<code>&#39;&#39;</code>标注好像也会识别成一个字符串</p></li><li><p>数字</p><p>数字不需要进行任何标注直接使用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;12+13&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>布尔</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    你填的是true</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h5><p>字符串拼接</p><p>字符串字面值需要用<code>&#39;&#39;</code>，拼接起来非常麻烦，Thymeleaf对此进行了简化，使用一对<code>|</code>即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;|欢迎您:$&#123;user.name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h5><p>需要注意：<code>$&#123;&#125;</code>内部的是通过OGNL表达式引擎解析的，外部的才是通过Thymeleaf的引擎解析，因此运算符尽量放在<code>$&#123;&#125;</code>外进行。</p><ul><li><p>算术运算</p><p>支持的算术运算符：<code>+ - * / %</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age+12&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>         //21</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;%2 == 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  //false</span><br></pre></td></tr></table></figure></li><li><p>比较运算</p><p>支持的比较运算：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code> ，但是<code>&gt;</code>, <code>&lt;</code>不能直接使用，因为xml会解析为标签，要使用别名。==（3.0.11可以直接使用）==</p><p>注意 <code>==</code> and <code>!=</code>不仅可以比较数值，类似于equals的功能。</p><p>可以使用的别名：<code>gt (&gt;), lt (&lt;), ge (&gt;=), le (&lt;=), not (!). Also eq (==), neq/ne (!=).</code></p></li><li><p>条件运算</p><ul><li>三元运算</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.sex&#125; ? &#x27;男&#x27;:&#x27;女&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>默认值</p><p>有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 <code>表达式 ?: 默认值</code>简写：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text&#x3D;&quot;$&#123;user.name&#125; ?: &#39;二狗&#39;&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>当前面的表达式值为null时，就会使用后面的默认值。</p><p>注意：<code>?:</code>之间没有空格。</p></li></ul><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>循环也是非常频繁使用的需求，我们使用<code>th:each</code>指令来完成：</p><p>假如有用户的集合：users在Context中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>${users} 是要遍历的集合，可以是以下类型：<ul><li>Iterable，实现了Iterable接口的类</li><li>Enumeration，枚举</li><li>Interator，迭代器</li><li>Map，遍历得到的是Map.Entry</li><li>Array，数组及其它一切符合数组结果的对象</li></ul></li></ul><p>在迭代的同时，我们也可以获取迭代的状态对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,stat : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>stat对象包含以下属性：</p><ul><li>index，从0开始的角标</li><li>count，元素的个数，从1开始</li><li>size，总元素个数</li><li>current，当前遍历到的元素</li><li>even/odd，返回是否为奇偶，boolean值</li><li>first/last，返回是否为第一或最后，boolean值</li></ul><h5 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h5><p>有了<code>if和else</code>，我们能实现一切功能^_^。</p><p>Thymeleaf中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age&#125; &gt; 24&quot;</span>&gt;</span>老油条<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果表达式的值为true，则标签会渲染到页面，否则不进行渲染。</p><p>以下情况被认定为true：</p><ul><li>表达式值为true</li><li>表达式值为非0数值</li><li>表达式值为非0字符</li><li>表达式值为字符串，但不是<code>&quot;false&quot;</code>,<code>&quot;no&quot;</code>,<code>&quot;off&quot;</code></li><li>表达式不是布尔、字符串、数字、字符中的任何一种</li></ul><p>其它情况包括null都被认定为false</p><h5 id="分支控制switch"><a href="#分支控制switch" class="headerlink" title="分支控制switch"></a>分支控制switch</h5><p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>用户是管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;manager&#x27;&quot;</span>&gt;</span>用户是经理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>用户是别的玩意<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。</p><p>另外<code>th:case=&quot;*&quot;</code>表示默认，放最后。</p><h5 id="JS模板"><a href="#JS模板" class="headerlink" title="JS模板"></a>JS模板</h5><p>模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> user = <span class="comment">/*[[$&#123;user&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = <span class="comment">/*[[$&#123;user.age&#125;]]*/</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</p></li><li><p>语法结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="comment">/*[[Thymeleaf表达式]]*/</span> <span class="string">&quot;静态环境下的默认值&quot;</span>;</span><br></pre></td></tr></table></figure><p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。且User对象会被直接处理为json格式。</p></li></ul><h3 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h3><p><a href="../freemarker/README.md">freemarker.md</a></p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>由于spring-boot为我们配置了国际化的配置，所以我们只需要写国际化配置文件</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/%E5%9B%BD%E9%99%85%E5%8C%96.png" alt="国际化"></p><p>但是spring-boot的默认配置国际化配置文件的格式是在类路径下寻找message[_国家代码].properties文件，如果要修改默认配置需要在配置文件中修改<code>spring.message.basename</code>的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class: MessageSourceAutoConfiguration</span></span><br><span class="line"><span class="comment">// 这里将MessageSourceProperties类加入到容器中并将配置文件中的spring.messages的配置映射到该组件中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="comment">// 在这里设置了查找国际化文件的basename</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        messageSource.setBasenames(StringUtils</span><br><span class="line">                                   .commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将国际化文件中写入值之后如果使用的<strong>thymeleaf</strong>模板则使用#{}取值即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;submit&#125;&quot;</span>&gt;</span> 立即登录!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上国际化就完成了，但是如果想实现点击对应语言的链接就转换成对应的语言就需要在容器中添加一个<code>LocaleResolver</code>（地区解析器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的LocaleResolver</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的LocaleResolver</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocaleResolver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取国家语言参数</span></span><br><span class="line">            String localeStr = request.getParameter(<span class="string">&quot;locale&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明存放语言和国家数组</span></span><br><span class="line">            String[] language_country = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果没有携带国家语言参数就使用浏览器默认传递的</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(localeStr)) &#123;</span><br><span class="line">                language_country = localeStr.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                language_country = request.getHeader(<span class="string">&quot;Accept-Language&quot;</span>)</span><br><span class="line">                    .split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                    .split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Locale(language_country[<span class="number">0</span>], language_country[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在springmvc的自动配置类中为我们添加了默认的LocaleResolver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在spring-boot实现拦截器非常简单，以下用登录做示例</p><ol><li><p>创建一个我们自己的拦截器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个拦截器类都必须实现HandlerInterceptor类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在跳转之前调用的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String userName = (String) request.getSession().getAttribute(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(userName))&#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/login.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 拦截所有请求</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login.html&quot;</span>, <span class="string">&quot;/user/login&quot;</span>); <span class="comment">// 不拦截其中的请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>springboot会对不同的客户端进行不同的相应（网页端出现错误时会返回页面，其他客户端若未标明需要接受网页的话则返回json数据）</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200423100634694.png" alt="image-20200423100634694"></p><h3 id="错误页面定制"><a href="#错误页面定制" class="headerlink" title="错误页面定制"></a>错误页面定制</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200423095450376.png" alt="image-20200423095450376"></p><p>只需要在resources文件下的static或templetes文件夹下放置包含错误页面的error文件夹即可</p><h4 id="错误文件注意事项"><a href="#错误文件注意事项" class="headerlink" title="错误文件注意事项"></a>错误文件注意事项</h4><ul><li><p>错误文件的命名可以为准确的错误代码名（如：404.html, 405.html）</p></li><li><p>命名也可以为4xx.html或5xx.html</p></li><li><p>springboot优先精准匹配（当发生404错误时如果有404.html和4xx.html就会优先使用404.html）</p></li><li><p>springboot优先使用templetes中的错误文件</p></li></ul><h2 id="自定义错误json"><a href="#自定义错误json" class="headerlink" title="自定义错误json"></a>自定义错误json</h2><ol><li>springmvc中处理异常的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UserMiss.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">error</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法有个缺点，返回的数据全是json不会返回页面</p><ol start="2"><li><p>改进上一个方法使得可以自适应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UserMiss.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;ext&quot;</span>, map);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2虽然可以做到自适应但是无法做到自定义数据，也就是map中定义的数据无法传递到客户端</p><p>注意：必须要向request中添加status_code，因为默认的状态码为200，状态码为200的话会导致找不到错误页面而使用springboot默认的错误页</p></li><li><p>做到自适应的同时添加自定义数据</p><p>从源码可知数据是从<code>ErrorAttributes.getErrorAttributes</code>方法中获取的所以只需要重写<code>getErrorAttributes</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map =  <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">&quot;qwq&quot;</span>, <span class="string">&quot;qwq&quot;</span>);</span><br><span class="line">        <span class="comment">// 从request域中查找添加进来的数据</span></span><br><span class="line">        map.put(<span class="string">&quot;ext&quot;</span>, webRequest.getAttribute(<span class="string">&quot;ext&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>向容器中添加<code>BasicErrorController</code>类并重写<code>errorHtml</code>和<code>error</code>方法。</p><p>太麻烦了，略过</p></li></ol></li></ol><h2 id="错误处理原理"><a href="#错误处理原理" class="headerlink" title="错误处理原理"></a>错误处理原理</h2><p>详情见类</p><p>springboot为此类添加了一下几个重要的组件</p><ol><li><p>ErrorPageCustomizer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">&quot;/error&quot;</span>; <span class="comment">// 出现错误时来到error请求进行处理</span></span><br></pre></td></tr></table></figure></li><li><p>BasicErrorController 处理默认/error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span> <span class="comment">// ：代表如果没有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public static final String TEXT_HTML_VALUE = &quot;text/html&quot;;</span></span><br><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span> <span class="comment">// 响应需要传回页面的请求</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections</span><br><span class="line">.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法未写@ResponseBody注解也能返回json数据的原因是ResponseEntity类和@ResponseBody一样不会被解析成视图，但是ResponseEntity可以自定义响应头和状态码，@ResponseBody不行</span></span><br><span class="line"><span class="meta">@RequestMapping</span> <span class="comment">// 响应未标注text/html的请求</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line"><span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DefaultErrorViewResolver </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">Map&lt;Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(Series.class);</span><br><span class="line">views.put(Series.CLIENT_ERROR, <span class="string">&quot;4xx&quot;</span>);</span><br><span class="line">views.put(Series.SERVER_ERROR, <span class="string">&quot;5xx&quot;</span>);</span><br><span class="line">SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// resolveErrorView方法用于将错误码传入resolve查找错误页面，如果有就返回错误页面；如果没有就将错误系列传入再进行查找（错误系列为1,2,3,4,5；详情见HttpStatus类）但由于springboot只绑定了4和5的错误系列，所以出现其他系列的错误时会因为集合中没有绑定所以会返回默认的页面</span></span><br><span class="line">    <span class="comment">// 因为先查找的是精确的错误码所以才会优先显示精确错误码.html的页面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve方法用于查找错误视图。查找规则为：将由resolveErrorView方法传递过来的错误码或错误系列（4xx, 5xx）拼接到error/后再从templates文件夹中查找相关的文件，如果没有找到再调用resolveResource方法从静态资源文件夹中查找 （&quot;classpath:/META-INF/resources/&quot;,&quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line"><span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolveResource用于从静态资源目录中查找文件，如果没有查询到会返回null</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> HtmlResourceView(resource), model);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DefaultErrorAttributes   获取错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">addStatus(errorAttributes, webRequest);</span><br><span class="line">addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">addPath(errorAttributes, webRequest);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以获取的错误信息有：</p><p>timestamp：时间戳</p><p>status：状态码</p><p>error：错误提示</p><p>exception：异常对象</p><p>message：错误消息</p><p>errors：JSR303数据校验的错误信息</p></li></ol><p>顺序：当程序出现4xx或5xx错误时<code>ErrorPageCustomizer</code>就会生效（定制错误的响应规则），来到/error请求；</p><p>/error请求由<code>BasicErrorController</code>来进行响应；再由<code>DefaultErrorViewResolver</code>进行处理（<code>BasicErrorController</code>调用<code>resolveErrorView</code>方法查找错误视图【由于默认springboot中只有一个<code>ErrorViewResolver</code>的实现类所以会调用到 <code>DefaultErrorViewResolver</code>来处理】，如果没有查找到错误视图springboot会创建一个默认的错误页面）得到的modelandview中model中包含的信息从<code>DefaultErrorAttributes</code>  中获取的</p><h1 id="嵌入式servlet容器"><a href="#嵌入式servlet容器" class="headerlink" title="嵌入式servlet容器"></a>嵌入式servlet容器</h1><h2 id="修改与server有关的配置"><a href="#修改与server有关的配置" class="headerlink" title="修改与server有关的配置"></a>修改与server有关的配置</h2><h3 id="使用配置文件配置-ServerProperties"><a href="#使用配置文件配置-ServerProperties" class="headerlink" title="使用配置文件配置[ServerProperties]"></a>使用配置文件配置[ServerProperties]</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.post</span> = <span class="string">8081</span></span><br><span class="line"><span class="meta">server.error.path</span>=<span class="string">/error2</span></span><br><span class="line"><span class="comment"># server.xxx 为server的通用配置</span></span><br><span class="line"><span class="comment"># server.tomcat.xxx 为Tomcat的通用配置</span></span><br></pre></td></tr></table></figure><h3 id="使用Servlet容器定制器"><a href="#使用Servlet容器定制器" class="headerlink" title="使用Servlet容器定制器"></a>使用Servlet容器定制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer <span class="title">webServerFactoryCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8082</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者的配置方式虽然不同，但是在配置文件在底层也是使用servlet容器定制器实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryCustomizer</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br></pre></td></tr></table></figure><h2 id="配置servlet三大组件（servlet，filter，Listener）"><a href="#配置servlet三大组件（servlet，filter，Listener）" class="headerlink" title="配置servlet三大组件（servlet，filter，Listener）"></a>配置servlet三大组件（servlet，filter，Listener）</h2><p>只需要在配置类中添加ServletRegistrationBean、、组件</p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;servlet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置Servlet</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean&lt;MyServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(), <span class="string">&quot;/servlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter...&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置filter</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;MyFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/servlet&quot;</span>, <span class="string">&quot;/hello&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切换其他servlet容器"><a href="#切换其他servlet容器" class="headerlink" title="切换其他servlet容器"></a>切换其他servlet容器</h2><p>Tomcat（默认使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入web模块时默认使用的servlet容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jetty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>undertow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌入式servlet容器自动配置原理"><a href="#嵌入式servlet容器自动配置原理" class="headerlink" title="嵌入式servlet容器自动配置原理"></a><a href="https://www.cnblogs.com/jatpeo/p/11767502.html">嵌入式servlet容器自动配置原理</a></h2><p><code>ServletWebServerFactoryAutoConfiguration</code>：嵌入式servlet自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="comment">// 仅在类 ServletRequest 存在于 classpath 上时才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class="line"><span class="comment">// 应用为 servlet web 应用是才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="comment">// 确保 server 开头的配置加入到容器中了</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="comment">// 导入两个后置处理器：webServerFactoryCustomizerBeanPostProcessor和errorPageRegistrarBeanPostProcessor</span></span><br><span class="line"><span class="comment">// 导入的EmbeddedTomcat/EmbeddedJetty/EmbeddedUndertow会通过判断classpath上是否存在对应的tomcat/jetty/undertow容器，判断当前使用的是哪个容器</span></span><br><span class="line"><span class="comment">// 再决定定义哪一个 Servlet Web服务器的工厂 bean :</span></span><br><span class="line"><span class="comment">// TomcatServletWebServerFactory/JettyServletWebServerFactory/UndertowServletWebServerFactory</span></span><br><span class="line"><span class="meta">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">         ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">         ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">         ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><code>ServletWebServerFactoryAutoConfiguration</code>内部类<code>BeanPostProcessorsRegistrar</code></p><p><code>webServerFactoryCustomizerBeanPostProcessor</code>：收集容器中所有的<code>WebServerFactoryCustomizer</code>对当前应用所采用的<code>WebServerFactory</code> 被初始化前进行定制</p><p><code>ErrorPageRegistrarBeanPostProcessor</code>：收集所有的错误处理定制器注册到对应的servlet容器里面去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">registerSyntheticBeanIfMissing(registry, <span class="string">&quot;webServerFactoryCustomizerBeanPostProcessor&quot;</span>,</span><br><span class="line">WebServerFactoryCustomizerBeanPostProcessor.class);</span><br><span class="line">registerSyntheticBeanIfMissing(registry, <span class="string">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class="line">ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry, String name, Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(<span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置servlet配置修改原理"><a href="#内置servlet配置修改原理" class="headerlink" title="内置servlet配置修改原理"></a>内置servlet配置修改原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServerFactoryCustomizerBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;WebServerFactoryCustomizer&lt;?&gt;&gt; customizers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        Assert.isInstanceOf(ListableBeanFactory.class, beanFactory,</span><br><span class="line">                            <span class="string">&quot;WebServerCustomizerBeanPostProcessor can only be used with a ListableBeanFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = (ListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断如果当前初始化组件是WebServerFactory 的一个组件，就调用postProcessBeforeInitialization此方法</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> WebServerFactory) &#123;</span><br><span class="line">            postProcessBeforeInitialization((WebServerFactory) bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的定制器，调用每一个定制器的customize方法，来给servlet容器进行属性赋值</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(WebServerFactory webServerFactory)</span> </span>&#123;</span><br><span class="line">        LambdaSafe.callbacks(WebServerFactoryCustomizer.class, getCustomizers(), webServerFactory)</span><br><span class="line">            .withLogger(WebServerFactoryCustomizerBeanPostProcessor.class)</span><br><span class="line">            .invoke((customizer) -&gt; customizer.customize(webServerFactory));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从容器中获取所有WebServerFactoryCustomizer并排序</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;WebServerFactoryCustomizer&lt;?&gt;&gt; getCustomizers() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">            <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;&gt;(getWebServerFactoryCustomizerBeans());</span><br><span class="line">            <span class="keyword">this</span>.customizers.sort(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">            <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从容器中获取所有WebServerFactoryCustomizer</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;WebServerFactoryCustomizer&lt;?&gt;&gt; getWebServerFactoryCustomizerBeans() &#123;</span><br><span class="line">        <span class="keyword">return</span> (Collection) <span class="keyword">this</span>.beanFactory.getBeansOfType(WebServerFactoryCustomizer.class, <span class="keyword">false</span>, <span class="keyword">false</span>).values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌入式servlet容器自动配置原理的步骤"><a href="#嵌入式servlet容器自动配置原理的步骤" class="headerlink" title="嵌入式servlet容器自动配置原理的步骤"></a><strong>嵌入式servlet容器自动配置原理的步骤</strong></h3><ol><li><p><strong>SpringBoot根据导入的依赖情况，容器中导入的ServletWebServerFactoryConfiguration配置类，给容器添加相应的TomcatServletWebServerFactory，通过TomcatServletWebServerFactory的getWebServer（）启动servelt容器</strong></p></li><li><p><strong>容器中某个组件要创建对象就会惊动后置处理器；@Import({ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,只要是嵌入式的Servlet容器工厂，后置处理器就工作，用与定制嵌入式容器的配置修改，</strong></p></li><li><p><strong>后置处理器，执行postProcessBeforeInitialization（）方法，调用定制器的定制方法；</strong></p></li></ol><h3 id="内置servlet容器启动原理"><a href="#内置servlet容器启动原理" class="headerlink" title="内置servlet容器启动原理"></a>内置servlet容器启动原理</h3><ol><li><p>项目启动，springboot调用run方法</p></li><li><p>调用run()过程中调用<code>refreshContext(context);</code>创建并刷新ioc容器</p><ol><li>调用<code>createApplicationContext();</code></li><li>判断当前项目类型，根据项目类型创建对应的ioc容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">    <span class="keyword">case</span> SERVLET:</span><br><span class="line">        <span class="comment">// web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">        contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> REACTIVE:</span><br><span class="line">        <span class="comment">// boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line">        contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">        contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>调用<code>((AbstractApplicationContext) applicationContext).refresh();</code>方法刷新ioc容器</li><li>因为创建的是嵌入式servlet ioc容器所以调用的就是servlet ioc容器的<code>refresh()</code>方法，servlet ioc容器重写了<code>refresh()</code></li><li>调用servlet ioc容器的<code>this.onRefresh();</code>方法</li><li>调用<code>createWebServer();</code>来创建并启动嵌入式servlet容器</li></ol></li></ol><p><strong>先启动嵌入式servlet容器，再将ioc容器中剩下没有创建的组件创建出来</strong></p><p><strong>ioc容器启动就创建嵌入式servlet容器</strong></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装并启动docker"><a href="#安装并启动docker" class="headerlink" title="安装并启动docker"></a>安装并启动docker</h2><ol><li><p>查询liunx内核版本（高与3.10）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果低于3.10就使用<code>yum update</code>更新</p></li><li><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>加入到开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docke</span><br></pre></td></tr></table></figure></li><li><p>停止docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置docker镜像源"><a href="#设置docker镜像源" class="headerlink" title="设置docker镜像源"></a>设置docker镜像源</h2><p><strong>创建或修改 /etc/docker/daemon.json 文件</strong> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">      <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Docker中国区官方镜像</strong><br><strong><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></strong></p><p><strong>网易</strong><br><strong><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></strong></p><p><strong>ustc</strong><br><strong><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></strong></p><p><strong>加载重启docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure><p><strong>查看是否成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br></pre></td></tr></table></figure><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a><a href="https://www.runoob.com/docker/docker-command-manual.html">docker常用命令</a></h2><h3 id="docker镜像操作"><a href="#docker镜像操作" class="headerlink" title="docker镜像操作"></a>docker镜像操作</h3><h4 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="检索镜像"><a href="#检索镜像" class="headerlink" title="检索镜像"></a>检索镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 关键字</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名[:tag]</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名/镜像id</span><br></pre></td></tr></table></figure><h3 id="docker容器操作"><a href="#docker容器操作" class="headerlink" title="docker容器操作"></a>docker容器操作</h3><h4 id="创建并启动"><a href="#创建并启动" class="headerlink" title="创建并启动"></a>创建并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自定义容器名 -d 镜像名:tag</span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag不写默认为latest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并启动容器</span></span><br></pre></td></tr></table></figure><h5 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p 8888:8080</span><br><span class="line">docker run --name tomcat_test -p 8888:8080 -d tomcat:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 将主机端口映射到容器内部端口</span></span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名/容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以批量删除 docker rm mysql1 mysql2 mysql3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动中的容器需要先停止再删除</span></span><br></pre></td></tr></table></figure><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 查看运行中的容器列表</span><br><span class="line">docker ps -a # 查看所有的容器列表</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名/容器id</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名/容器id</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名/容器id</span><br></pre></td></tr></table></figure><h4 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service firewalld status # 查看状态</span><br><span class="line">service firewalld start # 启动</span><br><span class="line">service firewalld stop # 关闭</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> MYSQL_ROOT_PASSWORD root密码, MYSQL_ALLOW_EMPTY 允许空密码, MYSQL_RANDOM_PASSWORD 随机密码</span></span><br></pre></td></tr></table></figure><h1 id="springboot与数据访问"><a href="#springboot与数据访问" class="headerlink" title="springboot与数据访问"></a>springboot与数据访问</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ol><li>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment"># 配置数据源</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.104:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span> <span class="comment"># 在springboot 2.2.6版本中依赖的mysql驱动由com.mysql.jdbc.Driver 改为 com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>springboot默认支持的数据源有</p><ul><li>org.apache.tomcat.jdbc.pool.DataSource # 1.x默认为这个数据源</li><li>com.zaxxer.hikari.HikariDataSource # 2.x默认为这个数据源</li><li>org.apache.commons.dbcp2.BasicDataSource</li></ul></li><li><p>自定义数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Generic DataSource configuration.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过反射创建出数据源再把属性绑定上去</span></span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>项目启动时自动创建表和插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer</span></span><br><span class="line"><span class="comment">// 通过这个方法来获取用来自动执行的sql文件（默认查找类路径下的schema.sql/data.sql;schema-all.sql/data-all.sql）</span></span><br><span class="line"><span class="comment">// 默认规则中的all可以通过spring.datasource.platform来修改</span></span><br><span class="line"><span class="comment">// 可以通过spring.datasource.schema/data来自定义自己的规则</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">getScripts</span><span class="params">(String propertyName, List&lt;String&gt; resources, String fallback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources(propertyName, resources, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String platform = <span class="keyword">this</span>.properties.getPlatform();</span><br><span class="line">    List&lt;String&gt; fallbackResources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fallbackResources.add(<span class="string">&quot;classpath*:&quot;</span> + fallback + <span class="string">&quot;-&quot;</span> + platform + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">    fallbackResources.add(<span class="string">&quot;classpath*:&quot;</span> + fallback + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> getResources(propertyName, fallbackResources, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意：2.x版本需要在配置文件中添加<code>initialization-mode: ALWAYS</code>才能完成自动执行sql==</p></li><li><p>操作数据库</p><p>使用JdbcTemplate操作数据库，具体的自动配置请看org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForList(<span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="整合Druid数据源"><a href="#整合Druid数据源" class="headerlink" title="整合Druid数据源"></a>整合Druid数据源</h2><ol start="0"><li><p>向pom文件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加DruidDataSource基本配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.104:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    initialization-mode: ALWAYS</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># druid配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">600000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">dual</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">    <span class="attr">maxPoolPrepareStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br></pre></td></tr></table></figure></li><li><p>由于这些配置默认是添加到DataSourceProperties类中的，但是DataSourceProperties类中并没有druid的属性，所以需要手动向容器中创建DruidDataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>配置StatViewServlet和WebStatFilter</p><p>仍然在Druid配置类中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),</span><br><span class="line">                <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParameter = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParameter.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;LLQWQ&quot;</span>);</span><br><span class="line">        initParameter.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        initParameter.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        initParameter.put(<span class="string">&quot;deny&quot;</span>, <span class="string">&quot;192.168.1.103&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParameter);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">statViewFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        Map&lt;String, String&gt; initParameter = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParameter.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,*.html,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameter);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><ol><li><p>引入mybatis的整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mapper接口和controller和mybatis的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;sId&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into student(s_name, s_sex) values(#&#123;sName&#125;, #&#123;sSex&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from student where s_id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update student set s_name = #&#123;sName&#125;, s_sex = #&#123;sSex&#125; where s_id = #&#123;sId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student where s_id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Student <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.insert(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.update(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">find</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.ll.springboot.mapper&quot;)</span> <span class="comment">// 开启自动扫描</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向容器中添加mybatis的定制器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">              <span class="comment">// 开启驼峰命名</span></span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><blockquote><p>mybatis整合包中已经为我们配置好了，所以我们并不需要进行过多的配置就可以使用mybatis</p></blockquote><h3 id="配置文件版"><a href="#配置文件版" class="headerlink" title="配置文件版"></a>配置文件版</h3><p>只需要在springboot配置文件中导入一下两个属性即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment"># mybatis全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*-mapper.xml</span> <span class="comment"># sql映射文件位置</span></span><br></pre></td></tr></table></figure><h1 id="spring-boot启动配置原理"><a href="#spring-boot启动配置原理" class="headerlink" title="spring-boot启动配置原理"></a>spring-boot启动配置原理</h1><p><strong>几个重要的类：</strong></p><p><strong>需要在配置文件中指定</strong></p><p><strong>ApplicationListener</strong></p><p><strong>ApplicationContextInitializer</strong></p><p><strong>需要添加到ioc容器中</strong></p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><h2 id="启动流程："><a href="#启动流程：" class="headerlink" title="启动流程："></a><strong>启动流程：</strong></h2><h3 id="1-创建SpringApplication对象"><a href="#1-创建SpringApplication对象" class="headerlink" title="1. 创建SpringApplication对象"></a>1. 创建SpringApplication对象</h3><p>springApplication构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, primarySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被上面的方法所调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、初始化 资源加载器为null</span></span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">// 2、断言主要加载资源类不为空，否则报错</span></span><br><span class="line">    Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 3、初始化主要加载资源类并去重</span></span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 4、判断当前web应用类型 通过判断当前内路径下是否有对应的项目类型</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 5、设置应用上下文初始化加载器</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 6、设置监听器</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 7、推断主入口</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-设置应用上下文初始化加载器（Initializers）"><a href="#1-1-设置应用上下文初始化加载器（Initializers）" class="headerlink" title="1.1 设置应用上下文初始化加载器（Initializers）"></a>1.1 设置应用上下文初始化加载器（Initializers）</h4><p>从第五步开始分析</p><p>getSpringFactoriesInstances相关的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取当前线程上下文类加载器</span></span><br><span class="line">    ClassLoader classLoader = getClassLoader();</span><br><span class="line">    <span class="comment">// 2、获取 ApplicationContextInitializer 的实例名称集合并去重</span></span><br><span class="line">    Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">    <span class="comment">// 根据上面获取的类路径创建初始化器实例列表</span></span><br><span class="line">    List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">    <span class="comment">// 初始化器实例列表排序</span></span><br><span class="line">    AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">    <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getClassLoader()相关的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 程序执行到这一步时resourceLoader默认是null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用Thread.currentThread().getContextClassLoader()获得类加载器</span></span><br><span class="line">    <span class="keyword">return</span> ClassUtils.getDefaultClassLoader();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadFactoryNames相关的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryTypeName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryImplementationName = var9[var11];</span><br><span class="line">                        result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据类路径下的 <code>META-INF/spring.factories</code> 文件解析并获取 <code>ApplicationContextInitializer</code> 接口的所有配置的类路径名称。 </p><p>获得以下<code>ApplicationContextInitializer</code> </p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200517151305532.png" alt="image-20200517151305532"></p><h4 id="1-2-设置监听器（Listeners）"><a href="#1-2-设置监听器（Listeners）" class="headerlink" title="1.2 设置监听器（Listeners）"></a>1.2 设置监听器（Listeners）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br></pre></td></tr></table></figure><p>这一步的步骤是和设置<code>Initializers</code>是一样的，根据类路径下的 <code>META-INF/spring.factories</code> 文件解析并获取 <code>ApplicationListener</code> 接口的所有配置的类路径名称。 </p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/05/spring-boot/spring-boot/image-20200517155020680.png" alt="image-20200517155020680"></p><h4 id="1-3-推断主入口"><a href="#1-3-推断主入口" class="headerlink" title="1.3 推断主入口"></a>1.3 推断主入口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="comment">// Swallow and continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过构造一个运行时异常，再遍历异常栈中的方法名，获取方法名为 main 的栈帧，从而得到入口类的名字再返回该类。 </p><p><code>new RuntimeException().getStackTrace();</code>这一串代码可以获得父/祖父方法到己方法的一个数组</p><h3 id="2-运行run方法"><a href="#2-运行run方法" class="headerlink" title="2. 运行run方法"></a>2. 运行run方法</h3><p>run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、创建并启动计时监控类</span></span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、初始化ioc容器和异常处理报告</span></span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、设置系统属性 java.awt.headless 的值，默认值为：true</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、创建所有 Spring 运行监听器并发布应用启动事件</span></span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    listeners.starting();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 5、初始化默认应用参数</span></span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6、根据监听器和应用参数来准备spring环境</span></span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 7、创建 Banner 打印类</span></span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 8、创建ioc容器</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 9、准备异常报告器</span></span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line">                                                         <span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 10、准备ioc容器</span></span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 11、刷新ioc容器</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 12、ioc容器刷新后置处理</span></span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 13、停止计时监控类</span></span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 14、输出日志记录执行主类名、时间信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 15、发布ioc容器启动完成事件</span></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 16、执行所有 Runner 运行器</span></span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 17、发布应用上下文就绪事件</span></span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 18、返回应用上下文</span></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-创建所有-Spring-运行监听器"><a href="#2-1-创建所有-Spring-运行监听器" class="headerlink" title="2.1 创建所有 Spring 运行监听器"></a>2.1 创建所有 Spring 运行监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建逻辑和之前实例化初始化器和监听器的一样，一样调用的是 <code>getSpringFactoriesInstances</code> 方法来获取配置的监听器名称并实例化所有的类。 </p><h4 id="2-2-根据监听器和应用参数来准备spring环境"><a href="#2-2-根据监听器和应用参数来准备spring环境" class="headerlink" title="2.2 根据监听器和应用参数来准备spring环境"></a>2.2 根据监听器和应用参数来准备spring环境</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取或创建spring环境</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 配置应用环境</span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">                                                                                               deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当项目为什么类型</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">        <span class="keyword">case</span> SERVLET:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">        <span class="keyword">case</span> REACTIVE:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StandardReactiveWebEnvironment();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-创建ioc容器"><a href="#2-3-创建ioc容器" class="headerlink" title="2.3 创建ioc容器"></a>2.3 创建ioc容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据不同的应用类型初始化不同的ioc应用类</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    <span class="comment">// org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    <span class="comment">// org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// org.springframework.context.annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-准备ioc容器"><a href="#2-4-准备ioc容器" class="headerlink" title="2.4 准备ioc容器"></a>2.4 准备ioc容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">                            SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将环境绑定到ioc容器上</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 配置ioc的 bean 生成器及资源加载器, 具体的方法看吐了，不想看了</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">// 为ioc使用所有初始化器</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    <span class="comment">// 触发所有 SpringApplicationRunListener 监听器的 contextPrepared 事件方法</span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">// 记录启动日志</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册两个特殊的单例bean</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置bean是否可以被重定义</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">        .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果Initialization为懒加载的话就添加一个用于懒加载Initialization的后置处理器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">        context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载所有资源</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// 触发所有 SpringApplicationRunListener 监听器的 contextLoaded 事件方法</span></span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-执行所有的-runner-运行器"><a href="#2-5-执行所有的-runner-运行器" class="headerlink" title="2.5 执行所有的 runner 运行器"></a>2.5 执行所有的 runner 运行器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">    List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 从ioc容器中取出runner运行器并排序</span></span><br><span class="line">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">            callRunner((ApplicationRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">            callRunner((CommandLineRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
          <category> spring-boot </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring-boot </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea错误记录</title>
      <link href="2019/09/15/idea/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
      <url>2019/09/15/idea/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="idea-找不到程序包最终解决"><a href="#idea-找不到程序包最终解决" class="headerlink" title="idea,找不到程序包最终解决"></a>idea,找不到程序包最终解决</h1><p>idea编译项目没有报错,build时会提示找不到程序包,试了好多方法都没有效果,最终控制台运行下面命令后,完美解决!!!</p><p><code>mvn idea:idea</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> idea </category>
          
          <category> IDE </category>
          
          <category> 错误记录 </category>
          
          <category> idea </category>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误记录 </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> idea </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 学习笔记</title>
      <link href="2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/"/>
      <url>2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/</url>
      
        <content type="html"><![CDATA[<p>格式待整理</p><span id="more"></span><h1 id="mysql-语法规范"><a href="#mysql-语法规范" class="headerlink" title="mysql 语法规范"></a>mysql 语法规范</h1><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%201%204.png" alt="Pasted image 1 4.png"></p><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="DQL-data-query-language-语言"><a href="#DQL-data-query-language-语言" class="headerlink" title="DQL(data query language)语言"></a>DQL(data query language)语言</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># mysql查询语法</span><br><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表名</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. 查询列表可以是：表字段、常量值、表达式、函数</span></span><br><span class="line"><span class="comment">2. 查询结果可以是一个虚拟的表(dual)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># 表达式</span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">*</span><span class="number">2</span> <span class="keyword">from</span> dual;</span><br><span class="line"># 常量值</span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span>;</span><br><span class="line"># 函数</span><br><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"># mysql中的<span class="operator">+</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在mysql中的+号只有一个功能：运算符</span></span><br><span class="line"><span class="comment">所以并不能作为字符串的拼接符，如需拼接字符串需要使用concat函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span><span class="operator">+</span><span class="number">2</span>; # 当加号两边都为数值类型则会进行相加；结果为：<span class="number">102</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;100&#x27;</span><span class="operator">+</span><span class="number">2</span>; # 当其中一个或两个都为字符型的话则尝试将字符类型转换为数值类型；结果：<span class="number">102</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;join&#x27;</span><span class="operator">+</span><span class="number">2</span>; # 当字符型不能转换为数值型的话，那个类型的值将会变为<span class="number">0</span>；结果：<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span><span class="operator">+</span><span class="number">2</span>; # 当其中一个值为<span class="keyword">null</span>结果必为<span class="keyword">null</span>；结果：<span class="keyword">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># mysql查询语法</span><br><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件;</span><br><span class="line"># 模糊</span><br><span class="line"># _ 代表单个字符</span><br><span class="line"># <span class="operator">%</span> 代表多个字符</span><br><span class="line"># 可以使用\ 转义，也可以使用自定义转义符：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_$_%&#x27;</span> excape <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line"># 上面那个例子中就将$定义为转义符了</span><br><span class="line"></span><br><span class="line"># 安全等于 <span class="operator">&lt;=&gt;</span> 可以判断<span class="keyword">null</span>和普通数值</span><br><span class="line"># 不等于也可以写成 <span class="operator">&lt;&gt;</span></span><br><span class="line"># 去重 <span class="keyword">distinct</span></span><br></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 查询列表 from 表名 [where 筛选条件] order by 排序字段 [asc|desc]</span></span><br><span class="line"><span class="comment">asc 升序</span></span><br><span class="line"><span class="comment">desc 降序</span></span><br><span class="line"><span class="comment">当排序字段为多个的情况下，排序规则为先根据前面的字段进行排序，当前的字段有相同值的情况再根据后面的字段进行比较排序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">除了limit子句外其他的子句都是放在order by之前的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><a href="https://www.cnblogs.com/panchanggui/p/10652322.html">https://www.cnblogs.com/panchanggui/p/10652322.html</a><br><strong>分类：</strong></p><ul><li>单行函数<br>如：length、concat、ifnull 等<ul><li>字符函数</li><li>数学函数</li><li>日期函数</li><li>其他函数</li><li>流程控制函数</li></ul></li><li>分组函数<br>功能：做统计使用，又称为统计函数、组函数、聚合函数</li></ul><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul><li>sum 计算总和</li><li>avg 计算平均数</li><li>max 计算最大值</li><li>min 计算最小值</li><li>count 计算次数</li></ul><blockquote><p>特点：</p><ol><li>sum、avg 一般用于处理数值类型<br>max、min、count 可以处理任何类型</li><li>以上分组函数都忽略 null 值</li><li>可以搭配 distinct 实现去重运算</li></ol></blockquote><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select分组函数,列(要求出现在group by的后面)</span></span><br><span class="line"><span class="comment">from表</span></span><br><span class="line"><span class="comment">[where 筛选条件]</span></span><br><span class="line"><span class="comment">group by 分组的列表</span></span><br><span class="line"><span class="comment">[order by子句]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p><strong>按年代分类：</strong></p><ul><li>sql92 标准：仅仅只支持内连接</li><li>sql99 标准【推荐】</li></ul><p><strong>按功能分类：</strong></p><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外链接</li><li>右外连接</li><li>全外连接</li></ul></li><li>交叉连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">select 查询列表</span></span><br><span class="line"><span class="comment">from 表1 别名 [连接类型]</span></span><br><span class="line"><span class="comment">join 表2 别名</span></span><br><span class="line"><span class="comment">on 连接条件</span></span><br><span class="line"><span class="comment">[where 筛选条件]</span></span><br><span class="line"><span class="comment">Lgroup by 分组]</span></span><br><span class="line"><span class="comment">[having 筛选条件]</span></span><br><span class="line"><span class="comment">[order by 排序列表]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">内连接 inner</span></span><br><span class="line"><span class="comment">左外链接 left [outer]</span></span><br><span class="line"><span class="comment">右外连接 rigth [outer]</span></span><br><span class="line"><span class="comment">全外连接 full [outer]</span></span><br><span class="line"><span class="comment">交叉连接 cross</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景: 用于查询一个表中有,另一个表没有的记录</span></span><br><span class="line"><span class="comment">特点:</span></span><br><span class="line"><span class="comment">1. 外连接的查询结果为主表中的所有记录</span></span><br><span class="line"><span class="comment">如果从表中有和它匹配的,则显示匹配的值</span></span><br><span class="line"><span class="comment">如果从表中没有和它匹配的,则显示null</span></span><br><span class="line"><span class="comment">外连接查询结果=内连接结果+主表中有而从表没有的记录</span></span><br><span class="line"><span class="comment">2. 左外连接,left join左边的是主表</span></span><br><span class="line"><span class="comment">   右外连接,right join右边的是主表</span></span><br><span class="line"><span class="comment">3. 左外和右外交换两个表的顺序,可以实现同样的效果</span></span><br><span class="line"><span class="comment">4. 全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">交叉查询和普通多表莫得区别，就是将逗号换成了cross关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>分类:</strong></p><ul><li>按子查询出现的位置:<ul><li>select 后面:<ul><li>仅仅支持标量子查询</li></ul></li><li>from 后面:<ul><li>支持表子查询</li></ul></li><li>where 或 having 后面：<ul><li>标量子查询(单行)</li><li>列子查询(多行)</li><li>行子查询</li></ul></li><li>exists 后面(相关子查询)<ul><li>ps: exists 是一个函数，它只关心括号内的是否有值，有值就返回 1 莫得值就返回 0</li><li>表子查询</li></ul></li></ul></li><li>按结果集的行列数不同:<ul><li>标量子查询(结果集只有一行一列)</li><li>列子查询(结果集只有一列多行)</li><li>行子查询(结果集有一行多列)</li><li>表子查询(结果集一般为多行多列)</li></ul></li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>limit</p><h3 id="union-联合查询"><a href="#union-联合查询" class="headerlink" title="union 联合查询"></a>union 联合查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 查询字段 from 表名 where 筛选条件</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">select 查询字段 from 表名 where 筛选条件</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">作用：将多个结果集合并到一起</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">场景：有A、B、C三张表，其中a表存了用户的邮箱，b表存了用户的用户名，c表存了用户的手机号，要求可以通过用户输入的值（因为不知道用户输入的是手机号还是用户名和邮箱，所以需要查询三张表然后再将结果集合并）查询出对应的用户</span></span><br><span class="line"><span class="comment">select * from a where email like &#x27;%value%&#x27;</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">select * from b where username like &#x27;%value%&#x27;</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">select * from c where phone like &#x27;%value%&#x27;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点:</span></span><br><span class="line"><span class="comment">1. 要求多条查询语句的查询列数是一致的!</span></span><br><span class="line"><span class="comment">2. 要求多条查询语句的查询的每一列的类型和顺序最好一致</span></span><br><span class="line"><span class="comment">3. union关键字默认去重,如果使用union all 可以包含重复项</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="DML-data-manipulation-language-语言"><a href="#DML-data-manipulation-language-语言" class="headerlink" title="DML(data manipulation language)语言"></a>DML(data manipulation language)语言</h2><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值;</span><br><span class="line"># 方式二：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[(字段)] valuse(值);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[(字段)] valuse(值),(值),(值)...;</span><br><span class="line"># 支持子查询</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[(字段)] 子查询语句;</span><br></pre></td></tr></table></figure><h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 修改单张表的记录</span><br><span class="line">update 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 [<span class="keyword">where</span> 筛选条件];</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span>修改多表的记录</span><br><span class="line"># 语法:</span><br><span class="line"># sql92语法:</span><br><span class="line">update 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值,</span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"># sql99语法:</span><br><span class="line">update 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">inner</span> <span class="operator">|</span> <span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：<span class="keyword">delete</span></span><br><span class="line"># 语法：</span><br><span class="line"># 单表的删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件;</span><br><span class="line"># 多表的删除</span><br><span class="line"># sql92语法:</span><br><span class="line"><span class="keyword">delete</span> 表<span class="number">1</span>的别名, 表<span class="number">2</span>的别名 # 如果只想删除表<span class="number">1</span>中的数据，这里就不需要写表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名, 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"># sql99语法:</span><br><span class="line"><span class="keyword">delete</span> 表<span class="number">1</span>的别名, 表<span class="number">2</span>的别名</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">inner</span> <span class="operator">|</span> <span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名 <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"># 方式二：<span class="keyword">truncate</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p>ps：在 oracle 中使用 delete 进行删除的话可以不需要使用 from 关键字</p></blockquote><p><strong>delete 和 truncate 的区别：</strong></p><ol><li>delete 可以加 where 条件，truncate 不能加</li><li>truncate 删除,效率高一丢丢</li><li>假如要删除的表中有自增长列，如果用 delete 删除后,再插入数据， <strong>自增长列的值从断点开始</strong> 而 truncate 删除后,再插入数据， <strong>自增长列的值从 1 开始</strong></li><li>truncate 删除<strong>没有返回值</strong>，delete 删除<strong>有返回值</strong> (使用 delete 删除会返回 n 行受影响，但使用 truncate 删除只会返回 0 行受影响)</li><li>truncate 删除<strong>不能回滚</strong>，delete 删除<strong>可以回滚</strong>。</li></ol><h2 id="DDL-data-define-language-语言"><a href="#DDL-data-define-language-语言" class="headerlink" title="DDL(data define language)语言"></a>DDL(data define language)语言</h2><blockquote><p>ddl 语言解释：数据定义语言</p></blockquote><h3 id="库和表管理"><a href="#库和表管理" class="headerlink" title="库和表管理"></a>库和表管理</h3><h4 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h4><p><strong>库的管理分为：创建、修改、删除</strong></p><ol><li><p>库的创建</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 语法：create database [if not exists]库名;</span><br><span class="line"># if not exists 的意思是当库不存在就创建</span><br><span class="line"># 案例:创建库Books</span><br><span class="line">CREATE DATABASE IF NOT EXISTS books;</span><br></pre></td></tr></table></figure></li><li><p>库的修改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改库的名称（重命名）语法：</span><br><span class="line">RENAME DATABASE books TO 新库名; # 目前这种方法不支持了，因为这种方法会导致数据的丢失</span><br><span class="line"></span><br><span class="line"># 更改库的字符集</span><br><span class="line">ALTER DATABASE books CHARACTER SET gbk;</span><br></pre></td></tr></table></figure><blockquote><p>ps：如果实在需要修改库的名称的话，可以通过重命名 data 文件夹下的对应库的文件夹名称</p><p>data 文件夹默认在：<code>C:\ProgramData\MySQL\MySQL Server 8.0\Data</code></p><p>当 mysql 中每创建一个库就会在 data 文件夹中创建一个对应名称的文件夹</p><p>不过以上的方法可能也会有一点问题，所以推荐将<strong>数据导出再创建库导入</strong>的方式来曲线救国</p></blockquote></li><li><p>库的删除</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> books;</span><br></pre></td></tr></table></figure></li></ol><h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><p><strong>表的管理分为：创建、修改、删除</strong></p><ol><li><p>创建: create</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法:</span></span><br><span class="line"><span class="comment">create table 表名(</span></span><br><span class="line"><span class="comment">列名 列的类型[长度] [约束]</span></span><br><span class="line"><span class="comment">列名 列的类型[长度] [约束]</span></span><br><span class="line"><span class="comment">列名 列的类型[长度] [约束]</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>修改: alter</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">alter table 表名 add | drop | modify | change column 列名 [列类型 约束]</span><br><span class="line"></span><br><span class="line"># 修改列名</span><br><span class="line"># 语法：ALTER TABLE 表名 CHANGE [COLUMN] 旧列名 新列名 列类型;</span><br><span class="line">ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;</span><br><span class="line"></span><br><span class="line"># 修改列的类型或约束</span><br><span class="line"># 语法：ALTER TABLE 表名 MODIFY COLUMN 列名 类型&#x2F;约束;</span><br><span class="line">ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;</span><br><span class="line"></span><br><span class="line"># 添加新列</span><br><span class="line"># 语法：ALTER TABLE 表名 ADD COLUMN 列名 列类型;</span><br><span class="line">ALTER TABLE author ADD COLUMN annual DOUBLE;</span><br><span class="line"></span><br><span class="line"># 删除列</span><br><span class="line"># 语法：ALTER TABLE 表名 DROP COLUMN 列名;</span><br><span class="line">ALTER TABLE author DROP COLUMN annual;</span><br><span class="line"></span><br><span class="line"># 修改表名</span><br><span class="line"># 语法：ALTER TABLE 表名 RENAME TO 新表名</span><br><span class="line">ALTER TABLE author RENAME TO author;</span><br></pre></td></tr></table></figure></li><li><p>删除: drop</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 表的删除</span><br><span class="line"># 语法：DROP TABLE [IF EXISTS] 表名;</span><br><span class="line">DROP TABLE IF EXISTS book_author;</span><br></pre></td></tr></table></figure></li><li><p>表的复制</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#1.仅仅复制表的结构</span><br><span class="line">CREATE TABLE copy LIKE author;</span><br><span class="line"></span><br><span class="line">#2.复制表的结构+效据</span><br><span class="line">CREATE TABLE copy2</span><br><span class="line">SELECT*FROM author;</span><br><span class="line"></span><br><span class="line">#只复制部分数据</span><br><span class="line">CREATE TABLE copy3</span><br><span class="line">    SELECT id,au_name</span><br><span class="line">    FROM author</span><br><span class="line">    WHERE nation&#x3D;&#39;中国&#39;;</span><br><span class="line"></span><br><span class="line"># 只复制部分结构</span><br><span class="line">CREATE TABLE copy4</span><br><span class="line">    SELECT id,au_name</span><br><span class="line">    FROM author</span><br><span class="line">    WHERE 0;</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见数据类型介绍"><a href="#常见数据类型介绍" class="headerlink" title="常见数据类型介绍"></a>常见数据类型介绍</h3><blockquote><p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p></blockquote><p><a href="MySQL-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">mysql 数据类型</a></p><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><h4 id="六大约束："><a href="#六大约束：" class="headerlink" title="六大约束："></a><strong>六大约束：</strong></h4><ul><li>not null 非空约束</li><li>default 默认</li><li>primary key 主键约束</li><li>unique 唯一约束</li><li>check 检查约束</li><li>foreign key 外键约束</li></ul><h4 id="约束的添加分类："><a href="#约束的添加分类：" class="headerlink" title="约束的添加分类："></a><strong>约束的添加分类：</strong></h4><ul><li><p>列级约束</p><ul><li><p>六大约束语法上都支持列级约束，<strong>但外键没有效果</strong></p></li><li><p>```mysql</p><h1 id="添加列级约束，创建表的时候直接在类型后面加就好啦"><a href="#添加列级约束，创建表的时候直接在类型后面加就好啦" class="headerlink" title="添加列级约束，创建表的时候直接在类型后面加就好啦"></a>添加列级约束，创建表的时候直接在类型后面加就好啦</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 表级约束</span><br><span class="line"></span><br><span class="line">  - 除了非空、默认，其他的都支持</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;mysql</span><br><span class="line">    # 创建表级约束</span><br><span class="line">    constraint 约束名 约束类型(字段名)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="主键和非空的对比："><a href="#主键和非空的对比：" class="headerlink" title="主键和非空的对比："></a><strong>主键和非空的对比：</strong></h4><table><thead><tr><th></th><th>保证唯一性</th><th>是否允许为空</th><th>一个表中允许有多少个</th></tr></thead><tbody><tr><td>主键(primary key)</td><td>🙂√</td><td>🙃×</td><td>最多一个</td></tr><tr><td>唯一(unique)</td><td>🙂√</td><td>🙂√</td><td>多个</td></tr></tbody></table><h4 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h4><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707160215003.png" alt="image-20200707160215003"></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707155946478.png" alt="image-20200707155946478"></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707160044655.png" alt="image-20200707160044655"></p><h4 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h4><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707160430197.png" alt="image-20200707160430197"></p><h4 id="自增（标识列）"><a href="#自增（标识列）" class="headerlink" title="自增（标识列）"></a>自增（标识列）</h4><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707161042486.png" alt="image-20200707161042486"></p><p><strong>修改表时设置标识列</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707161147002.png" alt="image-20200707161147002"></p><p><strong>修改表时删除标识列</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707161310445.png" alt="image-20200707161310445"></p><h2 id="TCL-Transation-Control-Language-语言"><a href="#TCL-Transation-Control-Language-语言" class="headerlink" title="TCL(Transation Control Language)语言"></a>TCL(Transation Control Language)语言</h2><p><strong>事务控制语言</strong></p><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707161635495.png" alt="image-20200707161635495"></p><h3 id="事务和事务处理"><a href="#事务和事务处理" class="headerlink" title="事务和事务处理"></a>事务和事务处理</h3><p><strong>事务分为隐式事务和显示事务</strong></p><ul><li><strong>隐式事务</strong><ul><li>没有明显的开始和结束标记</li><li>比如：insert、update、delete</li></ul></li><li><strong>显式事务</strong><ul><li>具有明显的开始和结束标记</li><li>开启显示事务的前提是，需要<strong>关闭事务的自动提交</strong></li></ul></li></ul><blockquote><p>在 mysql 中可以被事务控制的只有 dml 和 dql 语言，且 mysql 默认开启了事务自动提交功能，也就是每条 dml 和 dql 语言都会自动提交</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 可以使用如下语句查看是否开启了自动提交</span><br><span class="line">show variables like ‘autocommit’;</span><br><span class="line"># 关闭自动提交</span><br><span class="line">set autocommit&#x3D;0;</span><br><span class="line"></span><br><span class="line"># 开启显式事务</span><br><span class="line">start transation; # 这个是可选的</span><br><span class="line">insert into...</span><br><span class="line">update...</span><br><span class="line">delete...</span><br><span class="line"># 选择提交还是回滚</span><br><span class="line">commit;</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><p><strong>保存点(savepoint)</strong></p><blockquote><p>保存点作用：允许让事务回滚到设点的保存点，可以理解为<strong>游戏里的存档</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置保存点</span><br><span class="line">delete from emp where id &#x3D; 1; # 在这一步删除id为1的员工</span><br><span class="line">savepoint a; # 设定一个保存点</span><br><span class="line">delete from emp where id &#x3D;2; # 在这一步删除id为2的员工</span><br><span class="line">rollback to a; # 将事务回滚到保存点a，回滚之后会发现id为1的员工被删除了，但id为2的员工还存在</span><br></pre></td></tr></table></figure><h3 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707170436873.png" alt="image-20200707170436873"></p><blockquote><p>对于以上问题可以通过设置事务的隔离级别进行解决</p><p>每个数据库都有对应的事务隔离级别的实现</p></blockquote><h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707171431091.png" alt="image-20200707171431091"></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707171531156.png" alt="image-20200707171531156"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在mysql中可以通过&#96;select @@tx_isolation&#96;来查看数据库当前的隔离级别</span><br><span class="line">select @@tx_isolation</span><br><span class="line"># 设置其他的事务隔离级别</span><br><span class="line">set session transation isolation level read uncommitted</span><br><span class="line"># 设置全局的就将session改为global</span><br></pre></td></tr></table></figure><p><strong>4 种隔离级别的比较：</strong></p><p>比较可以解决哪些事务并发问题</p><p>√ 为会出现的问题</p><p>× 为不会出现的问题</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>mysql 中默认 第三个隔高级别 <code>repeatable read</code><br>oracle 中默认第二个隔高级别 <code>read committed</code></p></blockquote><hr><h1 id="mysql-安装-windows-版"><a href="#mysql-安装-windows-版" class="headerlink" title="mysql 安装(windows 版)"></a>mysql 安装(windows 版)</h1><p><strong>本节安装的 mysql 版本为 8.0.20</strong></p><ol><li><p>官网下载 mysql 安装文件</p><ol><li>官网网址：<a href="https://www.mysql.com/">https://www.mysql.com/</a> ，如果嫌弃访问慢可以使用搜狐的 mysql 镜像 <a href="http://mirrors.sohu.com/mysql/">http://mirrors.sohu.com/mysql/</a></li><li><a href="https://dev.mysql.com/downloads/">下载页面</a><br><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%201%201.png" alt="./images/Pasted image 1 1.png"></li><li><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/20210409102739.png" alt="downloads"></li><li>这个的界面是下载的 zip，如果想下载安装程序点击之前页面的<code>Go to Download Page</code>按钮</li><li>下载这个 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/20210409102908.png" alt="downloads"></li></ol></li><li><p>安装</p><ol><li><p>双击安装程序（可能要等一会）</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%205%201.png" alt="./images/Pasted image 5 1.png"></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%206.png" alt="数据库/mysql/images/Pasted image 6.png"></p></li><li><p>点 execute 然后等待下载就好啦 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%201%202.png" alt="./images/Pasted image 1 2.png"></p></li><li><p>安装好了之后点击 next <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%203%201-1594046783783.png" alt="./images/Pasted image 3 1.png"></p></li><li><p>点 next <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%204%201-1594046791886.png" alt="./images/Pasted image 4 1.png"></p></li><li><p>选择第一个 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%205%201-1594046798866.png" alt="./images/Pasted image 5 1.png"></p></li><li><p>点击 next<img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%204%201-1594046898158.png" alt="./images/Pasted image 4 1.png"></p></li><li><p>输入 root 账户密码，如果想添加其他用户就在 mysql user accounts 下面添加 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/01.png" alt="这里写图片描述"></p></li><li><p>在这里设置 windows 服务名称 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%209.png" alt="./images/Pasted image 9.png"></p></li><li><p>点击 execute 安装 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%2010.png" alt="./images/Pasted image 10.png"></p></li><li><p>点击 finish <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%2011.png" alt="./images/Pasted image 11.png"></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%201%203.png" alt="./images/Pasted image 1 3.png"></p></li><li><p>输入一下密码然后点击 next <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%202%202.png" alt="./images/Pasted image 2 2.png"></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%203%202.png" alt="./images/Pasted image 3 2.png"></p></li><li><p>然后一路 next 就安完啦 🥳</p></li></ol></li></ol><h1 id="MySQL-安装-Linux-版"><a href="#MySQL-安装-Linux-版" class="headerlink" title="MySQL 安装(Linux 版)"></a>MySQL 安装(Linux 版)</h1><blockquote><p>如果只是基础部分的学习这一节可以暂时不看</p><p>参考资料：<a href="https://www.cnblogs.com/yss818824/p/12349719.html">https://www.cnblogs.com/yss818824/p/12349719.html</a></p></blockquote><p>这里介绍两种安装方式：yum 安装和下载搜狐镜像手动安装</p><p>在两种方式下载之前先使用如下命令删除之前安装过的 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql #找到已装的rpm包名,如果有安装过的mysql就使用下面这个命令</span><br><span class="line">yum -y remove 包名 #卸载，包名是上面命令列出来的，如果没有列出来就是没安装过</span><br><span class="line">cd /opt # 移动到opt目录</span><br></pre></td></tr></table></figure><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><ol><li><p> 访问 <a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a> 下载 yum 的仓库下载包</p></li><li><p>下载对应 linux 版本的仓库下载包（我的是 centos7 所以就下 linux7）</p><p> <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200714083401273.png" alt="image-20200714083401273"></p></li><li><p>这里有两种下载方式：</p><ol><li> 下载到本地然后传到 linux 里面</li><li> 复制下载链接，在 linux 里面使用 wget 命令下载<code>wget 下载网址</code></li></ol></li><li><p> 将 rpm 包下载到 linux 里面后使用<code>rpm -ivh rpm包名</code>进行下载</p></li><li><p> 安装之前先清除缓存<code>yum clean all</code></p></li><li><p> 然后使用<code>yum install mysql-server</code>进行安装</p></li></ol><h2 id="搜狐镜像手动安装"><a href="#搜狐镜像手动安装" class="headerlink" title="搜狐镜像手动安装"></a>搜狐镜像手动安装</h2><p><strong>这里以下载 mysql8.0.20 为例</strong></p><ol><li><p> 访问 <a href="http://mirrors.sohu.com/mysql/MySQL-8.0/">http://mirrors.sohu.com/mysql/MySQL-8.0/</a> 进入搜狐 mysql 镜像下载地址</p></li><li><p> 按 ctrl+f 搜索 community（community 是社区的意思）</p></li><li><p>下载 client、server、common、libs 的安装包（rpm）</p><blockquote><p>注意：el7 是 linux 的版本，如果是 centos7 就下 el7，如果是 centos8 就下载 el8</p><p>x86_64 是架构</p></blockquote><p> <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200713160747557.png" alt="image-20200713160747557"></p><p> <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200713160824285.png" alt="image-20200713160824285"></p></li><li><p> 打开虚拟机，将这两个安装包传到 centos 里面的 opt 目录下</p></li><li><p>使用如下命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql #找到已装的rpm包名,如果有安装过的mysql就使用下面这个命令</span><br><span class="line">yum -y remove 包名 #卸载，包名是上面命令列出来的，如果没有列出来就是没安装过</span><br><span class="line">cd /opt # 移动到opt目录</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装顺序：common --&gt; libs --&gt; clients --&gt; server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装命令</span></span><br><span class="line">rpm -ivh mysql-community-common-5.7.19-1.el6.x86_64.rpm mysql-community-libs-5.7.19-1.el6.x86_64.rpm mysql-community-client-5.7.19-1.el6.x86_64.rpm mysql-community-server-5.7.19-1.el6.x86_64.rpm # 后面的这些rpm写刚刚下载的rpm安装包</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>将 mysql 下载到 linux 里面后再进行这一步</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先启动mysql</span></span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看一下状态是否是启动</span></span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行成功之后查看mysql密码</span></span><br><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200714084807164.png" alt="image-20200714084807164"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql之后不能做任何操作，需要先重新设置密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果做了操作会报错，这个错的意思就是要你先重置密码</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200714085249682.png" alt="image-20200714085249682"></p><h3 id="设置密码和密码复杂度"><a href="#设置密码和密码复杂度" class="headerlink" title="设置密码和密码复杂度"></a><strong>设置密码和密码复杂度</strong></h3><blockquote><p>前排提醒：如果要将密码改成<code>12345678</code>的话，需要先将密码改成有大小写字母和数字且长度是八位的密码，然后再修改密码复杂度为 low，然后再将密码改成<code>12345678</code>。如果要改成<code>123456</code>的话还需要修改密码长度为六位。🙃 有点麻烦<br>注意看注释！！！！！！！！！！！！！！注意看注释！！！！！！！！！！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用如下命令修改密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line"># 其中‘123456’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,&#x2F;&#39;;:等）,不然不能配置成功。</span><br><span class="line"># 如果出现如下错误：</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200714085659414.png" alt="image-20200714085659414"></p><p>是因为密码的复杂度不符合默认规定，如下命令查看 mysql 默认密码复杂度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行这个之前是需要修改默认密码的，如果想修改密码为123456可以先修改密码后再修改密码复杂度然后再修改密码</span><br><span class="line">SHOW VARIABLES LIKE &#39;validate_password%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200714090733765.png" alt="image-20200714090733765"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用修改全局变量的方式去修改它</span><br><span class="line">set global validate_password.policy&#x3D;LOW;</span><br><span class="line"># validate_password.policy（校验规则），取值范围[0,1,2]，默认值1。0（LOW）：只校验长度；1（MEDIUM）：校验长度、大小写和特殊字符；2（STRONG）：校验长度、大小写、特殊字符和dictionary_file</span><br></pre></td></tr></table></figure><h3 id="开启-mysql-远程访问"><a href="#开启-mysql-远程访问" class="headerlink" title="开启 mysql 远程访问"></a><strong>开启 mysql 远程访问</strong></h3><p>记得关一下防火墙，或者防火墙开放 3306 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 关闭防火墙</span><br><span class="line">systemctl disable firewalld # 取消防火墙开机自启</span><br></pre></td></tr></table></figure><p>这里使用改表法去开启远程访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 进入到mysql库</span><br><span class="line">use mysql;</span><br><span class="line"># 查询mysql表的访问主机范围和用户</span><br><span class="line">select host, user from user;</span><br><span class="line"># 如果要开启root用户的远程访问，修改它的host为%</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where user &#x3D; &#39;root&#39;;</span><br><span class="line"># 这句表示从mysql数据库的grant表中重新加载权限数据</span><br><span class="line">flush privileges; # 如果重启的话就不用执行这句话了</span><br><span class="line"># 如果还是不能访问，查看mysql是否只允许本地127.0.0.1访问</span><br><span class="line"># cat &#x2F;etc&#x2F;my.cnf</span><br><span class="line"># bind-address&#x3D;127.0.0.1    #去掉这一行，或者去掉</span><br><span class="line"># skip-networking</span><br><span class="line"># 重启mysql：service mysqld restart</span><br></pre></td></tr></table></figure><p><strong>设置开机启动</strong></p><p>使用<code>systemctl enable mysqld</code>来设置开机启动</p><h3 id="MySQL-安装目录"><a href="#MySQL-安装目录" class="headerlink" title="MySQL 安装目录"></a>MySQL 安装目录</h3><table><thead><tr><th></th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>/var/lib/mysql/</td><td>mysql 数据文件存放位置</td><td></td></tr><tr><td>/usr/share/mysql/</td><td>配置文件目录</td><td>mysqladmin、mysqldump 等命令</td></tr><tr><td>/usr/bin</td><td>相关命令目录</td><td></td></tr></tbody></table><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%204%202.png" alt="./images/Pasted image 4 2.png"></p><ul><li>mysql 命令行连接器：<ul><li>MySQL 8.0 Command Line Client - Unicode</li><li>MySQL 8.0 Command Line Client</li></ul></li><li>MySQL Installer - Community： <strong>修改 mysql 安装配置的</strong></li><li>MySQL Workbench 8.0 CE： <strong>mysql 自带的图形界面</strong></li><li>MySQL Shell</li><li>MySQL Notifier 1.1.8 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%2012.png" alt="./images/Pasted image 12.png"></li></ul><h1 id="mysql-基础配置"><a href="#mysql-基础配置" class="headerlink" title="mysql 基础配置"></a>mysql 基础配置</h1><h2 id="mysql-的配置文件位置"><a href="#mysql-的配置文件位置" class="headerlink" title="mysql 的配置文件位置"></a>mysql 的配置文件位置</h2><p>默认位置是在<code>C:\ProgramData\MySQL\MySQL Server 8.0</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/image-20200707095630942.png" alt="image-20200707095630942"></p><h2 id="配置文件简单概述"><a href="#配置文件简单概述" class="headerlink" title="配置文件简单概述"></a>配置文件简单概述</h2><blockquote><p>这里只是概述，具体的详解见<a href="MySQL-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">mysql 配置文件详解</a></p><p>ini 语法见<a href="../../%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/ini/ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.md">ini 语法</a></p></blockquote><p>以下配置只是其中的一部分，当需要修改 mysql 的连接端口时修改 port 即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># pipe=</span></span><br><span class="line"><span class="comment"># socket=MYSQL</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在 path 环境变量中添加 mysql server 安装路径\bin<br>如：我当前 mysql 安装路径在 c 盘<br>![./images/Pasted image 7 1.png]<br>进入到 mysql server 文件夹下的 bin 文件夹<br>我在 path 中就添加如下路径<code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code></p><hr><h1 id="启动和关闭-mysql-服务"><a href="#启动和关闭-mysql-服务" class="headerlink" title="启动和关闭 mysql 服务"></a>启动和关闭 mysql 服务</h1><h2 id="界面的方式启动"><a href="#界面的方式启动" class="headerlink" title="界面的方式启动"></a>界面的方式启动</h2><ol><li>点击服务 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%202%201-1594047001888.png" alt="./images/Pasted image 2 1.png"></li><li>找到 mysql 服务并启动或关闭</li></ol><h2 id="命令行方式启动"><a href="#命令行方式启动" class="headerlink" title="命令行方式启动"></a>命令行方式启动</h2><ol><li>打开 cmd（需要使用管理员权限）</li><li>关闭 mysql 服务：<code>net stop &lt;服务名&gt;</code></li><li>启动 mysql 服务：<code>net start &lt;服务名&gt;</code></li></ol><hr><h1 id="mysql-登录和退出"><a href="#mysql-登录和退出" class="headerlink" title="mysql 登录和退出"></a>mysql 登录和退出</h1><h2 id="使用-mysql-自带的连接器连接"><a href="#使用-mysql-自带的连接器连接" class="headerlink" title="使用 mysql 自带的连接器连接"></a>使用 mysql 自带的连接器连接</h2><p>使用 MySQL 8.0 Command Line Client 连接 <img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%206%202.png" alt="./images/Pasted image 6 2.png"></p><h2 id="命令行连接"><a href="#命令行连接" class="headerlink" title="命令行连接"></a>命令行连接</h2><p>命令行中输入以下命令进行连接<br><code>mysql -h &lt;主机名/ip&gt; -P &lt;端口号&gt; -u &lt;用户名&gt; -p&lt;密码&gt;</code></p><blockquote><p>注意：使用-h -P -u 这些参数的时候后面可以不用加空格，但使用-p 参数时后面不能有空格如：<code>mysql -hlocalhost -P3306 -uroot -p123456</code>，如果写法为：<code>mysql -hlocalhost -P3306 -uroot -p 123456</code>则为错误的</p></blockquote><blockquote><p>-h 和 -P 参数默认值是 <code>localhost</code> 和 <code>3306</code>，所以如果连接本地的 mysql 连接的话可以不用加这两个参数</p></blockquote><p><strong>使用 exit 退出 mysql</strong></p><h2 id="使用第三方工具连接"><a href="#使用第三方工具连接" class="headerlink" title="使用第三方工具连接"></a>使用第三方工具连接</h2><p>使用<strong>Navicat Premium 15</strong>进行连接</p><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>在 mysql 中变量分为以下几种类型：</strong></p><ul><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ul><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><blockquote><p>📖 说明：变量由系统提供，而不是用户自定义的，属于服务器层面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前会话的所有系统变量</span><br><span class="line">show session variables;</span><br><span class="line"># 查看全局的系统变量</span><br><span class="line">show global variables;</span><br><span class="line"># 查看符合条件的部分系统变量</span><br><span class="line">show session variables like &#39;%auto%&#39;;</span><br><span class="line"># 查看指定某个变量的值</span><br><span class="line">select @@global|[session].系统变量名;</span><br><span class="line"></span><br><span class="line"># 为某个系统变量赋值：</span><br><span class="line"># 方法一:</span><br><span class="line">set session 系统变量名&#x3D;值;</span><br><span class="line"># 方法二：</span><br><span class="line">set @@session.系统变量名&#x3D;值;</span><br><span class="line"># 如果是会话级别需要加session，如果是全局级别需要加global，不写的话默认是session</span><br></pre></td></tr></table></figure><blockquote><p>❗ 注意：</p><ul><li>全局变量<ul><li>只作用于全部会话，但是<strong>不能跨重启</strong>，也就是说重新启动服务之后设置过的值会变回<strong>默认状态</strong>。如果需要重启服务之后值不改变需要修改<strong>mysql 配置文件</strong></li></ul></li><li>会话变量<ul><li>只作用于<strong>当前会话</strong></li></ul></li></ul></blockquote><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><blockquote><p>📖 说明：自定义变量是属于用户创建的，不属于系统</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 声明自定义变量，用户变量要求必须加上@符</span><br><span class="line"># 方式一：</span><br><span class="line">set @用户变量名&#x3D;值;</span><br><span class="line"># 方式二：因为&#x3D;存在歧义，因为等号有两个作用1.赋值 2.比较 所以为了取消歧义可以使用:&#x3D;来变量的进行赋值</span><br><span class="line">set @用户变量名:&#x3D;值;</span><br><span class="line"># 方式三：可以使用select关键字进行赋值，但是赋值符号必须使用:&#x3D;</span><br><span class="line">select @用户变量名:&#x3D;值;</span><br><span class="line"></span><br><span class="line"># 赋值：</span><br><span class="line"># 方式一：上面的语句也可以用于赋值</span><br><span class="line">set @用户变量名&#x3D;值;</span><br><span class="line">set @用户变量名:&#x3D;值;</span><br><span class="line">select @用户变量名:&#x3D;值;</span><br><span class="line"># 方式二：使用select into</span><br><span class="line">select 字段 into @用户变量名 from 表名;</span><br><span class="line">select max(id) into @max_id from emp;</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">select @用户变量名;</span><br><span class="line"></span><br><span class="line"># 以上定义的都是用户变量</span><br><span class="line"></span><br><span class="line"># 定义局部变量</span><br><span class="line"># 声明</span><br><span class="line">declare 变量名 类型;</span><br><span class="line">declare 变量名 类型 default 值;</span><br><span class="line"></span><br><span class="line"># 赋值</span><br><span class="line"># 通过set和select，定义局部变量不需要加@符</span><br><span class="line">set 局部变量名&#x3D;值;</span><br><span class="line">set 局部变量名:&#x3D;值;</span><br><span class="line">select @局部变量名:&#x3D;值; # 这是特例，用select关键字时需要加@符</span><br><span class="line"># 通过select into</span><br><span class="line">select 字段 into 局部变量名 from 表名;</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：</p><ul><li>用户变量<ul><li>作用于当前会话</li></ul></li><li>局部变量<ul><li>仅仅在定义它们的 begin end 中有效，且应用在 begin end 中的第一句话</li></ul></li></ul></blockquote><p><strong>局部变量和用户变量的比较：</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义和使用的位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前的会话中</td><td>会话中的任何地方</td><td>必须加@符，不用限定类型</td></tr><tr><td>局部变量</td><td>begin end 中</td><td>只能在 begin end 中，且是 begin end 中的第一句话</td><td>一般不需要加@符，需要限定类型</td></tr></tbody></table><hr><h1 id="mysql-的常用命令"><a href="#mysql-的常用命令" class="headerlink" title="mysql 的常用命令"></a>mysql 的常用命令</h1><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/Pasted%20image%2013.png" alt="./images/Pasted image 13.png"></p><h2 id="修改结束字符"><a href="#修改结束字符" class="headerlink" title="修改结束字符"></a>修改结束字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改之前</span><br><span class="line">select * from emp;</span><br><span class="line">delimiter $ # 修改结束字符为$</span><br><span class="line"># 修改之后</span><br><span class="line">select * from emp$</span><br></pre></td></tr></table></figure><hr><h1 id="存储过程与存储函数"><a href="#存储过程与存储函数" class="headerlink" title="存储过程与存储函数"></a>存储过程与存储函数</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/chenhuabin/p/10142190.html">https://www.cnblogs.com/chenhuabin/p/10142190.html</a></p><p><a href="https://blog.csdn.net/Bb15070047748/article/details/106292488">https://blog.csdn.net/Bb15070047748/article/details/106292488</a></p><p>MySQL 中提供存储过程与存储函数机制，我们姑且将存储过程和存储函数合称为存储程序。与一般的 SQL 语句需要先编译然后立即执行不同，存储程序是一组为了完成特定功能的 SQL 语句集，经编译后存储在数据库中，当用户通过指定存储程序的名字并给定参数（如果该存储程序带有参数）来调用才会执行。</p><p>存储程序就是一条或者多条 SQL 语句和控制语句的集合，我们可以将其看作 MySQL 的批处理文件，当然，其作用不仅限于批处理。当想要在不同的应用程序或平台上执行相同的功能一段程序或者封装特定功能时，存储程序是非常有用的。数据库中的存储程序可以看做是面向对编程中面向对象方法，它允许控制数据的访问方式。</p><p>存储函数与存储过程有如下区别：</p><p>（1）存储函数的限制比较多,例如不能用临时表,只能用表变量,而存储过程的限制较少，存储过程的实现功能要复杂些,而函数的实现功能针对性比较强。</p><p>（2）返回值不同。存储函数必须有返回值,且仅返回一个结果值；存储过程可以没有返回值,但是能返回结果集(out,inout)。</p><p>（3）调用时的不同。存储函数嵌入在 SQL 中使用,可以在 select 存储函数名(变量值)；存储过程通过 call 语句调用 call 存储过程名。</p><p>（4）参数的不同。存储函数的参数类型类似于 IN 参数，没有类似于 OUT 和 INOUT 的参数。存储过程的参数类型有三种，IN、out 和 INOUT：</p><p>a. in：数据只是从外部传入内部使用(值传递),可以是数值也可以是变量</p><p>b. out：只允许过程内部使用(不用外部数据),给外部使用的(引用传递:外部的数据会被先清空才会进入到内部),只能是变量</p><p>c. inout：外部可以在内部使用,内部修改的也可以给外部使用,典型的引用 传递,只能传递变量。</p><h1 id="3-存储过程、存储函数"><a href="#3-存储过程、存储函数" class="headerlink" title="3 存储过程、存储函数"></a>3 存储过程、存储函数</h1><h2 id="3-1-创建存储过程"><a href="#3-1-创建存储过程" class="headerlink" title="3.1 创建存储过程"></a>3.1 创建存储过程</h2><p>创建存储过程语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...]</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    过程体</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>​ CREATE PROCEDURE 是用来创建存储过程的关键字；[IN|OUT|INOUT]是参数的输入输出类型，IN 表示输入参数，OUT 表示输出参数，INOUT 表示既可以输入也可以输出；过程体是包含若干 SQL 语句或流程控制语句的集合，可以用 BEGIN…END 来包裹。</p><p>​ 在演示如果创建存储过程之前（emp 表、dept 表），先创建两个数据表，本文所有演示操作都基于这两个表来进行，创建表与插入数据 SQL 语句如下：</p><p><strong>emp 表：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219111636619-865486033.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img">emp 表 SQL</p><p><strong>dept 表：</strong></p><p><strong><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219111700940-2040680975.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">-- Table structure for dept</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;dept&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;dept&#96;  (</span><br><span class="line"></span><br><span class="line">  &#96;deptno&#96; int(2) NOT NULL,</span><br><span class="line"></span><br><span class="line">  &#96;dname&#96; varchar(14) CHARACTER SET latin1 COLLATE latin1_swedish_ci NULL DEFAULT NULL,</span><br><span class="line"></span><br><span class="line">  &#96;loc&#96; varchar(13) CHARACTER SET latin1 COLLATE latin1_swedish_ci NULL DEFAULT NULL,</span><br><span class="line"></span><br><span class="line">  PRIMARY KEY (&#96;deptno&#96;) USING BTREE</span><br><span class="line"></span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; latin1 COLLATE &#x3D; latin1_swedish_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">-- Records of dept</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (10, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (20, &#39;RESEARCH&#39;, &#39;DALLAS&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (30, &#39;SALES&#39;, &#39;CHICAGO&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (40, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><p>建好表后，我们来创建一个存储过程。</p><p><strong>示例 1：</strong>通过存储过程完成查询每个员工编号（empno）、姓名（ename）、职位（job）、领导编号（mgr）、领导姓名（empno）、部门名称（dname）、部门位置（loc）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">create procedure select_pro()</span><br><span class="line"></span><br><span class="line">         begin</span><br><span class="line"></span><br><span class="line">                   select e1.empno bianhao, e1.ename xingming, e1.job zhiwei, e1.mgr lindaobianhao, e2.ename lindaoxingming, d.dname bumenmingchen, 　　　　　　　　　　　　　　　　d.loc bumenweizhi</span><br><span class="line"></span><br><span class="line">                   from emp e1 , emp e2 , dept d</span><br><span class="line"></span><br><span class="line">                   where e1.mgr&#x3D;e2.empno and e1.deptno&#x3D;d.deptno ;</span><br><span class="line"></span><br><span class="line">         end &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>注：“delimiter //”语句的作用是将 MySQL 的结束符设置为//，因为 MySQL 默认的语句结束符是分号“；”，为了避免与存储过程中的 SQL 语句结束符相冲突，需要使用 delimiter 改变存储过程的结束符，设置为以“end //”结束存储过程。存储过程定义完毕之后，再使用“delimiter;”回复默认结束符。delimiter 也可以指定其他符号作为结束符（“\”除外，这是转义字符）。当然，如果你在 Navicat 等图形界面下进行，可以不用设置 delimiter。</p><p>示例 1 中 SQL 语句创建了一个名为 select_pro 的存储过程，通过“call select_pro()”，即可完成查询功能，不在需要每次查询都重写查询语句。</p><p><strong>示例 2：</strong>创建一个带参数的存储过程，删除 emp 表中 empno 为指定值得记录，并返回最高最高月薪，也返回大于指定月薪的人数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">create procedure param_pro(in id int , out num int, inout p_sal int)</span><br><span class="line"></span><br><span class="line">         begin</span><br><span class="line"></span><br><span class="line">                   delete from emp where empno &#x3D; id ;</span><br><span class="line"></span><br><span class="line">                   select max(sal) from emp into num;</span><br><span class="line"></span><br><span class="line">                   select count(*)  into p_sal from emp where sal &gt;P_sal ;</span><br><span class="line"></span><br><span class="line">         end &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用上面创建好的存储过程 param_pro：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set @p_sal &#x3D; 1250 ;</span><br><span class="line"></span><br><span class="line">call param_pro(7369 , @num , @p_sal);</span><br><span class="line"></span><br><span class="line">select @num , @p_sal ;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219111727122-382478754.png" alt="img"></p><p>查看 emp 表，也发现 empno 为 7369 的记录确实被删除。</p><p>将查询结果赋值给变量时，可以使用 into 关键字，既可以在 select 子句末尾写 into 关键字，也可以在值后面写 into 语句。</p><h2 id="3-2-创建存储函数"><a href="#3-2-创建存储函数" class="headerlink" title="3.2 创建存储函数"></a>3.2 创建存储函数</h2><p>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION  函数名([ 参数名 数据类型 [, …]]) RETURNS返回类型</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">　　过程体</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>存储过程与存储函数一个很大的不同就是制定参数 IN、OUT、INOUT 只对存储过程有用，存储函数默认 IN 类型参数，不能设置其他两种类型。RETURNS 子句声明返回值类型也只能在存储函数中使用，且一个存储函数必须包含一个 RETURNS 语句。</p><p><strong>示例 3：</strong>用存储函数查询指定 empno 的员工的月薪 sal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">create function fun1(id int) returns int</span><br><span class="line"></span><br><span class="line">         begin</span><br><span class="line"></span><br><span class="line">                   return (select sal from emp where empno&#x3D;id);</span><br><span class="line"></span><br><span class="line">         end &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用存储函数 fun1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select fun1(7698)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219111905427-256074913.png" alt="img"></p><h2 id="3-3-修改存储过程和函数"><a href="#3-3-修改存储过程和函数" class="headerlink" title="3.3 修改存储过程和函数"></a>3.3 修改存储过程和函数</h2><p>使用 ALTER 语句可以修改存储过程和函数的特性。语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;PROCEDURE | FUNCTION&#125; sp_name [characteristic …]</span><br></pre></td></tr></table></figure><p>其中，sp_name 表示存储过程或函数的名称，characteristic 参数指定存储过程或函数的特性，可能取值有：</p><p>CONTAINS SQL:子程序包含 SQL 语句，但不包含读或写数据的语句。</p><p>NO SQL：子程序不包含 SQL 语句。</p><p>READS SQL DATA：子程序包含读数据的语句。</p><p>MODIFIES SQL DATA：子程序包含写数据的语句。</p><p>SQL SECURITY { DEFINER | INVOKER}：指明谁有权限执行。</p><p>DEFINER：只有定义者自己才能执行。</p><p>INVOKER：调用者可以执行。</p><p>COMMENT ‘string’ ：注释。</p><p><strong>示例 4</strong>：示例 1 中创建的存储过程 param_pro，将其读写权限该为 MODIFIES SQL DATA，并指明调用者可以执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROCEDURE param_pro</span><br><span class="line"></span><br><span class="line">MODIFIES SQL DATA</span><br><span class="line"></span><br><span class="line">SQL SECURITY INVOKER ;</span><br></pre></td></tr></table></figure><h1 id="4-流程控制语句"><a href="#4-流程控制语句" class="headerlink" title="4 流程控制语句"></a>4 流程控制语句</h1><p>MySQL 中用来构造流程控制语句的有：IF 语句、CASE 语句、LOOP 语句、LEAVE 语句、ITERATE 语句、REPEAT 语句和 WHILE 语句。每一个流程中可能包含一个单独的语句，或者是使用 BEGIN…END 构造复杂语句，构造可以被嵌套。</p><p><strong>（1）IF 语句</strong></p><p>IF 语句包含多个条件判断，根据判断结果为 TRUE 或 FALSE 来执行相应的语句，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF expr_condition THEN statement_list</span><br><span class="line"></span><br><span class="line">[ELSEIF expr_condition THEN statement_list]</span><br><span class="line"></span><br><span class="line">[ELSE statement_list]</span><br><span class="line"></span><br><span class="line">END IF</span><br></pre></td></tr></table></figure><p><strong>注意：所以 IF 语句都需要用 END IF 来结束，在 THEN 中执行，ELSEIF 和 ELSE 是可选的。</strong></p><p><strong>示例 5：</strong>有一个变量 val，判断变量值是否为空，若为空，输出“val is NULL”；否则输出“val is not NULL”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF val IS NULL</span><br><span class="line"></span><br><span class="line">         THEN SELECT ‘val is NULL’ ;</span><br><span class="line"></span><br><span class="line">         ELSE SELECT ‘val is not NULL’ ;</span><br><span class="line"></span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><p><strong>（2）CASE 语句</strong></p><p>CASE 是另一种条件判断语句，该语句有两种格式，第一种格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CASE case_expr</span><br><span class="line"></span><br><span class="line">WHEN when_value THEN statement_list</span><br><span class="line"></span><br><span class="line">[WHEN when_value THEN statement_list]……</span><br><span class="line"></span><br><span class="line">[ELSE statement_list]</span><br><span class="line"></span><br><span class="line">END CASE</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>case_expr，表示条件判断的表达式，决定了哪一个 WHEN 自己会被执行</p><p>When_value，表示表达式可能的值，如果，某个 when_value 表达式与 case_expr 表达式结果相同，则执行对应 THEN 关键字后的 statement 中的语句</p><p>Statement_list，表示不同 when_value 值的执行语句</p><p><strong>示例 6：</strong>使用 CASE 流程控制语句的第一种格式，判断 val 值，若等于 1 则输出‘val is 1’ ， 若等于 2 则输出‘val is 2’，或者两者都不等于则输出‘val is not 1 or 2’：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CASE val</span><br><span class="line"></span><br><span class="line">WHEN 1 THEN SELECT ‘val is 1’;</span><br><span class="line"></span><br><span class="line">WHEN 2 THEN SELECT ‘val is 2’;</span><br><span class="line"></span><br><span class="line">ELSE SELECT ‘val is not 1 or 2’;</span><br><span class="line"></span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p>CASE 语句的第二种格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line"></span><br><span class="line">　　WHEN expr_condition THEN statement_list</span><br><span class="line"></span><br><span class="line">　　[WHEN expr_condition THEN statement_list]</span><br><span class="line"></span><br><span class="line">　　[ELSE statement_list]</span><br><span class="line"></span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p><strong>示例 7：</strong>使用 CASE 流程控制语句的第二种格式判断变量 val 是否为空，小于零、大于零、等于零，并作对应的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line"></span><br><span class="line">         WHEN val is NULL THEN SELECT ‘val is NULL’ ;</span><br><span class="line"></span><br><span class="line">         WHEN val &lt; 0 THEN SELECT ‘val is less than 0’ ;</span><br><span class="line"></span><br><span class="line">         WHEN val &gt; 0 THEN SELECT ‘val is greater than 0’ ;</span><br><span class="line"></span><br><span class="line">         ELSE SELECT ‘val is 0’ ;</span><br><span class="line"></span><br><span class="line">END CASE ;</span><br></pre></td></tr></table></figure><p><strong>注意，这里存储过程中的 CASE 语句，与控制流程函数中的 SQL CASE 表达式中的 CASE 是不同的，存储过程中，CASE 语句不能有 ELSE NULL 子句，并且用 END CASE 代替 END 来终止。</strong></p><p><strong>（3） LOOP 语句与 LEAVE 语句</strong></p><p>LOOP 语句循环语句用来重复执行某些语句，与 IF 和 CASE 语句相比，LOOP 只是创建了一个循环操作过程，并不进行条件判断。LOOP 内的语句一直被重复执行直到循环被退出，跳出循环使用的是 LEAVE 子句，LOOP 语句基本语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[loop_label:] LOOP</span><br><span class="line"></span><br><span class="line">         statement_list</span><br><span class="line"></span><br><span class="line">END LOOP [lop_label]</span><br></pre></td></tr></table></figure><p>loop_label 表示 LOOP 语句的标注名称，该参数可以省略。statement_list 参数表示循环执行的语句。</p><p><strong>示例 8：</strong>定义一个变量 id，初始值为 0，循环执行 id 加 1 的操作 ，当 id 值小于 10 时，循环重复执行，当 id 值大于或者等于 10 时，使用 LEAVE 语句退出循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DECLARE id INT DEFAULT 0;</span><br><span class="line"></span><br><span class="line">Add_loop:LOOP</span><br><span class="line"></span><br><span class="line">SET id&#x3D;id+1;</span><br><span class="line"></span><br><span class="line">IF id&gt;&#x3D;10 THEN LEAVE add_loop;</span><br><span class="line"></span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">END LOOP add_loop;</span><br></pre></td></tr></table></figure><p><strong>（4）ITERATE 语句</strong></p><p>ITERATE 语句用于将执行顺序转到语句段的开头处，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　ITERATE lable</span><br></pre></td></tr></table></figure><p>其中，lable，表示循环的标志.注意，ITERATE 语句只可以出现在，LOOP、REPEAT 和 WHILE 语句中。ITERATE 的作用类似于 Java 和 Python 中的 continue 关键字。</p><p><strong>示例 9：</strong>p1 的初始值为 0，如果，p1 的值小于 10 时，重复执行 p1 加 1 的操作，当 p1 大于或等于 10，并且小于 20 时，打印消息 p1 is between 10 and 20，当 p1 大于 20 时，退出循环</p><p>演示 ITERATE 语句，在 LOOP 语句内的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE doiterate()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    DECLARE p1 INT DEFAULT 0;</span><br><span class="line"></span><br><span class="line">    my_loop:LOOP</span><br><span class="line"></span><br><span class="line">        SET p1&#x3D;p1+1;</span><br><span class="line"></span><br><span class="line">        IF p1&lt;10 THEN ITERATE my_loop;</span><br><span class="line"></span><br><span class="line">        ELSEIF p1&gt;20 THEN LEAVE my_loop;</span><br><span class="line"></span><br><span class="line">        END IF;</span><br><span class="line"></span><br><span class="line">        SELECT ‘p1 is between 10 and 20’;</span><br><span class="line"></span><br><span class="line">    END LOOP my_loop;</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>（5）REPEAT 语句</strong></p><p>REPEAT 语句用于创建一个带有条件判断的循环过程，每次语句执行完毕之后，会对条件表达式进行判断，如果表达式为真，则循环结束，否则，重复执行循环中的语句。语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[repeat_lable:] REPEAT</span><br><span class="line"></span><br><span class="line">statement_list</span><br><span class="line"></span><br><span class="line">UNTIL expr_condition</span><br><span class="line"></span><br><span class="line">END REPEAT [repeat_lable]</span><br></pre></td></tr></table></figure><p>其中，repeat_lable，为 REPEAT 语句的标注名称，该参数是可选的，REPEAT 语句内的语句，或语句群被重复，直至 expr_condition 为真。</p><p><strong>示例 10：</strong>id 值小于 10 前，重复循环让 id 值加 1，使用 REPEAT 语句，执行循环过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DECLARE id INT DEFAULT 0;</span><br><span class="line"></span><br><span class="line">REPEAT</span><br><span class="line"></span><br><span class="line">    SET id&#x3D;id+1;</span><br><span class="line"></span><br><span class="line">    UNTIL id&gt;&#x3D;10;</span><br><span class="line"></span><br><span class="line">END REPEAT;</span><br></pre></td></tr></table></figure><p><strong>（6）WHILE 语句</strong></p><p>WHILE 语句创建一个带条件判断的循环过程 与 REPEAT 不同的是，WHILE 在语句执行时，先对指定的条件进行判断，如果为真，则执行循环内的语句，否则退出循环。语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[while_lable:] WHILE expr_condition DO</span><br><span class="line"></span><br><span class="line">　　Statement_list</span><br><span class="line"></span><br><span class="line">END WHILE [while_lable]</span><br></pre></td></tr></table></figure><p>其中，while_lable 为 WHILE 语句的标注名称，Expr_condition，为进行判断的表达式，如果表达式为真，WHILE 语句内的语句，或语句群就被执行，直至 expr_condition 为假，退出循环。</p><p><strong>示例 11：</strong>创建一个变量 i，初始值为 0，当 i 小于 10 时重复执行加 1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line"></span><br><span class="line">WHILE i&lt;10 DO</span><br><span class="line"></span><br><span class="line">　　SET i&#x3D;i+1;</span><br><span class="line"></span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure><h1 id="5-查看存储过程和函数"><a href="#5-查看存储过程和函数" class="headerlink" title="5 查看存储过程和函数"></a>5 查看存储过程和函数</h1><p><strong>（1） 使用 SHOW STATUS 语句查看存储过程和函数的状态</strong></p><p>SHOW STATUS 语句可以查看存储过程和函数的状态，其基本语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE ‘pattern’]</span><br></pre></td></tr></table></figure><p>语法结构中，使用 LIKE 语句表示匹配存储过程或函数的名称。</p><p><strong>示例 12：</strong>查看示例 2 中创建的存储过程信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS LIKE ‘param_pro’ ;</span><br></pre></td></tr></table></figure><p>部分输出结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219112657060-649815465.png" alt="img"></p><p><strong>（2）使用 SHOW CREATE 语句查看存储过程和函数的定义</strong></p><p>SHOW CREATE 语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; sp_name</span><br></pre></td></tr></table></figure><p><strong>示例 13：</strong>查看示例 3 中创建的存储函数信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION fun1;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219112810628-1130016802.png" alt="img"></p><p><strong>（3）从 information_schema.Routines 表中查看存储过程和函数信息</strong></p><p>MySQL 中的存储过程和函数的信息存储在 information_schema.Routines 表中，可以通过查询该表中的记录来查询存储过程和函数的信息。</p><p><strong>示例 14：</strong>从 Routines 表中查看形成为 param_pro 的存储过程信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME &#x3D; &#39;param_pro&#39; AND ROUTINE_TYPE&#x3D;&#39;PROCEDURE&#39; ;</span><br></pre></td></tr></table></figure><p>查询结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1539768-20181219112856845-1941699294.png" alt="img"></p><h1 id="6-删除存储过程和函数"><a href="#6-删除存储过程和函数" class="headerlink" title="6 删除存储过程和函数"></a>6 删除存储过程和函数</h1><p>删除存储过程和函数可以使用 DROP 语句，其语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;PROCEDURE | FUNCTION &#125; [IF EXISTS] sp_name</span><br></pre></td></tr></table></figure><p><strong>示例 15：</strong>删除存储过程 select_pro 和存储函数 fun1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE  IF EXISTS  select_pro ;</span><br><span class="line"></span><br><span class="line">DROP FUNCTION IF EXISTS fun1 ;</span><br></pre></td></tr></table></figure><hr><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>视图是一张虚拟的表，它实际并不存储数据，所有的数据都来源于储存的 sql 逻辑中，可以理解为视图就是将数据从物理表中查询出来再进行二次操作</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/891080852_44349.jpg" alt="img"></p></blockquote><h2 id="视图创建、修改、删除"><a href="#视图创建、修改、删除" class="headerlink" title="视图创建、修改、删除"></a>视图创建、修改、删除</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：create view 视图名 as sql语句;</span><br><span class="line">*&#x2F;</span><br><span class="line">create view emp_v1</span><br><span class="line">as</span><br><span class="line">select * from emp;</span><br></pre></td></tr></table></figure><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方法一：</span><br><span class="line">create or replace view 视图名称 as sql语句</span><br><span class="line"># 方法二：</span><br><span class="line">alter view 视图名称 as sql语句</span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 语法：drop view 视图名1,视图名2...;</span><br><span class="line">drop view emp_v1;</span><br></pre></td></tr></table></figure><h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 虽然说视图并没有存储实际的数据，但是我们可以通过视图去修改物理表中的数据（部分情况下可以）</span><br><span class="line">create view emp_v1</span><br><span class="line">as</span><br><span class="line">select * from emp;</span><br><span class="line"></span><br><span class="line"># 视图中数据的更新和更新物理表中的数据的语法是一样的</span><br><span class="line">insert into emp_v1 values(1, &#39;qaq&#39;);</span><br><span class="line">update emp_v1 set name &#x3D; &#39;qwq&#39; where id &#x3D; 1;</span><br><span class="line">delete from emp_v1 where id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>上面说到只有<strong>部分情况</strong>下可以通过视图更改物理表的数据</p><p>其中以下符合条件的视图都是<strong>不允许更新</strong>的</p><ul><li><p>包含以下关键字的 sql 语句:分组函数、distinct、group by、having、union 或者 union all</p><ul><li>```mysql<h1 id="以分组函数举例"><a href="#以分组函数举例" class="headerlink" title="以分组函数举例"></a>以分组函数举例</h1>create view emp_max<br>as<br>select max(id) from emp;<h1 id="上面我们创建了只有一个列为id最大的视图，以这个为例如果修改这个视图的话是不成功的"><a href="#上面我们创建了只有一个列为id最大的视图，以这个为例如果修改这个视图的话是不成功的" class="headerlink" title="上面我们创建了只有一个列为id最大的视图，以这个为例如果修改这个视图的话是不成功的"></a>上面我们创建了只有一个列为id最大的视图，以这个为例如果修改这个视图的话是不成功的</h1><h1 id="因为这个视图中的列名为max-id-值为emp表中id最大的值，这样去修改的话mysql是不能知道要修改的具体的物理数据是啥，所以不行"><a href="#因为这个视图中的列名为max-id-值为emp表中id最大的值，这样去修改的话mysql是不能知道要修改的具体的物理数据是啥，所以不行" class="headerlink" title="因为这个视图中的列名为max(id)值为emp表中id最大的值，这样去修改的话mysql是不能知道要修改的具体的物理数据是啥，所以不行"></a>因为这个视图中的列名为max(id)值为emp表中id最大的值，这样去修改的话mysql是不能知道要修改的具体的物理数据是啥，所以不行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 常量视图</span><br><span class="line"></span><br><span class="line">  - 常量你修改个啥</span><br><span class="line"></span><br><span class="line">- Select 中包合子查询</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;mysql</span><br><span class="line">    create view emp_v1</span><br><span class="line">    as</span><br><span class="line">    select (select id from emp where name &#x3D; &#39;qwq&#39;) as id;</span><br><span class="line">    # 自己想想如果你是mysql你怎么知道你要通过这个视图修改啥数据？</span><br></pre></td></tr></table></figure></li></ul></li><li><p>join，多表</p><ul><li>```mysql<br>create view emp_v1<br>as<br>select a.id, b.name from a left join b on a.id = b.id;<h1 id="这个视图可以修改-update-但是不能删除和添加"><a href="#这个视图可以修改-update-但是不能删除和添加" class="headerlink" title="这个视图可以修改(update)但是不能删除和添加"></a>这个视图可以修改(update)但是不能删除和添加</h1><h1 id="因为这是两张表，mysql怎么知道你是删除的那张表，添加的又是那张表"><a href="#因为这是两张表，mysql怎么知道你是删除的那张表，添加的又是那张表" class="headerlink" title="因为这是两张表，mysql怎么知道你是删除的那张表，添加的又是那张表"></a>因为这是两张表，mysql怎么知道你是删除的那张表，添加的又是那张表</h1><h1 id="可以修改是因为mysql只需要去这个列对应的表中修改数据就好了"><a href="#可以修改是因为mysql只需要去这个列对应的表中修改数据就好了" class="headerlink" title="可以修改是因为mysql只需要去这个列对应的表中修改数据就好了"></a>可以修改是因为mysql只需要去这个列对应的表中修改数据就好了</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- from 一个不能更新的视图</span><br><span class="line"></span><br><span class="line">  - 数据集都来源于一个不能更新的视图了肯定就不行了呀</span><br><span class="line"></span><br><span class="line">- where 子句的子查询引用了 from 子句中的表 #TODO 记得查一下为啥</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;mysql</span><br><span class="line">    create view emp_v1</span><br><span class="line">    as</span><br><span class="line">    select * from emp e</span><br><span class="line">    where e.id in (select id from emp where id is null)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="视图和表的区别"><a href="#视图和表的区别" class="headerlink" title="视图和表的区别"></a>视图和表的区别</h2><table><thead><tr><th></th><th>创建方式</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只占有一小部分的空间，用于存储 sql 逻辑</td><td>增删改查，但是一般只用于查询</td></tr><tr><td>表</td><td>create table</td><td>保存了表数据</td><td>增删改查</td></tr></tbody></table><h2 id="视图的优缺点"><a href="#视图的优缺点" class="headerlink" title="视图的优缺点"></a>视图的优缺点</h2><h3 id="数据库视图的优点"><a href="#数据库视图的优点" class="headerlink" title="数据库视图的优点"></a>数据库视图的优点</h3><p>以下是使用数据库视图的优点：</p><ul><li><strong>数据库视图允许简化复杂查询</strong>：数据库视图由与许多基础表相关联的 SQL 语句定义。 您可以使用数据库视图来隐藏最终用户和外部应用程序的基础表的复杂性。 通过数据库视图，您只需使用简单的 SQL 语句，而不是使用具有多个连接的复杂的 SQL 语句。</li><li><strong>数据库视图有助于限制对特定用户的数据访问</strong>。 您可能不希望所有用户都可以查询敏感数据的子集。可以使用数据库视图将非敏感数据仅显示给特定用户组。</li><li><strong>数据库视图提供额外的安全层</strong>。 安全是任何关系数据库管理系统的重要组成部分。 数据库视图为数据库管理系统提供了额外的安全性。 数据库视图允许您创建只读视图，以将只读数据公开给特定用户。 用户只能以只读视图检索数据，但无法更新。</li><li><strong>数据库视图启用计算列</strong>。 数据库表不应该具有计算列，但数据库视图可以这样。 假设在<code>orderDetails</code>表中有<code>quantityOrder</code>(产品的数量)和<code>priceEach</code>(产品的价格)列。 但是，<code>orderDetails</code>表没有一个列用来存储订单的每个订单项的总销售额。如果有，数据库模式不是一个好的设计。 在这种情况下，您可以创建一个名为<code>total</code>的计算列，该列是<code>quantityOrder</code>和<code>priceEach</code>的乘积，以表示计算结果。当您从数据库视图中查询数据时，计算列的数据将随机计算产生。</li><li><strong>数据库视图实现向后兼容</strong>。 假设你有一个中央数据库，许多应用程序正在使用它。 有一天，您决定重新设计数据库以适应新的业务需求。删除一些表并创建新的表，并且不希望更改影响其他应用程序。在这种情况下，可以创建与将要删除的旧表相同的模式的数据库视图。</li></ul><h3 id="数据库视图的缺点"><a href="#数据库视图的缺点" class="headerlink" title="数据库视图的缺点"></a>数据库视图的缺点</h3><p>除了上面的优点，使用数据库视图有几个缺点：</p><ul><li>_性能_：从数据库视图查询数据可能会很慢，特别是如果视图是<strong>基于其他视图创建的</strong>。</li><li>_表依赖关系_：将根据数据库的基础表创建一个视图。每当更改与其相关联的表的结构时，<strong>都必须更改视图</strong>。</li></ul><hr><h1 id="Mysql-之数据类型"><a href="#Mysql-之数据类型" class="headerlink" title="Mysql 之数据类型"></a>Mysql 之数据类型</h1><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://www.cnblogs.com/qq631243523/p/9791393.html">https://www.cnblogs.com/qq631243523/p/9791393.html</a></p><p><a href="https://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程</a></p><h2 id="一、数值类型"><a href="#一、数值类型" class="headerlink" title="一、数值类型"></a>一、数值类型</h2><p>MySQL 支持所有标准 SQL 数值数据类型。</p><p>这些类型包括<strong>严格数值</strong>数据类型(<code>INTEGER</code>、<code>SMALLINT</code>、<code>DECIMAL</code>和<code>NUMERIC</code>)，以及<strong>近似数值</strong>数据类型(<code>FLOAT</code>、<code>REAL</code>和<code>DOUBLE PRECISION</code>)。</p><p>关键字<code>INT</code>是<code>INTEGER</code>的<strong>同义词</strong>，关键字<code>DEC</code>是<code>DECIMAL</code>的<strong>同义词</strong>。</p><p><code>BIT</code>数据类型保存<strong>位字段值</strong>，并且支持 MyISAM、MEMORY、InnoDB 和 BDB 表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型<code>TINYINT</code>、<code>MEDIUMINT</code>和<code>BIGINT</code>。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT(Tinyint)</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT(smallint)</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT(mediumint)</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT 或 INTEGER(int、integer)</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT(bigint)</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT(float)</td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE(double)</td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL(decimal)</td><td align="left">对 DECIMAL(M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</td><td align="left">依赖于 M 和 D 的值</td><td align="left">依赖于 M 和 D 的值</td><td align="left">小数值</td></tr></tbody></table><blockquote><p>mysql 中<code>TINYINT</code>、<code>smallint</code>、<code>MEDIUMINT</code>、<code>int\integer</code>和<code>BIGINT</code>默认都是有符号的，如果想指定为无符号需要使用<code>unsigned</code>关键字</p><p>如果指定了零填充则默认是无符号</p></blockquote><h3 id="整形的显示宽度"><a href="#整形的显示宽度" class="headerlink" title="整形的显示宽度"></a>整形的显示宽度</h3><p>在 mysql 的数据类型中有如下定义，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整型类型(显示宽度)</span><br></pre></td></tr></table></figure><p>注意，正确的理解，其实是显示宽度，<strong>因为整型的显示宽度，对数值大小无影响，只是当设置了 zerofill 的时候，在显示的时候补 0 而已。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1449547-20181015152509099-1787578855.png" alt="img"></p><p>从上面的显示我们看到，设置了宽度为 5，<strong>并且 zerofill 了</strong>，这样在查询的时候，会在前面自动补 0。<strong>宽度可以不设置，因为整数数据类型都有默认的显示宽度，不设就采用默认的。</strong></p><p>另外，即使设置了显示宽度，也能赋超过显示宽度的值，整型的显示宽度仅仅用于显示补 0。</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1449547-20181015152509099-1787578855.png" alt="img"></p><h3 id="浮点型与定点型"><a href="#浮点型与定点型" class="headerlink" title="浮点型与定点型"></a><strong>浮点型与定点型</strong></h3><p>在 mysql 的数据类型中浮点型分为两种，float()与 double()类型，定点型为 decimal()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型(M,D)</span><br></pre></td></tr></table></figure><ul><li><strong>M：精度，数据的总长度；</strong></li><li><strong>D：标度，小数点后的长度；</strong></li></ul><p>其区别在于：</p><ol><li> 当不指定精度时，Float、Double 默认会保存实际精度，而 Decimal 默认是整数；</li><li> 当标度不够时，都会四舍五入，但 Decimal 会警告信息。</li></ol><p><strong><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1449547-20181015153329393-1163892650.png" alt="img"></strong></p><h2 id="三、日期与时间类型"><a href="#三、日期与时间类型" class="headerlink" title="三、日期与时间类型"></a><strong>三、日期与时间类型</strong></h2><p>表示时间值的日期和时间类型为<code>DATETIME</code>、<code>DATE</code>、<code>TIMESTAMP</code>、<code>TIME</code>和<code>YEAR</code>。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的 MySQL 不能表示的值时使用”零”值。</p><p>TIMESTAMP 类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th>零值</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE(date)</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td>0000:00:00</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME(time)</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td>00:00:00</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR(year)</td><td align="left">1</td><td align="left">1901/2155</td><td>0000</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME(datetime)</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP(timestamp)</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038 结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td><td>00000000000000</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><p>DATE 类型前面可以加个 D，D 表示天即 24 小时，如往 DATE 类型插入 ‘2 15:20:20’；</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/1449547-20181015154059404-1017945968.png" alt="img"></p><p>另外 TimeStamp 类型与 DateTime 在无输入的情况下要注意下：</p><ol><li> TimeStamp 使用 Current_TimeStamp()而 DateTime 使用 NOW()来获取当前时间；</li><li> 输入 NULL 时，系统会输入系统当前日期与时间；</li><li> 无任何输入时，系统会输入系统当前日期与时间；</li></ol><h2 id="四、字符串类型"><a href="#四、字符串类型" class="headerlink" title="四、字符串类型"></a><strong>四、字符串类型</strong></h2><p>字符串类型包括 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR(char)</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR(varchar)</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB(tinyblob)</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT(tinytext)</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB(blob)</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT(text)</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB(mediumblob)</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT(mediumtext)</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB(longblob)</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT(longtext)</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h3 id="1、CHAR-与-VARCHAR"><a href="#1、CHAR-与-VARCHAR" class="headerlink" title="1、CHAR 与 VARCHAR"></a><strong>1、CHAR 与 VARCHAR</strong></h3><p>其定义方式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串类型(M)</span><br></pre></td></tr></table></figure><p>这个 M 是长度的意思(<strong>M 是字符数</strong>)，插入该列的字符串长度将不允许超过 M 所指定的长度。另外，由于 MySQL 在建库时就指定了字符集，因此就不存在 nchar、nvarchar、ntext 这种数据类型了。</p><ul><li>char 最长可取 255；</li><li>varchar 最长可取 65535；</li></ul><h3 id="2、TEXT"><a href="#2、TEXT" class="headerlink" title="2、TEXT"></a><strong>2、TEXT</strong></h3><p>TEXT 分为 4 种，与 SQLServer 不同：</p><table><thead><tr><th>类型</th><th>允许的长度</th><th>存储空间</th></tr></thead><tbody><tr><td>TINYTEXT(tinytext)</td><td>0~255 字节</td><td>值的长度+2 字节</td></tr><tr><td>TEXT(text)</td><td>0~65535 字节</td><td>值的长度+2 字节</td></tr><tr><td>MEDIUMTEXT(mediumtext)</td><td>0~167772150 字节</td><td>值的长度+3 字节</td></tr><tr><td>LONGTEXT(longtext)</td><td>0~4294967295 字节</td><td>值的长度+4 字节</td></tr></tbody></table><h2 id="3、ENUM-类型"><a href="#3、ENUM-类型" class="headerlink" title="3、ENUM 类型"></a><strong>3、ENUM 类型</strong></h2><p>ENUM 类型(枚举类型)，与 C#的概念一样，在定义时指定取值范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性名 ENUM(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;...&#39;值n&#39;)</span><br></pre></td></tr></table></figure><ul><li>ENUM 有 NOT NULL 属性，其默认值为取值列表的第一个元素；</li><li>ENUM 无 NOT NULL，则 ENUM 类型将允许插入 NULL，并且 NULL 为默认值；</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/121428362289426.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Test4(Sex ENUM(&#39;男&#39;,&#39;女&#39;));</span><br><span class="line">INSERT INTO Test4 VALUES(&#39;男&#39;);</span><br><span class="line">INSERT INTO Test4 VALUES(&#39;爷&#39;);    --这行报错</span><br><span class="line">SELECT * FROM Test4;</span><br></pre></td></tr></table></figure><h2 id="4、SET-类型"><a href="#4、SET-类型" class="headerlink" title="4、SET 类型"></a><strong>4、SET 类型</strong></h2><p>在创建表时，就指定 SET 类型的取值范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性名 SET(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;...,&#39;值n&#39;)</span><br></pre></td></tr></table></figure><p>它与 ENUM 的区别在什么地方呢？</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/121442395091653.jpg" alt="img"></p><p>基本上就是多选的 ENUM。</p><h2 id="5、二进制类型"><a href="#5、二进制类型" class="headerlink" title="5、二进制类型"></a><strong>5、二进制类型</strong></h2><p>二进制类型是在数据库中存储二进制数据的数据类型。二进制类型包括 BINARY、VARBINARY、BIT、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB。</p><table><thead><tr><th>类型</th><th>取值范围</th></tr></thead><tbody><tr><td>BINARY(M)[binary]</td><td>字节数为 M，允许长度为 0~M 的定长二进制字符串</td></tr><tr><td>VARBINARY(M)[varbinary]</td><td>允许长度为 0~M 的变长二进制字符串，字节数为值的长度加 1</td></tr><tr><td>BIT(M)[bit]</td><td>M 位二进制数据，M 最大值为 64</td></tr><tr><td>TINYBLOB[tinyblob]</td><td>可变长二进制数据，最多 255 个字节</td></tr><tr><td>BLOB[blob]</td><td>可变长二进制数据，最多 2 的 16 次方-1 个字节</td></tr><tr><td>MEDIUMBLOB[mediumblob]</td><td>可变长二进制数据，最多 2 的 24 次方-1 个字节</td></tr><tr><td>LONGBLOB[longblob]</td><td>可变长二进制数据，最多 2 的 32 次方-1 个字节</td></tr></tbody></table><h3 id="1、BINARY-和-VARBINARY"><a href="#1、BINARY-和-VARBINARY" class="headerlink" title="1、BINARY 和 VARBINARY"></a><strong>1、BINARY 和 VARBINARY</strong></h3><p>两者唯一的差别在于 BINARY 当长度不够时会补\0。</p><h3 id="2、BIT-类型"><a href="#2、BIT-类型" class="headerlink" title="2、BIT 类型"></a><strong>2、BIT 类型</strong></h3><p>BIT 类型与 SQLServer 里的就差别大了。 其定义方式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BIT(M)</span><br></pre></td></tr></table></figure><p>其中”M”指定了该二进制的最大字节长度为 M，M 的最大值为 64。如 BIT(4)就是数据类型为 BIT 类型，长度为 4。其能够存储的值为 0-15。因为变成二进制后，15 的值为 1111。</p><p>在查询 BIT 类型的数据时，要用 BIN(字段名+0)来将值转换为二进制显示。</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL/121528536183759.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Test6(BB BIT(4));</span><br><span class="line">INSERT INTO Test6 VALUES(12);</span><br><span class="line">SELECT BIN(BB+0) FROM Test6;</span><br></pre></td></tr></table></figure><p>上面的结果以二进制显示，最大的长度为 4。</p><p><strong>3、BLOB 类型</strong></p><p>BLOB 类型是一种特殊的二进制类型。BLOB 可以存储数据量很大的二进制数据，如图片，视频等。BLOB 类型包括 TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们之间的区别也只是最大长度不同。</p><h2 id="五、数据类型的选择"><a href="#五、数据类型的选择" class="headerlink" title="五、数据类型的选择"></a><strong>五、数据类型的选择</strong></h2><ol><li> 整型：根据要显示的最大值决定；</li><li> 浮点型：要显示小数。如果要精确到小数点后 10 位，就选择 DOUBLE，而不应该选择 FLOAT。DECIMAL 精度较高，浮点数会出现误差，如果精度较高，则应选择定点数 DECIMAL；</li><li> 字符串型：定长与变长的区别，CHAR 类型占用空间比较大，但是处理速度比 VARCHAR 快，如果长度变化不大，如身份证号码那种，最好选择 CHAR 类型。而对于评论字符串，最好选择 VARCHAR；</li><li> 时间：根据需要显示的类型咯，特别是 TIMESTAMP,如果需要显示的时间与时区对应，就应该选择 TIMESTAMP；</li><li> ENUM 类型和 SET 类型：长度不同，ENUM 类型最多可以由 65535 个成员，而 SET 类型最多只能包含 64 个成员。且 ENUM 只能单选，而 SET 类型可以多选；</li><li> TEXT 类型和 BLOB 类型：TEXT 只能存储字符数据，而 BLOB 可以存储二进制数据。如果是纯文本，适合 TEXT。如果是图片等适合存二进制；</li></ol><h2 id="六、问题总结"><a href="#六、问题总结" class="headerlink" title="六、问题总结"></a><strong>六、问题总结</strong></h2><p><strong>1、存储路径的问题</strong></p><p>MySQL 中，如果路径中使用”&quot;符号时，这个符号会被过滤。解决的办法是路径中用”/“或”\“来代替”&quot;。这样 MySQL 就不会自动过滤路径中的分隔符。</p><p><strong>2、MySQL 中的布尔类型</strong></p><p>MySQL 中没有 Bool 或 Boolean 类型，但是为了支持 SQL 标准，也可以定义 Bool 或 Boolean 类型的，但是 Bool 或 Boolean 类型最后转换成的是 TinyInt(1)，也就是说,在 MySQL 中，布尔类型实际上是 TinyInt(1)。</p><p><strong>3、MySQL 中如何存储 JPG 图片或 MP3 音乐</strong></p><p>一般情况下，数据库中不直接存储图片和音频文件，而是存储图片或音频文件的路径，如果在特殊情况下需要在 MySQL 数据库中存储图片和音频文件，可以选择 BLOB 类型；</p>]]></content>
      
      
      <categories>
          
          <category> 待整理 </category>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待整理 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea基础配置</title>
      <link href="2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/"/>
      <url>2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、idea安装启动"><a href="#一、idea安装启动" class="headerlink" title="一、idea安装启动"></a>一、idea安装启动</h1><p>略</p><h1 id="二、idea配置"><a href="#二、idea配置" class="headerlink" title="二、idea配置"></a>二、idea配置</h1><h2 id="idea虚拟机配置"><a href="#idea虚拟机配置" class="headerlink" title="idea虚拟机配置"></a>idea虚拟机配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m # 初始内存数</span><br><span class="line">-Xmx750m # 最大内存数</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;240m # 保留代码缓存大小</span><br><span class="line">-XX:+UseConcMarkSweepGC </span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches&#x3D;false</span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes&#x3D;&quot;&quot;</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-javaagent:D:\downloads\Learning\JetBrains\IntelliJ IDEA 2018.2.5\bin\JetbrainsCrack-release-enc.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="idea界面设置"><a href="#idea界面设置" class="headerlink" title="idea界面设置"></a>idea界面设置</h2><p>打开工具视图</p><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609161002504.png" alt="image-20200609161002504"></p><h3 id="设置悬浮提示"><a href="#设置悬浮提示" class="headerlink" title="设置悬浮提示"></a>设置悬浮提示</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609164301178.png" alt="image-20200609164301178"></p><h3 id="设置自动导包"><a href="#设置自动导包" class="headerlink" title="设置自动导包"></a>设置自动导包</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609164402862.png" alt="image-20200609164402862"></p><h3 id="设置方法之间的分割线"><a href="#设置方法之间的分割线" class="headerlink" title="设置方法之间的分割线"></a>设置方法之间的分割线</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609164554935.png" alt="image-20200609164554935"></p><h3 id="设置忽略大小写提示"><a href="#设置忽略大小写提示" class="headerlink" title="设置忽略大小写提示"></a>设置忽略大小写提示</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609164842973.png" alt="image-20200609164842973"></p><h3 id="设置tab过多时不隐藏"><a href="#设置tab过多时不隐藏" class="headerlink" title="设置tab过多时不隐藏"></a>设置tab过多时不隐藏</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609165101396.png" alt="image-20200609165101396"></p><h3 id="设置文件头部信息"><a href="#设置文件头部信息" class="headerlink" title="设置文件头部信息"></a>设置文件头部信息</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609165614802.png" alt="image-20200609165614802">                                                                                             </p><h3 id="开启自动编译"><a href="#开启自动编译" class="headerlink" title="开启自动编译"></a>开启自动编译</h3><p><img src= "/img/loading.gif" data-lazy-src="/2019/08/14/idea/idea%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/image-20200609181519729.png" alt="image-20200609181519729"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
          <category> idea </category>
          
          <category> IDE </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> idea </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
